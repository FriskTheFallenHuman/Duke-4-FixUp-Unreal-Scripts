/*******************************************************************************
 * aFinalDecoration_Sway generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class aFinalDecoration_Sway extends aFinalDecoration
    abstract
    collapsecategories;

var float swayPct;
var float swayDir;
var Vector swayDest;
var Vector swayHome;
var Vector swayPos;
var name idleGridName;
var() noexport float swayResetSpeed "Speed at which the plant will sway back to rest at (must be negative)";
var() noexport float swayMaxSpeed "Maximum speed the plant will sway at";
var() noexport float swayTouchSpeedFactor "Magic number for speed of sway based on touch. High number means faster sway";
var() noexport float swayTouchDistFactor "Magic number for distnace of sway based on touch. High number means farther sway";
var() noexport float swayDamageSpeedFactor "Magic number for speed of sway based on damage. High number means faster sway";
var() noexport float swayDamageDistFactor "Magic number for distance of sway based on damage. High number means farther sway";

function VSetGridState(Vector V)
{
    // End:0x35
    if(AnimationController == none)
    {
        AnimationController.SetAnimGridState(idleGridName, V.X, V.Y);
    }
    return;
}

event Tick(float DeltaTime)
{
    super(Actor).Tick(DeltaTime);
    // End:0x1C
    if(swayDir == 0)
    {
        return;
    }
    swayPct += (DeltaTime * swayDir);
    // End:0x66
    if(swayPct >= 1)
    {
        swayPct = 1;
        swayDir = swayResetSpeed;
        swayHome = Vect(0, 0);
    }
    // End:0x8B
    if(swayPct <= 0)
    {
        swayPct = 0;
        swayDir = 0;
    }
    swayPos = VLerp(swayPct, swayHome, swayDest);
    VSetGridState(swayPos);
    return;
}

final function Sway(Vector Dir, float distMag, float speedMag)
{
    local Rotator invRot;
    local Vector Dirt;

    invRot.Yaw = - Rotation.Yaw;
    Dir = TransformVectorByRot(Dir, invRot);
    Dirt.X = - FClamp(Dir.Y, -1, 1);
    Dirt.Y = - FClamp(Dir.X, -1, 1);
    swayPct = 0;
    swayHome = swayPos;
    swayDest = swayPos + (Dirt * distMag);
    swayDest.X = FClamp(swayDest.X, -1, 1);
    swayDest.Y = FClamp(swayDest.Y, -1, 1);
    swayDir = FMin(2 * speedMag, swayMaxSpeed);
    return;
}

event Touch(Actor Other)
{
    super(dnDecoration).Touch(Other);
    Sway(Other.Velocity, swayTouchDistFactor * VSizeSquared(Other.Velocity), swayTouchSpeedFactor * VSizeSquared(Other.Velocity));
    return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    super(dnDecoration).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
    Sway(DamageDirection, swayDamageDistFactor * ThisFrameDamage.Damage, swayDamageSpeedFactor * ThisFrameDamage.Damage);
    return;
}

event Bump(Actor Other)
{
    super(dnDecoration).Bump(Other);
    Sway(Other.Velocity, swayTouchDistFactor * VSizeSquared(Other.Velocity), swayTouchSpeedFactor * VSizeSquared(Other.Velocity));
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super(dnDecoration).RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.SetChannelGridState(idleGridName, AnimationControllerClass, Mesh);
    return;
}

defaultproperties
{
    swayResetSpeed=-0.15
    swayMaxSpeed=150
    swayTouchSpeedFactor=4E-05
    swayTouchDistFactor=1.75E-05
    swayDamageSpeedFactor=0.375
    swayDamageDistFactor=0.075
}