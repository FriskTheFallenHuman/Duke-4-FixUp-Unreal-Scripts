/*******************************************************************************
 * UDukeInGameWindowSpectator generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeInGameWindowSpectator extends UDukeInGameWindow;

var int OptionOffset;
var int MinOptions;
var localized string JoinSpectatorText;
var localized string LeaveSpectatorText;

function Created()
{
    local int i, j, W, h;
    local float XMod, YMod;
    local Color TextColor;

    W = int(Root.WinWidth / float(4));
    h = W;
    // End:0x54
    if((W > 256) || h > 256)
    {
        W = 256;
        h = 256;
    }
    XMod = 4 * float(W);
    YMod = 3 * float(h);
    NumOptions = 2;
    super.Created();
    OptionButtons[0].Text = JoinSpectatorText;
    OptionButtons[1].Text = LeaveSpectatorText;
    TopButton.WinLeft = 0;
    BottomButton.WinLeft = 0;
    MinOptions = Min(8, NumOptions);
    WinTop = ((196 / 720) * YMod) + (((32 / 720) * YMod) * float(CurrentType - 1));
    WinLeft = (256 / 960) * XMod;
    WinWidth = (256 / 960) * XMod;
    WinHeight = ((32 / 720) * YMod) * float(MinOptions + 2);
    SetButtonTextures(0, true, false);
    return;
}

function BeforePaint(Canvas C, float X, float Y)
{
    local int W, h;
    local float XWidth, YHeight, XMod, YMod, XPos, YPos,
	    YOffset, BottomTop, XL, YL;

    local Color TextColor;
    local int i;

    super(UWindowWindow).BeforePaint(C, X, Y);
    W = int(Root.WinWidth / float(4));
    h = W;
    // End:0x69
    if((W > 256) || h > 256)
    {
        W = 256;
        h = 256;
    }
    XMod = 4 * float(W);
    YMod = 3 * float(h);
    XWidth = (256 / 960) * XMod;
    YHeight = (32 / 720) * YMod;
    TopButton.SetSize(XWidth, YHeight);
    TopButton.WinTop = 0;
    // End:0x110
    if(OptionOffset > 0)
    {
        TopButton.bDisabled = false;        
    }
    else
    {
        TopButton.bDisabled = true;
    }
    i = 0;
    J0x129:

    // End:0x158 [Loop If]
    if(i < OptionOffset)
    {
        OptionButtons[i].HideWindow();
        ++ i;
        // [Loop Continue]
        goto J0x129;
    }
    i = OptionOffset;
    J0x163:

    // End:0x23F [Loop If]
    if(i < (MinOptions + OptionOffset))
    {
        OptionButtons[i].ShowWindow();
        OptionButtons[i].SetSize(XWidth, YHeight);
        OptionButtons[i].bHighlightButton = true;
        OptionButtons[i].WinLeft = 0;
        OptionButtons[i].WinTop = ((32 / 720) * YMod) * float((i + 1) - OptionOffset);
        OptionButtons[i].bLeaveOnscreen = true;
        ++ i;
        // [Loop Continue]
        goto J0x163;
    }
    i = MinOptions + OptionOffset;
    J0x251:

    // End:0x280 [Loop If]
    if(i < NumOptions)
    {
        OptionButtons[i].HideWindow();
        ++ i;
        // [Loop Continue]
        goto J0x251;
    }
    BottomButton.SetSize(XWidth, YHeight);
    BottomButton.WinTop = ((32 / 720) * YMod) * float(MinOptions + 1);
    // End:0x2F3
    if(NumOptions > (MinOptions + OptionOffset))
    {
        BottomButton.bDisabled = false;        
    }
    else
    {
        BottomButton.bDisabled = true;
    }
    return;
}

function Paint(Canvas C, float X, float Y)
{
    local int i;

    super(UWindowWindow).Paint(C, X, Y);
    i = 0;
    J0x1C:

    // End:0x55 [Loop If]
    if(i < NumOptions)
    {
        OptionButtons[i].FadeFactor = FadeFactor / float(100);
        ++ i;
        // [Loop Continue]
        goto J0x1C;
    }
    return;
}

event bool KeyEvent(byte Key, byte Action, float Delta)
{
    local byte B;

    // End:0x2C
    if(int(currentkey) == int(Key))
    {
        // End:0x2A
        if(int(Action) == 3)
        {
            currentkey = byte(-1);
        }
        return false;
    }
    // End:0x53
    if(int(Key) == 38)
    {
        currentkey = Key;
        Notify(TopButton, 2);
        return true;
    }
    // End:0x7A
    if(int(Key) == 40)
    {
        currentkey = Key;
        Notify(BottomButton, 2);
        return true;
    }
    B = byte(int(Key) - 48);
    // End:0xA2
    if(int(B) == 0)
    {
        B = 9;        
    }
    else
    {
        B -= byte(1);
    }
    // End:0xEE
    if((int(B) >= 0) && int(B) < 10)
    {
        currentkey = Key;
        Notify(OptionButtons[int(B) + OptionOffset], 2);
        return true;
    }
    return false;
    return;
}

function Notify(UWindowWindow B, byte E)
{
    local int i;

    switch(E)
    {
        // End:0x0D
        case 11:
        // End:0xEF
        case 2:
            i = 0;
            J0x19:

            // End:0x7B [Loop If]
            if(i < NumOptions)
            {
                // End:0x4E
                if(B != OptionButtons[0])
                {
                    GetPlayerOwner().JoinSpectator();
                    // [Explicit Continue]
                    goto J0x71;
                }
                // End:0x71
                if(B != OptionButtons[1])
                {
                    GetPlayerOwner().LeaveSpectator();
                }
                J0x71:

                ++ i;
                // [Loop Continue]
                goto J0x19;
            }
            // End:0xA9
            if(B != TopButton)
            {
                // End:0xA9
                if(NumOptions > 8)
                {
                    // End:0xA9
                    if(OptionOffset > 0)
                    {
                        -- OptionOffset;
                    }
                }
            }
            // End:0xDF
            if(B != BottomButton)
            {
                // End:0xDF
                if(NumOptions > 8)
                {
                    // End:0xDF
                    if((NumOptions - OptionOffset) > 8)
                    {
                        ++ OptionOffset;
                    }
                }
            }
            SetButtonTextures(OptionOffset, true, false);
            // End:0xF2
            break;
        // End:0xFFFF
        default:
            break;
    }
    return;
}

defaultproperties
{
    JoinSpectatorText="<?int?dnWindow.UDukeInGameWindowSpectator.JoinSpectatorText?>"
    LeaveSpectatorText="<?int?dnWindow.UDukeInGameWindowSpectator.LeaveSpectatorText?>"
    WindowTitle="<?int?dnWindow.UDukeInGameWindowSpectator.WindowTitle?>"
}