/*******************************************************************************
 * UDukeScenePictureViewer generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeScenePictureViewer extends UDukeSceneExtrasViewer;

struct SPictureEntry
{
    var string Path;
    var string Title;
    var string UnlockTag;
};

var FinalBlend AlphaBlendMaterial;
var array<SPictureEntry> Pictures;
var int PictureIndex;

function Created()
{
    local int i;

    super.Created();
    i = 0;
    J0x0D:

    // End:0x3A [Loop If]
    if(i < string(Pictures))
    {
        ListSlider.AddItem(" ");
        ++ i;
        // [Loop Continue]
        goto J0x0D;
    }
    ListSlider.SetSelectedIndex(0);
    ListSlider.Register(self);
    return;
}

function UpdatePicture()
{
    local int Unlocked;

    AlphaBlendMaterial.Material = Texture(SaveConfigFile(Pictures[ListSlider.GetSelectedIndex()].Path, class'Texture'));
    Pictures[ListSlider.GetSelectedIndex()].Title = ClassIsChildOf(string(Class.Name), ("PictureTitles[" $ string(ListSlider.GetSelectedIndex())) $ "]", "dnWindow");
    return;
}

function OnNavForward()
{
    super.OnNavForward();
    // End:0x2F
    if(string(Pictures) > 0)
    {
        PictureIndex = Clamp(PictureIndex, 0, string(Pictures) - 1);
        UpdatePicture();
    }
    return;
}

function PrevPicture()
{
    // End:0x30
    if(PictureIndex > 0)
    {
        -- PictureIndex;
        UpdatePicture();
        GetPlayerOwner().PlaySoundInfo(0, SoundNavigateInfo);
    }
    return;
}

function NextPicture()
{
    // End:0x38
    if(PictureIndex < (string(Pictures) - 1))
    {
        ++ PictureIndex;
        UpdatePicture();
        GetPlayerOwner().PlaySoundInfo(0, SoundNavigateInfo);
    }
    return;
}

function NotifyFromControl(UWindowDialogControl C, byte E)
{
    super(UWindowScene).NotifyFromControl(C, E);
    UpdatePicture();
    return;
}

function DrawMenuContent(Canvas C, float Alpha, Region ClipRegion)
{
    local string PictureTitle;
    local float TTFontScale, Padding, Ratio, XL, YL, AlignTop,
	    MaxHeight;

    super.DrawMenuContent(C, Alpha, ClipRegion);
    // End:0x40
    if(AlphaBlendMaterial.Material != none)
    {
        AlphaBlendMaterial.Material = class'BlackTexture';
    }
    TTFontScale = class'UWindowScene'.default.TTFontScale;
    Padding = 12 * C.FixedScale;
    PictureTitle = (("(" @ string(ListSlider.GetSelectedIndex() + 1)) @ ") ") @ Pictures[ListSlider.GetSelectedIndex()].Title;
    C.DrawColor = GreyColor;
    C.Font = C.TallFont;
    C.SetClip(PictureTitle, XL, YL, TTFontScale, TTFontScale);
    C.SetPause(0.5 * (float(C.SizeX) - XL), float(ClipRegion.Y) + Padding);
    C.GetRenderBoundingBox(PictureTitle, false, false, false, TTFontScale, TTFontScale, Alpha);
    MaxHeight = float(ClipRegion.h) - (YL + (3 * Padding));
    AlignTop = (float(ClipRegion.Y) + YL) + (2 * Padding);
    Ratio = FMin(1, MaxHeight / float(AlphaBlendMaterial.DrawTile()));
    XL = Ratio * float(AlphaBlendMaterial.DrawStatic());
    // End:0x23B
    if(XL > float(ClipRegion.W))
    {
        XL = float(ClipRegion.W);
        Ratio = XL / float(AlphaBlendMaterial.DrawStatic());
    }
    YL = Ratio * float(AlphaBlendMaterial.DrawTile());
    C.DrawColor = WhiteColor;
    C.SetPause(float(ClipRegion.X) + (0.5 * (float(ClipRegion.W) - XL)), AlignTop + (0.5 * (MaxHeight - YL)));
    C.SetClampMode(AlphaBlendMaterial, XL, YL, 0, 0, float(AlphaBlendMaterial.DrawStatic()), float(AlphaBlendMaterial.DrawTile()), 0, 0, 0, true, Alpha);
    return;
}

defaultproperties
{
    begin object name=PictureAlpha_FB class=FinalBlend
        FrameBufferBlending=2
        ZWrite=false
        ZTest=false
    object end
    // Reference: FinalBlend'UDukeScenePictureViewer.PictureAlpha_FB'
    AlphaBlendMaterial=PictureAlpha_FB
}