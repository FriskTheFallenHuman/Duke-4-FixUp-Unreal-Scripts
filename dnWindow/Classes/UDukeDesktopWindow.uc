/*******************************************************************************
 * UDukeDesktopWindow generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeDesktopWindow extends UDukeDesktopWindowBase
    config;

const MF_MainMenu = 1;
const MF_MultiplayerMenu = 2;
const MF_All = 3;
const FullSizeTextureWidth = 1024;
const FullSizeTextureHeight = 768;

enum EDukeStartupState
{
    DSS_None,
    DSS_Legal,
    DSS_Dice,
    DSS_3DR,
    DSS_Triptych,
    DSS_Attract,
    DSS_Done,
    DSS_Exiting
};

var globalconfig string ThemePackage;
var globalconfig bool ThemeColorizable;
var globalconfig bool ThemeTranslucentIcons;
var SmackerTexture WindowOpenSmack;
var float LastClipX;
var float WinScaleX;
var float WinScaleY;
var int MenuMode;
var UDukeDesktopWindow.EDukeStartupState DukeStartupState;
var BinkTexture BinkMovie;
var MaterialEx FilmGrainMaterial;
var bool bLastHasFocus;

function Created()
{
    bAlwaysBehind = true;
    WinScaleX = WinWidth / 1024;
    WinScaleY = WinHeight / 768;
    LoadArt();
    DukeConsole(Root.Console).Desktop = self;
    return;
}

function Texture LoadTexture(string TextureName)
{
    return none;
    return;
}

function SmackerTexture LoadSmack(string SmackName)
{
    return none;
    return;
}

function LoadArt()
{
    WindowOpenSmack = LoadSmack("menuopen");
    SetCursor(Root.NormalCursor);
    LookAndFeel.Active = LoadTexture("menu_windowbc");
    LookAndFeel.Active2 = LoadTexture("menu_window2bc");
    LookAndFeel.Active3 = LoadTexture("menu_window3bc");
    LookAndFeel.Glow = LoadTexture("menu_window_glowbc");
    LookAndFeel.Glow3 = LoadTexture("menu_window_glow3bc");
    return;
}

function ActivateWindow(int Depth, bool bTransientNoDeactivate)
{
    // End:0x1E
    if(Root.FindChildWindow(class'UWindowFramedWindow') == none)
    {
        return;
    }
    super(UWindowWindow).ActivateWindow(Depth, bTransientNoDeactivate);
    return;
}

function Paint(Canvas C, float MouseX, float MouseY)
{
    local float Ratio, XL, YL;

    // End:0x52
    if(C.ClipX != LastClipX)
    {
        LastClipX = C.ClipX;
        ResolutionChanged(C.ClipX, C.ClipY);
    }
    // End:0xC1
    if(int(DukeStartupState) != int(6))
    {
        // End:0xC1
        if(((Root == none) && Root.Console == none) && ! Root.Console.bShowConsole)
        {
            Root.Console.bDontDrawMouse = true;
        }
    }
    // End:0x212
    if((BinkMovie == none) || int(DukeStartupState) == int(7))
    {
        C.SetPause(0, 0);
        C.SetClampMode(class'BlackTexture', WinWidth, WinHeight, 0, 0, 1, 1);
        // End:0x212
        if(BinkMovie == none)
        {
            Ratio = float(BinkMovie.DrawStatic()) / float(BinkMovie.DrawTile());
            XL = WinWidth;
            YL = XL / Ratio;
            // End:0x19D
            if(YL > WinHeight)
            {
                YL = WinHeight;
                XL = YL * Ratio;
            }
            C.SetPause(0.5 * (WinWidth - XL), 0.5 * (WinHeight - YL));
            C.SetClampMode(BinkMovie, XL, YL, 0, 0, float(BinkMovie.DrawStatic()), float(BinkMovie.DrawTile()));
        }
    }
    // End:0x26E
    if(FilmGrainMaterial == none)
    {
        C.SetPause(0, 0);
        C.SetClampMode(FilmGrainMaterial, WinWidth, WinHeight, 0, 0, WinWidth, WinHeight,,,,, 1);
    }
    return;
}

function Tick(float Delta)
{
    local UDukeRootWindow DukeRoot;
    local bool bHasFocus;

    bHasFocus = Root.Console.Viewport.InterruptQuery();
    // End:0x12B
    if(BinkMovie == none)
    {
        // End:0x8E
        if(ObjectIsDestroyed())
        {
            BinkMovie.SetVolume(float(GetPlayerOwner().ConsoleCommand("get ini:Engine.Engine.AudioDevice SoundVolume")));            
        }
        else
        {
            // End:0x12B
            if(! ObjectDestroy())
            {
                // End:0x100
                if(bHasFocus && ! bLastHasFocus)
                {
                    BinkMovie.SetVolume(float(GetPlayerOwner().ConsoleCommand("get ini:Engine.Engine.AudioDevice SoundVolume")));                    
                }
                else
                {
                    // End:0x12B
                    if(! bHasFocus && bLastHasFocus)
                    {
                        BinkMovie.SetVolume(0);
                    }
                }
            }
        }
    }
    bLastHasFocus = bHasFocus;
    // End:0x15F
    if((BinkMovie != none) || BinkMovie.IsFinalFrame())
    {
        GotoNextStartupState();
    }
    WinScaleX = WinWidth / 1024;
    WinScaleY = WinHeight / 768;
    return;
}

final simulated function BeginStartupSequence()
{
    // End:0x11
    if(ObjectIsDestroyed())
    {
        DukeStartupState = 4;        
    }
    else
    {
        // End:0x22
        if(GetGearboxEngineGlobals())
        {
            DukeStartupState = 2;            
        }
        else
        {
            DukeStartupState = 0;
        }
    }
    return;
}

final simulated function bool IsStartupComplete()
{
    return int(DukeStartupState) == int(6);
    return;
}

final simulated function StartAttractVideo()
{
    DukeStartupState = 4;
    Root.Console.bDontDrawMouse = true;
    Root.DontCloseOnEscape = true;
    Root.bAllowConsole = false;
    GotoNextStartupState();
    return;
}

final simulated function StopBinks(bool bAllowMenuTransition)
{
    // End:0x22
    if(BinkMovie == none)
    {
        DukeStartupState = 5;
        GotoNextStartupState(! bAllowMenuTransition);
    }
    return;
}

function bool ShouldDisplayESRBMessage()
{
    return (UnregisterListener() == "US") || UnregisterListener() == "CA";
    return;
}

final simulated function GotoNextStartupState(optional bool bDoNotChangeMenu)
{
    // End:0x25
    if(BinkMovie == none)
    {
        class'BinkTexture'.static.DrawTile(BinkMovie);
        BinkMovie = none;
    }
    switch(DukeStartupState)
    {
        // End:0x97
        case 0:
            DukeStartupState = 2;
            Root.Console.bDontDrawMouse = true;
            Root.DontCloseOnEscape = true;
            Root.bAllowConsole = false;
            BinkMovie = class'BinkTexture'.static.DrawTextDropShadowed("Legal");
            // End:0x162
            break;
        // End:0xC6
        case 2:
            DukeStartupState = 4;
            BinkMovie = class'BinkTexture'.static.DrawTextDropShadowed("Dice_Intro");
            // End:0x162
            break;
        // End:0xF2
        case 4:
            DukeStartupState = 5;
            BinkMovie = class'BinkTexture'.static.DrawTextDropShadowed("Attract");
            // End:0x162
            break;
        // End:0x15F
        case 5:
            DukeStartupState = 6;
            Root.Console.bDontDrawMouse = false;
            Root.DontCloseOnEscape = false;
            Root.bAllowConsole = true;
            // End:0x15C
            if(! bDoNotChangeMenu)
            {
                Root.ShowUWindowSystem(1);
            }
            // End:0x162
            break;
        // End:0xFFFF
        default:
            break;
    }
    // End:0x256
    if(BinkMovie == none)
    {
        // End:0x1C9
        if(ObjectDestroy())
        {
            BinkMovie.SetVolume(float(GetPlayerOwner().ConsoleCommand("get ini:Engine.Engine.AudioDevice SoundVolume")), true);            
        }
        else
        {
            // End:0x241
            if(Root.Console.Viewport.InterruptQuery())
            {
                BinkMovie.SetVolume(float(GetPlayerOwner().ConsoleCommand("get ini:Engine.Engine.AudioDevice SoundVolume")));                
            }
            else
            {
                BinkMovie.SetVolume(0);
            }
        }
    }
    return;
}

defaultproperties
{
    ThemePackage="mtheme_cobaltblue"
    ThemeTranslucentIcons=true
    MenuMode=1
    DukeStartupState=6
    FilmGrainMaterial='dt_effects.PostProcessing.FilmGrain_fb'
}