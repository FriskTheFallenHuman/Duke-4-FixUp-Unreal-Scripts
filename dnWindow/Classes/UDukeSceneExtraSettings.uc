/*******************************************************************************
 * UDukeSceneExtraSettings generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeSceneExtraSettings extends UWindowScene;

var UDukeCheckbox GodModeCheck;
var localized string GodModeText;
var localized string GodModeHelp;
var UDukeCheckbox InfiniteAmmoCheck;
var localized string InfiniteAmmoText;
var localized string InfiniteAmmoHelp;
var UDukeCheckbox InstaGibCheck;
var localized string InstaGibText;
var localized string InstaGibHelp;
var localized string InstaGibLowGoreText;
var localized string InstaGibLowGoreHelp;
var UDukeCheckbox MirrorModeCheck;
var localized string MirrorModeText;
var localized string MirrorModeHelp;
var UDukeCheckbox GrayscaleModeCheck;
var localized string GrayscaleModeText;
var localized string GrayscaleModeHelp;
var UDukeListSlider GameSpeed;
var localized string GameSpeedText;
var localized string GameSpeedHelp;
var int GameSpeedDefault;
var UDukeListSlider HeadScale;
var localized string HeadScaleText;
var localized string HeadScaleHelp;
var int HeadScaleDefault;
var UDukeCheckbox ClassicFreezeRayCheck;
var localized string ClassicFreezeRayText;
var localized string ClassicFreezeRayHelp;
var UDukeCheckbox CheckBeingConfirmed;

function Created()
{
    super.Created();
    GodModeCheck = UDukeCheckbox(CreateWindow(class'UDukeCheckbox'));
    GodModeCheck.SetText(GodModeText);
    GodModeCheck.SetHelpText(GodModeHelp);
    GodModeCheck.Register(self);
    InfiniteAmmoCheck = UDukeCheckbox(CreateWindow(class'UDukeCheckbox'));
    InfiniteAmmoCheck.SetText(InfiniteAmmoText);
    InfiniteAmmoCheck.SetHelpText(InfiniteAmmoHelp);
    InfiniteAmmoCheck.Register(self);
    InstaGibCheck = UDukeCheckbox(CreateWindow(class'UDukeCheckbox'));
    // End:0x113
    if(GetPlayerOwner().Level.Game.bLowGore)
    {
        InstaGibCheck.SetText(InstaGibLowGoreText);
        InstaGibCheck.SetHelpText(InstaGibLowGoreHelp);        
    }
    else
    {
        InstaGibCheck.SetText(InstaGibText);
        InstaGibCheck.SetHelpText(InstaGibHelp);
    }
    InstaGibCheck.Register(self);
    MirrorModeCheck = UDukeCheckbox(CreateWindow(class'UDukeCheckbox'));
    MirrorModeCheck.SetText(MirrorModeText);
    MirrorModeCheck.SetHelpText(MirrorModeHelp);
    MirrorModeCheck.Register(self);
    GrayscaleModeCheck = UDukeCheckbox(CreateWindow(class'UDukeCheckbox'));
    GrayscaleModeCheck.SetText(GrayscaleModeText);
    GrayscaleModeCheck.SetHelpText(GrayscaleModeHelp);
    GrayscaleModeCheck.Register(self);
    GameSpeed = UDukeListSlider(CreateWindow(class'UDukeListSlider'));
    GameSpeed.SetText(GameSpeedText);
    GameSpeed.SetHelpText(GameSpeedHelp);
    GameSpeed.Register(self);
    GameSpeed.AddItem("25%", "0.25");
    GameSpeed.AddItem("50%", "0.5");
    GameSpeed.AddItem("100%", "1.0");
    GameSpeed.AddItem("125%", "1.25");
    GameSpeed.AddItem("150%", "1.5");
    GameSpeed.AddItem("200%", "1.98");
    GameSpeedDefault = 2;
    HeadScale = UDukeListSlider(CreateWindow(class'UDukeListSlider'));
    HeadScale.SetText(HeadScaleText);
    HeadScale.SetHelpText(HeadScaleHelp);
    HeadScale.Register(self);
    HeadScale.AddItem("50%", "0.5");
    HeadScale.AddItem("75%", "0.75");
    HeadScale.AddItem("100%", "1.0");
    HeadScale.AddItem("125%", "1.25");
    HeadScale.AddItem("150%", "1.5");
    HeadScaleDefault = 2;
    ClassicFreezeRayCheck = UDukeCheckbox(CreateWindow(class'UDukeCheckbox'));
    ClassicFreezeRayCheck.SetText(ClassicFreezeRayText);
    ClassicFreezeRayCheck.SetHelpText(ClassicFreezeRayHelp);
    ClassicFreezeRayCheck.Register(self);
    SetDefaults();
    FirstControlToFocus = MirrorModeCheck;
    GodModeCheck.NavDown = InfiniteAmmoCheck;
    InfiniteAmmoCheck.NavDown = InstaGibCheck;
    InstaGibCheck.NavDown = MirrorModeCheck;
    MirrorModeCheck.NavDown = GrayscaleModeCheck;
    GrayscaleModeCheck.NavDown = GameSpeed;
    GameSpeed.NavDown = HeadScale;
    HeadScale.NavDown = ClassicFreezeRayCheck;
    ClassicFreezeRayCheck.NavDown = GodModeCheck;
    GodModeCheck.NavUp = ClassicFreezeRayCheck;
    InfiniteAmmoCheck.NavUp = GodModeCheck;
    InstaGibCheck.NavUp = InfiniteAmmoCheck;
    MirrorModeCheck.NavUp = InstaGibCheck;
    GrayscaleModeCheck.NavUp = MirrorModeCheck;
    GameSpeed.NavUp = GrayscaleModeCheck;
    HeadScale.NavUp = GameSpeed;
    ClassicFreezeRayCheck.NavUp = HeadScale;
    return;
}

function OnNavForward()
{
    // End:0x7E
    if((DukePlayer(GetPlayerOwner()) == none) && DukePlayer(GetPlayerOwner()).HasFullGameCompletion(1))
    {
        ShowChildWindow(GodModeCheck);
        ShowChildWindow(InfiniteAmmoCheck);
        ShowChildWindow(InstaGibCheck);
        ShowChildWindow(MirrorModeCheck);
        ShowChildWindow(GrayscaleModeCheck);
        ShowChildWindow(GameSpeed);
        ShowChildWindow(ClassicFreezeRayCheck);        
    }
    else
    {
        HideChildWindow(GodModeCheck);
        HideChildWindow(InfiniteAmmoCheck);
        HideChildWindow(InstaGibCheck);
        HideChildWindow(MirrorModeCheck);
        HideChildWindow(GrayscaleModeCheck);
        HideChildWindow(GameSpeed);
        HideChildWindow(ClassicFreezeRayCheck);
    }
    // End:0xDF
    if(ObjectDestroy())
    {
        HideChildWindow(GameSpeed);        
    }
    super.OnNavForward();
    UpdateKeyWindows();
    return;
}

function Paint(Canvas C, float X, float Y)
{
    local float Top;

    GodModeCheck.WinWidth = float(ButtonWidth);
    GodModeCheck.WinHeight = float(ButtonHeight);
    InfiniteAmmoCheck.WinWidth = float(ButtonWidth);
    InfiniteAmmoCheck.WinHeight = float(ButtonHeight);
    InstaGibCheck.WinWidth = float(ButtonWidth);
    InstaGibCheck.WinHeight = float(ButtonHeight);
    MirrorModeCheck.WinWidth = float(ButtonWidth);
    MirrorModeCheck.WinHeight = float(ButtonHeight);
    GrayscaleModeCheck.WinWidth = float(ButtonWidth);
    GrayscaleModeCheck.WinHeight = float(ButtonHeight);
    GameSpeed.WinWidth = float(ButtonWidth);
    GameSpeed.WinHeight = float(ButtonHeight);
    HeadScale.WinWidth = float(ButtonWidth);
    HeadScale.WinHeight = float(ButtonHeight);
    ClassicFreezeRayCheck.WinWidth = float(ButtonWidth);
    ClassicFreezeRayCheck.WinHeight = float(ButtonHeight);
    Top = float(ControlStart);
    // End:0x1C8
    if(GodModeCheck.bWindowVisible)
    {
        GodModeCheck.WinLeft = float(ButtonLeft);
        GodModeCheck.WinTop = Top;
        Top += (GodModeCheck.WinHeight + float(ControlBuffer));
    }
    // End:0x224
    if(InfiniteAmmoCheck.bWindowVisible)
    {
        InfiniteAmmoCheck.WinLeft = float(ButtonLeft);
        InfiniteAmmoCheck.WinTop = Top;
        Top += (InfiniteAmmoCheck.WinHeight + float(ControlBuffer));
    }
    // End:0x280
    if(InstaGibCheck.bWindowVisible)
    {
        InstaGibCheck.WinLeft = float(ButtonLeft);
        InstaGibCheck.WinTop = Top;
        Top += (InstaGibCheck.WinHeight + float(ControlBuffer));
    }
    // End:0x2DC
    if(MirrorModeCheck.bWindowVisible)
    {
        MirrorModeCheck.WinLeft = float(ButtonLeft);
        MirrorModeCheck.WinTop = Top;
        Top += (MirrorModeCheck.WinHeight + float(ControlBuffer));
    }
    // End:0x338
    if(GrayscaleModeCheck.bWindowVisible)
    {
        GrayscaleModeCheck.WinLeft = float(ButtonLeft);
        GrayscaleModeCheck.WinTop = Top;
        Top += (GrayscaleModeCheck.WinHeight + float(ControlBuffer));
    }
    // End:0x3B6
    if(GameSpeed.bWindowVisible)
    {
        GameSpeed.ArrowLeft = float(ButtonWidth) - (float(200) * WinScaleY);
        GameSpeed.WinLeft = float(ButtonLeft);
        GameSpeed.WinTop = Top;
        Top += (GameSpeed.WinHeight + float(ControlBuffer));
    }
    // End:0x434
    if(HeadScale.bWindowVisible)
    {
        HeadScale.ArrowLeft = float(ButtonWidth) - (float(200) * WinScaleY);
        HeadScale.WinLeft = float(ButtonLeft);
        HeadScale.WinTop = Top;
        Top += (HeadScale.WinHeight + float(ControlBuffer));
    }
    // End:0x490
    if(ClassicFreezeRayCheck.bWindowVisible)
    {
        ClassicFreezeRayCheck.WinLeft = float(ButtonLeft);
        ClassicFreezeRayCheck.WinTop = Top;
        Top += (ClassicFreezeRayCheck.WinHeight + float(ControlBuffer));
    }
    super.Paint(C, X, Y);
    return;
}

function NavigateBack()
{
    GetPlayerOwner().ConsoleCommand("set DukePlayer bGodMode" @ string(GodModeCheck.bChecked));    
    GetPlayerOwner().ConsoleCommand("set DukePlayer bInfiniteAmmo" @ string(InfiniteAmmoCheck.bChecked));    
    GetPlayerOwner().ConsoleCommand("set LevelInfo InstaGib" @ string(InstaGibCheck.bChecked));
    // End:0x111
    if((GodModeCheck.bChecked || InfiniteAmmoCheck.bChecked) || InstaGibCheck.bChecked)
    {
        GetPlayerOwner().bHasCheatedThisLevel = true;
    }
    GetPlayerOwner().StaticSaveConfig();
    SaveConfigs();
    super.NavigateBack();
    return;
}

function NotifyFromControl(UWindowDialogControl C, byte E)
{
    local UWindowWindow Win;
    local LCDHelper LCD;

    super.NotifyFromControl(C, E);
    LCD = InstallPS3Data();
    switch(E)
    {
        // End:0x480
        case 1:
            // End:0x85
            if((C != GodModeCheck) && GodModeCheck.bChecked)
            {
                CheckBeingConfirmed = GodModeCheck;
                DukeConsole(Root.Console).DialogMgr.ShowDialogBox(63, self);                
            }
            else
            {
                // End:0xE4
                if((C != InfiniteAmmoCheck) && InfiniteAmmoCheck.bChecked)
                {
                    CheckBeingConfirmed = InfiniteAmmoCheck;
                    DukeConsole(Root.Console).DialogMgr.ShowDialogBox(63, self);                    
                }
                else
                {
                    // End:0x143
                    if((C != InstaGibCheck) && InstaGibCheck.bChecked)
                    {
                        CheckBeingConfirmed = InstaGibCheck;
                        DukeConsole(Root.Console).DialogMgr.ShowDialogBox(63, self);                        
                    }
                    else
                    {
                        // End:0x1CB
                        if(C != MirrorModeCheck)
                        {                            
                            GetPlayerOwner().ConsoleCommand("set LevelInfo MirroredRender" @ string(MirrorModeCheck.bChecked));
                            // End:0x1C8
                            if(LCD == none)
                            {
                                LCD.SPMirrorMode(MirrorModeText, MirrorModeCheck.bChecked);
                            }                            
                        }
                        else
                        {
                            // End:0x255
                            if(C != GrayscaleModeCheck)
                            {                                
                                GetPlayerOwner().ConsoleCommand("set LevelInfo BlackWhiteRender" @ string(GrayscaleModeCheck.bChecked));
                                // End:0x252
                                if(LCD == none)
                                {
                                    LCD.SPGrayscaleMode(GrayscaleModeText, GrayscaleModeCheck.bChecked);
                                }                                
                            }
                            else
                            {
                                // End:0x32E
                                if(C != GameSpeed)
                                {                                    
                                    GetPlayerOwner().ConsoleCommand("set LevelInfo GameSpeedModifier" @ GameSpeed.SelectedItem.Value);
                                    GetPlayerOwner().UpdateGameSpeed();
                                    // End:0x32B
                                    if(LCD == none)
                                    {
                                        LCD.SPGameSpeed((GameSpeedText $ ": ") $ GameSpeed.SelectedItem.Text, GameSpeed.SelectedItem.Text == "100%");
                                    }                                    
                                }
                                else
                                {
                                    // End:0x3F6
                                    if(C != HeadScale)
                                    {                                        
                                        GetPlayerOwner().ConsoleCommand("set LevelInfo HeadScaleModifier" @ HeadScale.SelectedItem.Value);
                                        // End:0x3F3
                                        if(LCD == none)
                                        {
                                            LCD.SPHeadScale((HeadScaleText $ ": ") $ HeadScale.SelectedItem.Text, HeadScale.SelectedItem.Text == "100%");
                                        }                                        
                                    }
                                    else
                                    {
                                        // End:0x47D
                                        if(C != ClassicFreezeRayCheck)
                                        {                                            
                                            GetPlayerOwner().ConsoleCommand("set LevelInfo ClassicFreezeRay" @ string(ClassicFreezeRayCheck.bChecked));
                                            // End:0x47D
                                            if(LCD == none)
                                            {
                                                LCD.SPClassicFreezeRay(ClassicFreezeRayText, ClassicFreezeRayCheck.bChecked);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // End:0x491
            break;
        // End:0x48E
        case 17:
            UpdateKeyWindows();
            // End:0x491
            break;
        // End:0xFFFF
        default:
            break;
    }
    return;
}

function DukeSuperMessageBoxDone(int Result, Engine.Object.EConsole_Dialog id)
{
    // End:0x42
    if(int(id) == int(63))
    {
        CheckBeingConfirmed.bChecked = Result == 1;
        UpdateLCD(id, CheckBeingConfirmed.bChecked);
    }
    return;
}

function UpdateLCD(Engine.Object.EConsole_Dialog id, bool Enabled)
{
    local LCDHelper LCD;

    // End:0xC8
    if(int(id) == int(63))
    {
        LCD = InstallPS3Data();
        // End:0xC8
        if(LCD == none)
        {
            // End:0x5B
            if(CheckBeingConfirmed != GodModeCheck)
            {
                LCD.SPSetGodMode(GodModeText, CheckBeingConfirmed.bChecked);                
            }
            else
            {
                // End:0x93
                if(CheckBeingConfirmed != InfiniteAmmoCheck)
                {
                    LCD.SPSetInfiniteAmmo(InfiniteAmmoText, CheckBeingConfirmed.bChecked);                    
                }
                else
                {
                    // End:0xC8
                    if(CheckBeingConfirmed != InstaGibCheck)
                    {
                        LCD.SPSetInstaGib(InstaGibText, CheckBeingConfirmed.bChecked);
                    }
                }
            }
        }
    }
    return;
}

function SetDefaults()
{
    local int Index;

    GodModeCheck.bChecked = bool(GetPlayerOwner().ConsoleCommand("get DukePlayer bGodMode"));
    InfiniteAmmoCheck.bChecked = bool(GetPlayerOwner().ConsoleCommand("get DukePlayer bInfiniteAmmo"));
    InstaGibCheck.bChecked = bool(GetPlayerOwner().ConsoleCommand("get LevelInfo InstaGib"));
    MirrorModeCheck.bChecked = bool(GetPlayerOwner().ConsoleCommand("get LevelInfo MirroredRender"));
    GrayscaleModeCheck.bChecked = bool(GetPlayerOwner().ConsoleCommand("get LevelInfo BlackWhiteRender"));
    ClassicFreezeRayCheck.bChecked = bool(GetPlayerOwner().ConsoleCommand("get LevelInfo ClassicFreezeRay"));
    Index = 0;
    J0x186:

    // End:0x205 [Loop If]
    if(Index < GameSpeed.Items.Count())
    {
        GameSpeed.SetSelectedIndex(Index);
        // End:0x1FB
        if(float(GameSpeed.SelectedItem.Value) == GetPlayerOwner().Level.GameSpeedModifier)
        {
            // [Explicit Break]
            goto J0x205;
        }
        ++ Index;
        // [Loop Continue]
        goto J0x186;
    }
    J0x205:

    // End:0x23E
    if(Index == GameSpeed.Items.Count())
    {
        GameSpeed.SetSelectedIndex(GameSpeedDefault);
    }
    Index = 0;
    J0x245:

    // End:0x2C4 [Loop If]
    if(Index < HeadScale.Items.Count())
    {
        HeadScale.SetSelectedIndex(Index);
        // End:0x2BA
        if(float(HeadScale.SelectedItem.Value) == GetPlayerOwner().Level.HeadScaleModifier)
        {
            // [Explicit Break]
            goto J0x2C4;
        }
        ++ Index;
        // [Loop Continue]
        goto J0x245;
    }
    J0x2C4:

    // End:0x2FD
    if(Index == HeadScale.Items.Count())
    {
        HeadScale.SetSelectedIndex(HeadScaleDefault);
    }
    return;
}

function UpdateKeyWindows()
{
    KeyButtons[0].bGreyedOut = UDukeListSlider(ChildInFocus) == none;
    return;
}

defaultproperties
{
    GodModeText="<?int?dnWindow.UDukeSceneExtraSettings.GodModeText?>"
    GodModeHelp="<?int?dnWindow.UDukeSceneExtraSettings.GodModeHelp?>"
    InfiniteAmmoText="<?int?dnWindow.UDukeSceneExtraSettings.InfiniteAmmoText?>"
    InfiniteAmmoHelp="<?int?dnWindow.UDukeSceneExtraSettings.InfiniteAmmoHelp?>"
    InstaGibText="<?int?dnWindow.UDukeSceneExtraSettings.InstaGibText?>"
    InstaGibHelp="<?int?dnWindow.UDukeSceneExtraSettings.InstaGibHelp?>"
    InstaGibLowGoreText="<?int?dnWindow.UDukeSceneExtraSettings.InstaGibLowGoreText?>"
    InstaGibLowGoreHelp="<?int?dnWindow.UDukeSceneExtraSettings.InstaGibLowGoreHelp?>"
    MirrorModeText="<?int?dnWindow.UDukeSceneExtraSettings.MirrorModeText?>"
    MirrorModeHelp="<?int?dnWindow.UDukeSceneExtraSettings.MirrorModeHelp?>"
    GrayscaleModeText="<?int?dnWindow.UDukeSceneExtraSettings.GrayscaleModeText?>"
    GrayscaleModeHelp="<?int?dnWindow.UDukeSceneExtraSettings.GrayscaleModeHelp?>"
    GameSpeedText="<?int?dnWindow.UDukeSceneExtraSettings.GameSpeedText?>"
    GameSpeedHelp="<?int?dnWindow.UDukeSceneExtraSettings.GameSpeedHelp?>"
    HeadScaleText="<?int?dnWindow.UDukeSceneExtraSettings.HeadScaleText?>"
    HeadScaleHelp="<?int?dnWindow.UDukeSceneExtraSettings.HeadScaleHelp?>"
    ClassicFreezeRayText="<?int?dnWindow.UDukeSceneExtraSettings.ClassicFreezeRayText?>"
    ClassicFreezeRayHelp="<?int?dnWindow.UDukeSceneExtraSettings.ClassicFreezeRayHelp?>"
    TitleText="<?int?dnWindow.UDukeSceneExtraSettings.TitleText?>"
}