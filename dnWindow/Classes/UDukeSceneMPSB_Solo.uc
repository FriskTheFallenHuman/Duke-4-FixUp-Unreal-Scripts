/*******************************************************************************
 * UDukeSceneMPSB_Solo generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeSceneMPSB_Solo extends UDukeSceneMultiPlayerScoreboardBase
    config;

var UDukeScoreboardEntry Entries[8];
var array<int> TiedPRIIndex;
var int SelectedIndex;

function Created()
{
    local int maxPlayersInGame, i;

    super.Created();
    i = 0;
    J0x0D:

    // End:0xEE [Loop If]
    if(i < 8)
    {
        Entries[i] = UDukeScoreboardEntry(CreateWindow(class'UDukeScoreboardEntry', 1, 1, 1, 1));
        Entries[i].SetPRIIndex(-1);
        Entries[i].Register(self);
        Entries[i].HideWindow();
        // End:0xE4
        if(i > 0)
        {
            Entries[i - 1].NavDown = Entries[i];
            Entries[i].NavUp = Entries[i - 1];
        }
        ++ i;
        // [Loop Continue]
        goto J0x0D;
    }
    Entries[0].NavUp = Entries[8 - 1];
    Entries[8 - 1].NavDown = Entries[0];
    ChildInFocus = Entries[0];
    return;
}

function int SortScores()
{
    local int i, j, Max, TempInt;
    local array<PlayerReplicationInfo> PRIArray;
    local PlayerPawn P;
    local int Count;

    P = GetPlayerOwner();
    // End:0x32
    if((P != none) || P.GameReplicationInfo != none)
    {
        return 0;
    }
    PRIArray = P.GameReplicationInfo.PRIArray;
    Count = 0;
    i = 0;
    J0x5F:

    // End:0xAC [Loop If]
    if(i < string(PRIArray))
    {
        // End:0xA2
        if(! PRIArray[i].bIsABot)
        {
            OrderedPRIIndex[Count] = i;
            ++ Count;
        }
        ++ i;
        // [Loop Continue]
        goto J0x5F;
    }
    i = 0;
    J0xB3:

    // End:0x1E4 [Loop If]
    if(i < (Count - 1))
    {
        j = i + 1;
        J0xD3:

        // End:0x1DA [Loop If]
        if(j < Count)
        {
            // End:0x1D0
            if((PRIArray[OrderedPRIIndex[j]].Score > PRIArray[OrderedPRIIndex[i]].Score) || (PRIArray[OrderedPRIIndex[j]].Score == PRIArray[OrderedPRIIndex[i]].Score) && PRIArray[OrderedPRIIndex[j]].Deaths < PRIArray[OrderedPRIIndex[i]].Deaths)
            {
                TempInt = OrderedPRIIndex[j];
                OrderedPRIIndex[j] = OrderedPRIIndex[i];
                OrderedPRIIndex[i] = TempInt;
            }
            ++ j;
            // [Loop Continue]
            goto J0xD3;
        }
        ++ i;
        // [Loop Continue]
        goto J0xB3;
    }
    return Count;
    return;
}

function UpdatePlayerList()
{
    local int i, Counter, PlayerCount;
    local PlayerPawn P;

    P = GetPlayerOwner();
    // End:0x32
    if((P != none) || P.GameReplicationInfo != none)
    {
        return;
    }
    i = 0;
    J0x39:

    // End:0x60 [Loop If]
    if(i < 8)
    {
        OrderedPRIIndex[i] = i;
        ++ i;
        // [Loop Continue]
        goto J0x39;
    }
    i = 0;
    J0x67:

    // End:0x98 [Loop If]
    if(i < 8)
    {
        Entries[i].SetPRIIndex(-1);
        ++ i;
        // [Loop Continue]
        goto J0x67;
    }
    PlayerCount = SortScores();
    Counter = 0;
    i = 0;
    J0xB2:

    // End:0x129 [Loop If]
    if(i < PlayerCount)
    {
        // End:0xF7
        if(P.GameReplicationInfo.PRIArray[OrderedPRIIndex[i]].bIsABot)
        {
            // [Explicit Continue]
            goto J0x11F;
        }
        Entries[Counter].SetPRIIndex(OrderedPRIIndex[i]);
        ++ Counter;
        J0x11F:

        ++ i;
        // [Loop Continue]
        goto J0xB2;
    }
    return;
}

function BeforePaint(Canvas C, float X, float Y)
{
    super.BeforePaint(C, X, Y);
    UpdatePlayerList();
    return;
}

function Paint(Canvas C, float X, float Y)
{
    local int i;
    local float XL, YL, NewX, FontScale, LvOffset, StandardOffset;

    super.Paint(C, X, Y);
    WinHalf = WinWidth / float(2);
    WinQuarter = WinHalf / float(4);
    WinEighth = WinHalf / float(8);
    StandardOffset = WinEighth * 1.5;
    C.Font = C.TallFont;
    C.DrawColor.R = 255;
    C.DrawColor.G = 255;
    C.DrawColor.B = 255;
    HeaderY = TopOffsetValue;
    FontScale = class'UWindowScene'.default.TTFontScale;
    C.DrawColor.R = 200;
    C.DrawColor.G = 200;
    C.DrawColor.B = 200;
    LvOffset = class'UDukeScoreboardEntry'.default.NameOffset * 1;
    LvOffset += ((PanelHeight / 2) + float(10));
    HeaderY += (DrawLabels(C, HeaderY));
    HeaderY += HeaderEntryOffset;
    TextSize(C, "WWW", XL, YL, FontScale, FontScale);
    Entries[0].WinTop = HeaderY;
    Entries[0].WinLeft = 0;
    Entries[0].WinHeight = YL;
    Entries[0].WinWidth = WinWidth;
    Entries[0].ShowWindow();
    HeaderY += YL;
    i = 1;
    J0x21C:

    // End:0x2F0 [Loop If]
    if(i < NumOfPlayersInGame)
    {
        Entries[i].WinLeft = 0;
        Entries[i].WinTop = Entries[i - 1].WinTop + Entries[i - 1].WinHeight;
        Entries[i].WinHeight = YL;
        Entries[i].WinWidth = WinWidth;
        Entries[i].ShowWindow();
        HeaderY += YL;
        ++ i;
        // [Loop Continue]
        goto J0x21C;
    }
    HeaderY += (YL * float(8 - NumOfPlayersInGame));
    DrawVerticalGridlines(C, Entries[0].WinTop, Entries[0].WinHeight * float(8));
    return;
}

function bool IsGameTied()
{
    local int i, CheckScore, CheckDeaths;
    local array<PlayerReplicationInfo> PRIArray;
    local PlayerPawn P;

    P = GetPlayerOwner();
    // End:0x32
    if((P != none) || P.GameReplicationInfo != none)
    {
        return false;
    }
    PRIArray = P.GameReplicationInfo.PRIArray;
    TiedPRIIndex.Remove(0, string(TiedPRIIndex));
    // End:0x1D8
    if(((OrderedPRIIndex[0] < string(PRIArray)) && OrderedPRIIndex[1] < string(PRIArray)) && PRIArray[OrderedPRIIndex[0]].Score == PRIArray[OrderedPRIIndex[1]].Score)
    {
        // End:0x1D6
        if(PRIArray[OrderedPRIIndex[0]].Deaths == PRIArray[OrderedPRIIndex[1]].Deaths)
        {
            TiedPRIIndex[string(TiedPRIIndex)] = 0;
            TiedPRIIndex[string(TiedPRIIndex)] = 1;
            CheckScore = PRIArray[OrderedPRIIndex[0]].Score;
            CheckDeaths = PRIArray[OrderedPRIIndex[0]].Deaths;
            i = 2;
            J0x14A:

            // End:0x1D6 [Loop If]
            if(i < 8)
            {
                // End:0x1CC
                if((OrderedPRIIndex[i] < string(PRIArray)) && (PRIArray[OrderedPRIIndex[i]].Score == CheckScore) && PRIArray[OrderedPRIIndex[i]].Deaths == CheckDeaths)
                {
                    TiedPRIIndex[string(TiedPRIIndex)] = i;
                }
                ++ i;
                // [Loop Continue]
                goto J0x14A;
            }
        }
        return true;
    }
    return false;
    return;
}

function float DetermineSize(Canvas C)
{
    local int i;
    local float XL, YL, first;

    C.Font = C.TallFont;
    TextSize(C, "WWW", XL, YL, class'UWindowScene'.default.TTFontScale, class'UWindowScene'.default.TTFontScale);
    HeaderY = TopOffsetValue;
    HeaderY += (DrawLabels(C, HeaderY, true));
    HeaderY += HeaderEntryOffset;
    HeaderY += YL;
    i = 1;
    J0x99:

    // End:0xBB [Loop If]
    if(i < 8)
    {
        HeaderY += YL;
        ++ i;
        // [Loop Continue]
        goto J0x99;
    }
    return HeaderY;
    return;
}

function float DrawLabels(Canvas C, float YStart, optional bool bNoDraw)
{
    local float XL, YL, NewX;
    local string tmpStr;
    local float FontScale, LvOffset, StandardOffset;

    C.DrawColor = class'UWindowScene'.default.GreyColor;
    FontScale = class'UWindowScene'.default.TTFontScale;
    LvOffset = class'UDukeScoreboardEntry'.default.NameOffset * 1;
    LvOffset += ((PanelHeight / 2) + float(10));
    StandardOffset = WinEighth * 1.5;
    TextSize(C, LevelLabel, XL, YL, FontScale, FontScale);
    // End:0xD4
    if(! bNoDraw)
    {
        ClipText(C, LvOffset, YStart, LevelLabel,, FontScale, FontScale,, 2);
    }
    NameStringOffsetX = LvOffset + StandardOffset;
    TextSize(C, PlayerName, XL, YL, FontScale, FontScale);
    // End:0x140
    if(! bNoDraw)
    {
        ClipText(C, NameStringOffsetX, YStart, PlayerName,, FontScale, FontScale,, 2);
    }
    NewX = (WinHalf + WinEighth) - StandardOffset;
    TextSize(C, Score, XL, YL, FontScale, FontScale);
    // End:0x1B3
    if(! bNoDraw)
    {
        ClipText(C, NewX, YStart, Score,, FontScale, FontScale,, 2);
    }
    NewX += StandardOffset;
    TextSize(C, KillStr, XL, YL, FontScale, FontScale);
    // End:0x219
    if(! bNoDraw)
    {
        ClipText(C, NewX, YStart, KillStr,, FontScale, FontScale,, 2);
    }
    NewX += StandardOffset;
    TextSize(C, DeathStr, XL, YL, FontScale, FontScale);
    // End:0x27F
    if(! bNoDraw)
    {
        ClipText(C, NewX, YStart, DeathStr,, FontScale, FontScale,, 2);
    }
    NewX += StandardOffset;
    TextSize(C, Ping, XL, YL, FontScale, FontScale);
    // End:0x2E5
    if(! bNoDraw)
    {
        ClipText(C, NewX, YStart, Ping,, FontScale, FontScale,, 2);
    }
    NewX += StandardOffset;
    TextSize(C, VoiceStr, XL, YL, FontScale, FontScale);
    // End:0x34B
    if(! bNoDraw)
    {
        ClipText(C, NewX, YStart, VoiceStr,, FontScale, FontScale,, 2);
    }
    return YL;
    return;
}

defaultproperties
{
    NameStringOffsetX=15
    PanelHeight=35
    VGridLine='Menu.MP.Divider_Vert'
}