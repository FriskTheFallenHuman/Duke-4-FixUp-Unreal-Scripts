/*******************************************************************************
 * UDukeSceneTemplate generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeSceneTemplate extends UWindowScene;

struct SSceneTemplateEntry
{
    var string Text;
    var string Help;
    var string Command;
    var UDukeMenuButton Button;
};

var UDukeScrollingWindow ScrollWindow;
var UDukeMenuButton LastFocus;
var array<SSceneTemplateEntry> Entries;

function string ExtractKeyPair(string str, string Key)
{
    local int i;
    local string SubStr;

    Key = Key $ "=\"";
    i = InStr(str, Key);
    // End:0x80
    if(i != -1)
    {
        SubStr = Mid(str, i + Len(Key));
        i = InStr(SubStr, "\"");
        // End:0x80
        if(i != -1)
        {
            return Mid(SubStr, 0, i);
        }
    }
    return "";
    return;
}

function Created()
{
    local int i, j;
    local string ClassStr, str, Text, Help, Command;

    super.Created();
    ClassStr = string(Class.Name);
    string(Entries) = 0;
    i = 0;
    J0x2B:

    // End:0x137 [Loop If]
    if(i < 128)
    {
        str = ClassIsChildOf(ClassStr, ("Entries[" $ string(i)) $ "]", "dnWindow");
        Text = ExtractKeyPair(str, "Text");
        Help = ExtractKeyPair(str, "Help");
        Command = ExtractKeyPair(str, "Command");
        // End:0x12D
        if(((Len(Text) > 0) || Len(Help) > 0) || Len(Command) > 0)
        {
            j = Entries.Add(1);
            Entries[j].Text = Text;
            Entries[j].Help = Help;
            Entries[j].Command = Command;
        }
        ++ i;
        // [Loop Continue]
        goto J0x2B;
    }
    ScrollWindow = UDukeScrollingWindow(CreateWindow(class'UDukeScrollingWindow',,,,, self));
    i = 0;
    J0x159:

    // End:0x26C [Loop If]
    if(i < string(Entries))
    {
        // End:0x1A3
        if(Len(Entries[i].Help) == 0)
        {
            Entries[i].Help = Entries[i].Text;
        }
        Entries[i].Button = UDukeMenuButton(ScrollWindow.CreateSubWindow(class'UDukeMenuButton',,,,, self));
        Entries[i].Button.bOwnSelectionIcon = false;
        Entries[i].Button.SetText(Entries[i].Text);
        Entries[i].Button.SetHelpText(Entries[i].Help);
        Entries[i].Button.Register(self);
        ++ i;
        // [Loop Continue]
        goto J0x159;
    }
    SetupNavigation();
    return;
}

function SetupNavigation()
{
    local int i;

    Entries[string(Entries) - 1].Button.NavDown = Entries[0].Button;
    i = 0;
    J0x32:

    // End:0x7D [Loop If]
    if(i < (string(Entries) - 1))
    {
        Entries[i].Button.NavDown = Entries[i + 1].Button;
        ++ i;
        // [Loop Continue]
        goto J0x32;
    }
    Entries[0].Button.NavUp = Entries[string(Entries) - 1].Button;
    i = 1;
    J0xAF:

    // End:0xF7 [Loop If]
    if(i < string(Entries))
    {
        Entries[i].Button.NavUp = Entries[i - 1].Button;
        ++ i;
        // [Loop Continue]
        goto J0xAF;
    }
    // End:0x141
    if((string(Entries) > 0) && ScrollWindow.ClientArea == none)
    {
        ScrollWindow.ClientArea.ChildInFocus = Entries[0].Button;
    }
    return;
}

function Paint(Canvas C, float X, float Y)
{
    local int i;
    local float NextWinTop, DesiredTop, TotalHeight;
    local bool bNeedAlign;
    local UDukeMenuButton SelectedButton;
    local float OrgX, OrgY, ClipX, ClipY;

    TotalHeight = float(string(Entries) - 1) * float(ControlBuffer);
    i = 0;
    J0x1F:

    // End:0x1D8 [Loop If]
    if(i < string(Entries))
    {
        // End:0x52
        if(! Entries[i].Button.bWindowVisible)
        {
            // [Explicit Continue]
            goto J0x1CE;
        }
        Entries[i].Button.WinLeft = 0;
        Entries[i].Button.WinTop = NextWinTop;
        Entries[i].Button.WinWidth = float(ButtonWidth);
        Entries[i].Button.WinHeight = float(ButtonHeight);
        NextWinTop = (Entries[i].Button.WinTop + Entries[i].Button.WinHeight) + float(ControlBuffer);
        // End:0x1C1
        if(Entries[i].Button.ParentWindow.ChildInFocus != Entries[i].Button)
        {
            DesiredTop = Entries[i].Button.WinTop;
            // End:0x1AB
            if(LastFocus == Entries[i].Button)
            {
                bNeedAlign = true;
                LastFocus = Entries[i].Button;
            }
            SelectedButton = Entries[i].Button;
        }
        TotalHeight += float(ButtonHeight);
        J0x1CE:

        ++ i;
        // [Loop Continue]
        goto J0x1F;
    }
    ScrollWindow.WinWidth = float(ButtonWidth);
    ScrollWindow.WinLeft = float(ButtonLeft);
    ScrollWindow.WinTop = float(ControlStart);
    ScrollWindow.WinHeight = 300 * WinScaleY;
    ScrollWindow.DesiredClientHeight = TotalHeight;
    // End:0x2C6
    if(TotalHeight > ScrollWindow.WinHeight)
    {
        ScrollWindow.VertSB.ShowWindow();
        // End:0x2C3
        if(bNeedAlign)
        {
            ScrollWindow.ScrollTo(0, DesiredTop);
            ScrollWindow.ScrollTo(0, DesiredTop + float(ButtonHeight));
        }        
    }
    else
    {
        ScrollWindow.VertSB.HideWindow();
        ScrollWindow.ScrollTo(0, 0);
    }
    ChildInFocus = LastFocus;
    super.Paint(C, X, Y);
    // End:0x47F
    if(SelectedButton == none)
    {
        OrgX = C.OrgX;
        OrgY = C.OrgY;
        ClipX = C.ClipX;
        ClipY = C.ClipY;
        C.GetFrameCount(ScrollWindow.WinLeft, ScrollWindow.WinTop);
        C.RegisterActorClass(ScrollWindow.WinWidth, ScrollWindow.WinHeight);
        class'UWindowScene'.static.DrawSelectionIcon(C, -8 * C.FixedScale, (SelectedButton.WinTop + (0.5 * SelectedButton.WinHeight)) - ScrollWindow.VertSB.pos, C.FixedScale, 1);
        C.GetFrameCount(OrgX, OrgY);
        C.RegisterActorClass(ClipX, ClipY);
    }
    return;
}

function NotifyFromControl(UWindowDialogControl C, byte E)
{
    local int i;

    super.NotifyFromControl(C, E);
    // End:0x84
    if(int(E) == 2)
    {
        i = string(Entries) - 1;
        J0x2C:

        // End:0x84 [Loop If]
        if(i >= 0)
        {
            // End:0x7A
            if(C != Entries[i].Button)
            {
                ButtonClicked(Entries[i].Button, Entries[i].Command);
                return;
            }
            -- i;
            // [Loop Continue]
            goto J0x2C;
        }
    }
    return;
}

function WindowEvent(UWindow.UWindowWindow.WinMessage msg, Canvas C, float X, float Y, int Key)
{
    // End:0x61
    if(int(msg) == int(7))
    {
        // End:0x61
        if((ModalWindow != none) && (Key == int(236)) || Key == int(237))
        {
            ScrollWindow.WindowEvent(msg, C, X, Y, Key);
        }
    }
    super.WindowEvent(msg, C, X, Y, Key);
    return;
}

function ButtonClicked(UDukeMenuButton Button, string Command)
{
    return;
}

defaultproperties
{
    TitleText="<?int?dnWindow.UDukeSceneTemplate.TitleText?>"
}