/*******************************************************************************
 * UDukeDigsDisplayWindow generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeDigsDisplayWindow extends UWindowWindow
    config;

var int ChallengeIdx;
var string Title;
var string Description;
var string HelpText;
var string CurrLvlPrefix;
var localized string PressToClose;
var Texture image;
var Texture HorizBar;
var string LockedImages[4];
var config float ImageSize;
var config float BarWidthPct;
var config float TitleYPct;
var config float UpperHorizYPct;
var config float ImageYPct;
var config float LowerHorizYPct;
var config float DescYPct;
var config float DescXPadding;
var config float TitleScale;
var config float DescScale;
var config float LineXEdgeOffset;
var bool IsLocked;
var int LockImageIdx;
var Region FillRegion;
var Texture FillTexture;
var Texture BorderTexture;
var Texture CapTexture;
var Region LineRegion;
var Texture BackdropTexture;
var bool bUseBabeRendering;
var bool bDrawLevelTxt;

function OnNavForward()
{
    local DukeMultiPlayer dmp;
    local PlayerProgression PlayerStats;

    dmp = DukeMultiPlayer(GetPlayerOwner());
    PlayerStats = dmp.PlayerProgress;
    CurrLvlPrefix = ClassIsChildOf("UDukeDigsDisplayWindow", "CurrLvlPrefix", "dnwindow") @ string(PlayerStats.GetLevel());
    return;
}

function Paint(Canvas C, float X, float Y)
{
    local float TitleXL, TitleYL, TTFontScale, ClampedImageSize;
    local string DescHelpText;
    local float Lines, XL, YL, ImageYPos, FontScale, FontScaleX,
	    DescAndHelpTextHeight, UpperBarY, LowerBarY, BarHeight, TargetHelpWidth;

    DrawBackground(C);
    TTFontScale = class'UWindowScene'.default.TTFontScale;
    C.Font = C.TallFont;
    C.DrawColor = class'UWindowScene'.default.OrangeColor;
    TextSize(C, Title, TitleXL, TitleYL, TTFontScale * TitleScale, TTFontScale * TitleScale);
    ClipText(C, (WinWidth - TitleXL) / 2, WinHeight * TitleYPct, Title,, TTFontScale * TitleScale, TTFontScale * TitleScale, 1, 2);
    C.DrawColor = class'UWindowScene'.default.GreyColor;
    FontScale = TTFontScale * DescScale;
    C.RegisterSound(FontScale);
    TextSize(C, Description, XL, YL, FontScale, FontScale);
    Lines = float(WrapClipText(C, DescXPadding, 0, Description,, int(WinWidth - (DescXPadding * float(2))), true, false, FontScale, FontScale, 1, 2));
    // End:0x1A6
    if(bDrawLevelTxt)
    {
        Lines += float(2);
    }
    DescAndHelpTextHeight = (Lines * YL) + (WinHeight * TitleYPct);
    Lines = float(WrapClipText(C, DescXPadding, WinHeight - DescAndHelpTextHeight, Description,, int(WinWidth - (DescXPadding * float(2))),, false, FontScale, FontScale, 1, 2));
    // End:0x3DC
    if(bDrawLevelTxt)
    {
        C.DrawColor = class'UWindowScene'.default.OrangeColor;
        TextSize(C, CurrLvlPrefix, XL, YL, FontScale, FontScale);
        TargetHelpWidth = (WinWidth - (DescXPadding * 2.5)) * 0.5;
        FontScaleX = FontScale;
        // End:0x2B0
        if(XL > TargetHelpWidth)
        {
            FontScaleX *= (TargetHelpWidth / XL);
        }
        WrapClipText(C, DescXPadding, (WinHeight - DescAndHelpTextHeight) + ((Lines + float(1)) * YL), CurrLvlPrefix,, int(WinWidth - (DescXPadding * float(2))),, false, FontScaleX, FontScale, 1, 2);
        TextSize(C, HelpText, XL, YL, FontScale, FontScale);
        FontScaleX = FontScale;
        // End:0x368
        if(XL > TargetHelpWidth)
        {
            FontScaleX *= (TargetHelpWidth / XL);
            XL = TargetHelpWidth;
        }
        WrapClipText(C, (WinWidth - DescXPadding) - XL, (WinHeight - DescAndHelpTextHeight) + ((Lines + float(1)) * YL), HelpText,, int(WinWidth - (DescXPadding * float(2))),, false, FontScaleX, FontScale, 1, 2);
        Lines += float(2);
    }
    BarHeight = float(LineRegion.h) * class'UWindowScene'.default.WinScaleY;
    UpperBarY = UpperHorizYPct * WinHeight;
    LowerBarY = (WinHeight - DescAndHelpTextHeight) - BarHeight;
    C.DrawColor = WhiteColor;
    DrawStretchedTextureSegment(C, LineXEdgeOffset * WinWidth, UpperBarY, WinWidth - ((LineXEdgeOffset * WinWidth) * float(2)), BarHeight, float(LineRegion.X), float(LineRegion.Y), float(LineRegion.W), float(LineRegion.h), BackdropTexture, 1);
    DrawStretchedTextureSegment(C, LineXEdgeOffset * WinWidth, LowerBarY, WinWidth - ((LineXEdgeOffset * WinWidth) * float(2)), BarHeight, float(LineRegion.X), float(LineRegion.Y), float(LineRegion.W), float(LineRegion.h), BackdropTexture, 1);
    ClampedImageSize = FMin(LowerBarY - (UpperBarY + BarHeight), ImageSize);
    // End:0x61F
    if(image == none)
    {
        ImageYPos = (UpperBarY + BarHeight) + ((LowerBarY - (UpperBarY + BarHeight)) * 0.5);
        ImageYPos -= (ClampedImageSize * 0.5);
        // End:0x5E5
        if(bUseBabeRendering)
        {
            DrawStretchedTextureSegment(C, (WinWidth - ClampedImageSize) / 2, ImageYPos, ClampedImageSize, ClampedImageSize, 0, 0, 256, 256, image, 1,,,,, true);            
        }
        else
        {
            DrawStretchedTexture(C, (WinWidth - ClampedImageSize) / 2, ImageYPos, ClampedImageSize, ClampedImageSize, image, 1,,, true);
        }
    }
    return;
}

function SetChallId(int id)
{
    local int Idx;

    Idx = class'ChallengeInfo'.static.GetGamepadButtonImageForShortKeyName(id);
    Title = ClassIsChildOf("ChallengeNames", class'ChallengeInfo'.default.ChallengesArray[Idx].Name, "dnWindow");
    Description = ClassIsChildOf("ChallengeNames", class'ChallengeInfo'.default.ChallengesArray[Idx].Description, "dnWindow");
    IsLocked = int(DukeMultiPlayer(GetPlayerOwner()).PlayerProgress.GetChallengeStatus(id)) == int(0);
    bDrawLevelTxt = IsLocked;
    // End:0x145
    if(IsLocked)
    {
        HelpText = ClassIsChildOf("UDukeSceneDigs", "unlockPrefix", "dnWindow") @ ClassIsChildOf("ChallengeNames", class'ChallengeInfo'.default.ChallengesArray[Idx].HelpText, "dnWindow");
    }
    LockImageIdx = class'ChallengeInfo'.default.ChallengesArray[Idx].LockedImageIdx;
    image = none;
    bUseBabeRendering = false;
    // End:0x19E
    if(IsLocked)
    {
        image = Texture(SaveConfigFile(LockedImages[LockImageIdx], class'Texture'));        
    }
    else
    {
        // End:0x223
        if(class'ChallengeInfo'.default.ChallengesArray[Idx].image != "")
        {
            image = Texture(SaveConfigFile(class'ChallengeInfo'.default.ChallengesArray[Idx].image, class'Texture'));
            // End:0x223
            if(InStr(string(class'ChallengeInfo'.default.ChallengesArray[Idx].SearchTag), "prestige") >= 0)
            {
                bUseBabeRendering = true;
            }
        }
    }
    return;
}

function DrawBorderCorner(Canvas C, float X, float Y, float Rotation)
{
    C.SetPause(X, Y);
    C.SetClampMode(CapTexture, float(CapTexture.DrawStatic()), float(CapTexture.DrawTile()), 0, 0, float(CapTexture.DrawStatic()), float(CapTexture.DrawTile()), Rotation);
    return;
}

function DrawBackground(Canvas C)
{
    local float BorderThickness, DoubleBorderThickness, borderwidth, BorderHeight;

    BorderThickness = 8;
    DoubleBorderThickness = BorderThickness * float(2);
    borderwidth = WinWidth - DoubleBorderThickness;
    BorderHeight = WinHeight - DoubleBorderThickness;
    C.DrawColor = GetPlayerOwner().NewColorBytes(255, 255, 255);
    DrawStretchedTextureSegment(C, BorderThickness, BorderThickness, WinWidth - (float(2) * BorderThickness), WinHeight - (float(2) * BorderThickness), float(FillRegion.X), float(FillRegion.Y), float(FillRegion.W), float(FillRegion.h), FillTexture, 1);
    C.SetPause(BorderThickness, 0);
    C.SetClampMode(BorderTexture, borderwidth, BorderThickness, 0, 0, borderwidth, BorderThickness);
    C.SetPause(BorderThickness, WinHeight - BorderThickness);
    C.SetClampMode(BorderTexture, borderwidth, BorderThickness, 0, 0, borderwidth, BorderThickness, 3.141593);
    C.SetPause(0.5 * (BorderThickness - BorderHeight), 0.5 * (WinHeight - BorderThickness));
    C.SetClampMode(BorderTexture, WinHeight - DoubleBorderThickness, BorderThickness, 0, 0, BorderHeight, BorderThickness, 3.141593 / float(2));
    C.SetPause(WinWidth - (0.5 * (BorderHeight + BorderThickness)), 0.5 * (WinHeight - BorderThickness));
    C.SetClampMode(BorderTexture, WinHeight - DoubleBorderThickness, BorderThickness, 0, 0, BorderHeight, BorderThickness, (3 * 3.141593) / float(2));
    DrawBorderCorner(C, 0, 0, 0);
    DrawBorderCorner(C, WinWidth - BorderThickness, 0, 3.141593 / float(2));
    DrawBorderCorner(C, WinWidth - BorderThickness, WinHeight - BorderThickness, 3.141593);
    DrawBorderCorner(C, 0, WinHeight - BorderThickness, (3 * 3.141593) / float(2));
    return;
}

defaultproperties
{
    CurrLvlPrefix="Current Level"
    PressToClose="<?int?dnWindow.UDukeDigsDisplayWindow.PressToClose?>"
    LockedImages[0]="dt_mydigs.Menu.Wrap_BoxLarge"
    LockedImages[1]="dt_mydigs.Menu.Wrap_BoxMedium"
    LockedImages[2]="dt_mydigs.Menu.Wrap_Picture"
    LockedImages[3]="dt_MyDigs.Menu.Statue_Pigrugwrap"
    ImageSize=256
    TitleYPct=0.025
    UpperHorizYPct=0.0925
    ImageYPct=0.125
    LowerHorizYPct=0.685
    DescYPct=0.725
    DescXPadding=25
    TitleScale=1.1
    DescScale=0.75
    LineXEdgeOffset=0.15
    FillRegion=(X=360,Y=88,W=2,h=2)
    FillTexture='Menu.Menu.Backdrop'
    BorderTexture='Menu.Menu.Border_Straight'
    CapTexture='Menu.Menu.Border_Cap'
    LineRegion=(X=17,Y=0,W=980,h=16)
    BackdropTexture='Menu.Menu.Backdrop'
    bDrawLevelTxt=true
}