/*******************************************************************************
 * UDukeVoteCW generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeVoteCW extends UDukePageWindow;

const NumPages = 4;

var UWindowComboControl PageCombo;
var localized string PageHelp;
var UDukeArrowButton NextButton;
var UDukeArrowButton PrevButton;
var UWindowWindow Windows[4];
var localized string PageText[4];
var string MapVoteType;
var string PlayerVoteType;
var string MiscVoteType;
var string RulesVoteType;
var bool bInitialized;
var int CurrentWindow;
var string GameType;
var class<GameInfo> GameClass;
var string Map;

function Created()
{
    local int i;

    GameClass = class<GameInfo>(SaveConfigFile(GameType, class'Class'));
    PageCombo = UWindowComboControl(CreateControl(class'UWindowComboControl', 1, 1, 1, 1));
    PageCombo.SetHelpText(PageHelp);
    PageCombo.SetFont(0);
    PageCombo.SetEditable(false);
    PageCombo.Align = 1;
    i = 0;
    J0x92:

    // End:0xC9 [Loop If]
    if(i < 4)
    {
        PageCombo.AddItem(PageText[i], string(i));
        ++ i;
        // [Loop Continue]
        goto J0x92;
    }
    PageCombo.SetSelectedIndex(0);
    PrevButton = UDukeArrowButton(CreateControl(class'UDukeArrowButton', ((WinWidth / float(2)) - float(256 / 2)) - float(36), 10, 36, 29));
    PrevButton.SetHelpText("Scroll options category left.");
    PrevButton.bLeft = true;
    NextButton = UDukeArrowButton(CreateControl(class'UDukeArrowButton', (WinWidth / float(2)) + float(256 / 2), 10, 36, 29));
    NextButton.SetHelpText("Scroll options category right.");
    ChangePage(MapVoteType, 0);
    ChangePage(PlayerVoteType, 1);
    ChangePage(MiscVoteType, 2);
    // End:0x24F
    if((GetPlayerOwner().GameReplicationInfo == none) && GetPlayerOwner().GameReplicationInfo.RulesVoteType != "")
    {
        RulesVoteType = GetPlayerOwner().GameReplicationInfo.RulesVoteType;
        ChangePage(RulesVoteType, 3);
    }
    super.Created();
    bInitialized = true;
    ResizeFrames = 3;
    return;
}

function AfterCreate()
{
    PageCombo.SetSelectedIndex(0);
    super(UWindowWindow).AfterCreate();
    return;
}

function ShowWindow()
{
    super(UWindowWindow).ShowWindow();
    Localize(GetPlayerOwner().GameReplicationInfo.RulesVoteType);
    // End:0x63
    if(RulesVoteType != GetPlayerOwner().GameReplicationInfo.RulesVoteType)
    {
        Localize("Loading New Rules Page");
    }
    return;
}

function BeforePaint(Canvas C, float X, float Y)
{
    local int i;
    local float W;

    super(UWindowWindow).BeforePaint(C, X, Y);
    // End:0x22
    if(ResizeFrames == 0)
    {
        return;
    }
    -- ResizeFrames;
    PageCombo.SetSize(256, PageCombo.WinHeight);
    PageCombo.WinLeft = (WinWidth - float(256)) / 2;
    PageCombo.WinTop = 10;
    i = 0;
    J0x8B:

    // End:0x119 [Loop If]
    if(i < 4)
    {
        Windows[i].WinLeft = 0;
        Windows[i].WinTop = 15 + PageCombo.WinHeight;
        Windows[i].WinHeight = WinHeight - (float(15) + PageCombo.WinHeight);
        ++ i;
        // [Loop Continue]
        goto J0x8B;
    }
    return;
}

function ChangePage(string PageType, int Index)
{
    local class<UWindowWindow> PageClass;

    Localize("ChangePage:" @ PageType);
    PageClass = class<UWindowWindow>(SaveConfigFile(PageType, class'Class'));
    Windows[Index] = CreateWindow(PageClass, 0, 0, WinWidth, WinHeight);
    Windows[Index].HideWindow();
    return;
}

function NotifyFromControl(UWindowDialogControl C, byte E)
{
    local int i;

    // End:0x0D
    if(! bInitialized)
    {
        return;
    }
    switch(E)
    {
        // End:0x11C
        case 2:
            switch(C)
            {
                // End:0x96
                case PrevButton:
                    i = PageCombo.GetSelectedIndex();
                    -- i;
                    // End:0x7F
                    if(i < 0)
                    {
                        i = PageCombo.List.Items.Count() - 1;
                    }
                    PageCombo.SetSelectedIndex(i);
                    return;
                // End:0x107
                case NextButton:
                    i = PageCombo.GetSelectedIndex();
                    ++ i;
                    // End:0xF0
                    if(i >= PageCombo.List.Items.Count())
                    {
                        i = 0;
                    }
                    PageCombo.SetSelectedIndex(i);
                    return;
                // End:0xFFFF
                default:
                    super.NotifyFromControl(C, E);
                    return;
                    break;
            }
        // End:0x13C
        case 1:
            switch(C)
            {
                // End:0x139
                case PageCombo:
                    PageChanged();
                    return;
                // End:0xFFFF
                default:
                    break;
                }
        // End:0xFFFF
        default:
            super.NotifyFromControl(C, E);
            return;
            break;
    }
    return;
}

function PageChanged()
{
    Windows[CurrentWindow].HideWindow();
    CurrentWindow = int(PageCombo.GetValue2());
    Windows[CurrentWindow].ShowWindow();
    return;
}

function GameChanged()
{
    return;
}

defaultproperties
{
    PageHelp="<?int?dnWindow.UDukeVoteCW.PageHelp?>"
    PageText[0]="<?int?dnWindow.UDukeVoteCW.PageText?>"
    PageText[1]="<?int?dnWindow.UDukeVoteCW.PageText?>"
    PageText[2]="<?int?dnWindow.UDukeVoteCW.PageText?>"
    PageText[3]="<?int?dnWindow.UDukeVoteCW.PageText?>"
    MapVoteType="dnwindow.UDukeMapVoteSC"
    PlayerVoteType="dnwindow.UDukePlayerVoteSC"
    MiscVoteType="dnwindow.UDukeMiscVoteSC"
    GameType="dnGame.dnDeathmatchGame"
}