/*******************************************************************************
 * UDukeScoreboardCW generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeScoreboardCW extends UDukePageWindow;

var UWindowWindow OffsetWindow;
var float ParentXOffset;
var float ParentYOffset;
var localized string FragGoal;
var localized string TeamGoal;
var localized string TimeLimit;
var localized string RoundTimeLimit;
var localized string TimeRemaining;
var localized string LastKilledByString;
var localized string RespawnString;
var localized string KillsHeader;
var localized string PingHeader;
var localized string TimeHeader;
var localized string DeathsHeader;
var UDukeScoreboardPlate ScoreboardPlates[32];
var int OrderedPRIIndex[32];
var float PlateOffset;
var float PlateSpacing;
var float PlateWidth;
var float PlateHeight;
var float PlateWinLeft;
var int ScorePage;
var int NumTilesToDisplay;
var int StartPlate;
var int PlatesPerPage;
var int Rank;
var Color WhiteColor;
var Color RedColor;
var Color LightGreenColor;
var Color DarkGreenColor;
var Color GreenColor;
var Color CyanColor;
var Color BlueColor;
var Color GoldColor;
var Color PurpleColor;
var Color TurqColor;
var Color GrayColor;
var Color LightBlueColor;
var Color DarkBlueColor;
var Color BlackColor;
var Color OrangeColor;

function Created()
{
    local int i;
    local PlayerReplicationInfo PRI;

    super.Created();
    i = 0;
    J0x0D:

    // End:0x98 [Loop If]
    if(i < 32)
    {
        ScoreboardPlates[i] = UDukeScoreboardPlate(CreateWindow(class'UDukeScoreboardPlate', 0, float(i * 48), (WinWidth / float(3)) * float(2), 48, self));
        ScoreboardPlates[i].Number = i + 1;
        ScoreboardPlates[i].myParent = self;
        ++ i;
        // [Loop Continue]
        goto J0x0D;
    }
    UpdatePlayerList();
    PageChange(0);
    ResizePlates();
    return;
}

function CalcPlatesPerPage()
{
    local int oldPPP;

    oldPPP = PlatesPerPage;
    // End:0x21
    if(oldPPP != PlatesPerPage)
    {
        PageChange(0);
    }
    return;
}

function ResizePlates()
{
    local int i, Count, RightCol, LeftCol, W, h;

    CalcPlatesPerPage();
    LeftCol = int(WinWidth / float(2)) - 15;
    RightCol = int(WinWidth / float(2)) + 15;
    Count = 0;
    PlateWidth = (WinWidth * float(4)) / float(5);
    i = 0;
    J0x53:

    // End:0x183 [Loop If]
    if(i < 32)
    {
        // End:0x143
        if(! ScoreboardPlates[i].bHidden)
        {
            ScoreboardPlates[i].SetSize(PlateWidth, PlateHeight);
            W = int(ScoreboardPlates[i].WinWidth);
            h = int(ScoreboardPlates[i].WinHeight);
            PlateWinLeft = (WinWidth - float(W)) / 2;
            ScoreboardPlates[i].WinLeft = PlateWinLeft;
            ScoreboardPlates[i].WinTop = PlateOffset + (float(Count) * (float(h) + PlateSpacing));
            ++ Count;
            // [Explicit Continue]
            goto J0x179;
        }
        ScoreboardPlates[i].WinLeft = WinWidth;
        ScoreboardPlates[i].WinTop = WinHeight;
        J0x179:

        ++ i;
        // [Loop Continue]
        goto J0x53;
    }
    return;
}

function Resized()
{
    super(UWindowWindow).Resized();
    ResizePlates();
    return;
}

function WindowShown()
{
    super(UWindowWindow).WindowShown();
    SetSize(ParentWindow.WinWidth, ParentWindow.WinHeight);
    UpdatePlayerList();
    PageChange(0);
    ResizePlates();
    return;
}

function PageUp()
{
    local int NewPage;

    NewPage = ScorePage - 1;
    // End:0x24
    if(NewPage >= 0)
    {
        PageChange(NewPage);
    }
    return;
}

function PageDown()
{
    local int NewPage;
    local PlayerPawn P;

    P = GetPlayerOwner();
    NewPage = ScorePage + 1;
    // End:0x52
    if(P.GameReplicationInfo.NumPlayers > ((ScorePage + 1) * PlatesPerPage))
    {
        PageChange(NewPage);
    }
    return;
}

function PageChange(int NewPage)
{
    local int i;

    ScorePage = NewPage;
    StartPlate = ScorePage * PlatesPerPage;
    i = 0;
    J0x24:

    // End:0x94 [Loop If]
    if(i < 32)
    {
        // End:0x72
        if((i >= StartPlate) && i < (StartPlate + PlatesPerPage))
        {
            ScoreboardPlates[i].bHidden = false;
            // [Explicit Continue]
            goto J0x8A;
        }
        ScoreboardPlates[i].bHidden = true;
        J0x8A:

        ++ i;
        // [Loop Continue]
        goto J0x24;
    }
    ResizePlates();
    return;
}

function Paint(Canvas C, float MouseX, float MouseY)
{
    local Font OldFont;
    local float XL, YL, W, h;
    local string MyTime;
    local DukePlayer P;
    local Texture Texture;
    local float xOffset, YOffset;
    local string S;
    local float Padding;
    local dnDeathmatchGameReplicationInfo GRI;
    local int Accuracy;

    GRI = dnDeathmatchGameReplicationInfo(GetPlayerOwner().GameReplicationInfo);
    // End:0x29
    if(GRI != none)
    {
        return;
    }
    P = DukePlayer(GetPlayerOwner());
    // End:0x48
    if(P != none)
    {
        return;
    }
    UpdatePlayerList();
    OldFont = C.Font;
    C.Font = C.BlockFontSmall;
    C.DrawColor = WhiteColor;
    Padding = 0;
    TextSize(C, "TEST", XL, YL);
    YOffset = 5;
    C.Font = C.BlockFont;
    S = "";
    // End:0x113
    if(GRI == none)
    {
        S = Caps(GRI.GameName);
    }
    // End:0x142
    if(S == "")
    {
        S = P.Level.Title;        
    }
    else
    {
        S = (S @ "/") @ P.Level.Title;
    }
    TextSize(C, S, XL, YL);
    xOffset = (WinWidth - XL) / float(2);
    ClipText(C, xOffset, YOffset, S);
    YOffset += (YL + Padding);
    S = "";
    // End:0x20B
    if(GRI.GoalTeamScore > 0)
    {
        S = TeamGoal @ string(GRI.GoalTeamScore);        
    }
    else
    {
        // End:0x23E
        if(GRI.FragLimit > 0)
        {
            S = FragGoal @ string(GRI.FragLimit);
        }
    }
    // End:0x2B2
    if(GRI.RoundTimeLimit > 0)
    {
        MyTime = GetTime(GRI.RoundTimeLimit);
        // End:0x291
        if(S == "")
        {
            S = RoundTimeLimit @ MyTime;            
        }
        else
        {
            S = ((S @ "/") @ RoundTimeLimit) @ MyTime;
        }
    }
    // End:0x331
    if(GRI.TimeLimit > 0)
    {
        // End:0x2FD
        if(S == "")
        {
            S = (TimeLimit @ string(GRI.TimeLimit)) $ ":00";            
        }
        else
        {
            S = (((S @ "/") @ TimeLimit) @ string(GRI.TimeLimit)) $ ":00";
        }
    }
    // End:0x39C
    if(S != "")
    {
        TextSize(C, S, XL, YL);
        xOffset = (WinWidth - XL) / float(2);
        ClipText(C, xOffset, YOffset, S);
        YOffset += (YL + Padding);
    }
    class'dnDeathmatchGameHUD'.static.GetPlaceString(dnDeathmatchGameHUD(P.MyHUD).Rank, dnDeathmatchGameHUD(P.MyHUD).bTiedScore, true, GetPlayerOwner().PlayerReplicationInfo.Score, S);
    // End:0x461
    if(S != "")
    {
        TextSize(C, S, XL, YL);
        xOffset = (WinWidth - XL) / float(2);
        ClipText(C, xOffset, YOffset, S);
    }
    S = "";
    YOffset += YL;
    // End:0x4B1
    if(P.LastKilledByPlayerName != "")
    {
        S = P.LastKilledByPlayerName @ "fragged you";
    }
    // End:0x509
    if(S != "")
    {
        TextSize(C, S, XL, YL);
        xOffset = (WinWidth - XL) / float(2);
        ClipText(C, xOffset, YOffset, S);
    }
    C.DrawColor = GoldColor;
    C.Style = 1;
    xOffset = (PlateWinLeft + float(class'UDukeScoreboardPlate'.default.ScoreboardTabs[0])) + float(class'UDukeScoreboardPlate'.default.ScoreboardTabs[1]);
    YOffset += (float(2) * YL);
    S = KillsHeader;
    ClipText(C, xOffset, YOffset, S);
    xOffset += float(class'UDukeScoreboardPlate'.default.ScoreboardTabs[2]);
    S = DeathsHeader;
    ClipText(C, xOffset, YOffset, S);
    xOffset += float(class'UDukeScoreboardPlate'.default.ScoreboardTabs[3]);
    S = PingHeader;
    ClipText(C, xOffset, YOffset, S);
    xOffset += float(class'UDukeScoreboardPlate'.default.ScoreboardTabs[4]);
    S = TimeHeader;
    ClipText(C, xOffset, YOffset, S);
    C.DrawColor = WhiteColor;
    // End:0x68A
    if(P.AccuracyShots == 0)
    {
        Accuracy = 0;        
    }
    else
    {
        Accuracy = int((float(P.AccuracyHits) / float(P.AccuracyShots)) * 100);
    }
    S = ((((("Shots:" @ string(P.AccuracyShots)) @ "Hits:") @ string(P.AccuracyHits)) @ "Accuracy:") @ string(Accuracy)) $ "%";
    TextSize(C, S, XL, YL);
    xOffset = (WinWidth - XL) / float(2);
    YOffset = WinHeight - YL;
    ClipText(C, xOffset, YOffset, S);
    super.Paint(C, MouseX, MouseY);
    return;
}

function string TwoDigitString(int Num)
{
    // End:0x1C
    if(Num < 10)
    {
        return "0" $ string(Num);        
    }
    else
    {
        return string(Num);
    }
    return;
}

simulated function string GetTime(int ElapsedTime)
{
    local string S;
    local int seconds, Minutes, Hours;

    seconds = ElapsedTime;
    Minutes = seconds / 60;
    Hours = Minutes / 60;
    seconds = seconds - (Minutes * 60);
    Minutes = Minutes - (Hours * 60);
    // End:0x9C
    if(Hours > 0)
    {
        S = ((((TwoDigitString(Hours)) $ ":") $ (TwoDigitString(Minutes))) $ ":") $ (TwoDigitString(seconds));        
    }
    else
    {
        S = ((TwoDigitString(Minutes)) $ ":") $ (TwoDigitString(seconds));
    }
    return S;
    return;
}

function SortScores()
{
    local int i, j, Max, TempInt;
    local array<PlayerReplicationInfo> PRIArray;
    local PlayerPawn P;

    P = GetPlayerOwner();
    // End:0x32
    if((P != none) || P.GameReplicationInfo != none)
    {
        return;
    }
    PRIArray = P.GameReplicationInfo.PRIArray;
    i = 0;
    J0x58:

    // End:0x18B [Loop If]
    if(i < (string(PRIArray) - 1))
    {
        j = i + 1;
        J0x79:

        // End:0x181 [Loop If]
        if(j < string(PRIArray))
        {
            // End:0x177
            if((PRIArray[OrderedPRIIndex[j]].Score > PRIArray[OrderedPRIIndex[i]].Score) || (PRIArray[OrderedPRIIndex[j]].Score == PRIArray[OrderedPRIIndex[i]].Score) && PRIArray[OrderedPRIIndex[i]].Deaths < PRIArray[OrderedPRIIndex[i]].Deaths)
            {
                TempInt = OrderedPRIIndex[j];
                OrderedPRIIndex[j] = OrderedPRIIndex[i];
                OrderedPRIIndex[i] = TempInt;
            }
            ++ j;
            // [Loop Continue]
            goto J0x79;
        }
        ++ i;
        // [Loop Continue]
        goto J0x58;
    }
    return;
}

function UpdatePlayerList()
{
    local int i;
    local PlayerPawn P;

    P = GetPlayerOwner();
    // End:0x32
    if((P != none) || P.GameReplicationInfo != none)
    {
        return;
    }
    i = 0;
    J0x39:

    // End:0x60 [Loop If]
    if(i < 32)
    {
        OrderedPRIIndex[i] = i;
        ++ i;
        // [Loop Continue]
        goto J0x39;
    }
    SortScores();
    i = 0;
    J0x6D:

    // End:0x9E [Loop If]
    if(i < 32)
    {
        ScoreboardPlates[i].PRIindex = -1;
        ++ i;
        // [Loop Continue]
        goto J0x6D;
    }
    i = 0;
    J0xA5:

    // End:0xF4 [Loop If]
    if(i < string(P.GameReplicationInfo.PRIArray))
    {
        ScoreboardPlates[i].PRIindex = OrderedPRIIndex[i];
        ++ i;
        // [Loop Continue]
        goto J0xA5;
    }
    PageChange(ScorePage);
    return;
}

function NotifyFromControl(UWindowDialogControl C, byte E)
{
    local int i;

    switch(E)
    {
        // End:0x2A
        case 2:
            switch(C)
            {
                // End:0xFFFF
                default:
                    super.NotifyFromControl(C, E);
                    return;
                    break;
            }
        // End:0xFFFF
        default:
            super.NotifyFromControl(C, E);
            return;
            break;
    }
    return;
}

defaultproperties
{
    FragGoal="<?int?dnWindow.UDukeScoreboardCW.FragGoal?>"
    TeamGoal="<?int?dnWindow.UDukeScoreboardCW.TeamGoal?>"
    TimeLimit="<?int?dnWindow.UDukeScoreboardCW.TimeLimit?>"
    RoundTimeLimit="<?int?dnWindow.UDukeScoreboardCW.RoundTimeLimit?>"
    TimeRemaining="<?int?dnWindow.UDukeScoreboardCW.TimeRemaining?>"
    LastKilledByString="<?int?dnWindow.UDukeScoreboardCW.LastKilledByString?>"
    RespawnString="<?int?dnWindow.UDukeScoreboardCW.RespawnString?>"
    KillsHeader="<?int?dnWindow.UDukeScoreboardCW.KillsHeader?>"
    PingHeader="<?int?dnWindow.UDukeScoreboardCW.PingHeader?>"
    TimeHeader="<?int?dnWindow.UDukeScoreboardCW.TimeHeader?>"
    DeathsHeader="<?int?dnWindow.UDukeScoreboardCW.DeathsHeader?>"
    PlateOffset=100
    PlateSpacing=3
    PlateHeight=20
    PlatesPerPage=25
    WhiteColor=(R=255,G=255,B=255,A=0)
    RedColor=(R=255,G=0,B=0,A=0)
    LightGreenColor=(R=0,G=128,B=0,A=0)
    DarkGreenColor=(R=32,G=64,B=32,A=0)
    GreenColor=(R=0,G=255,B=0,A=0)
    CyanColor=(R=0,G=255,B=255,A=0)
    BlueColor=(R=0,G=0,B=255,A=0)
    GoldColor=(R=255,G=255,B=0,A=0)
    PurpleColor=(R=255,G=0,B=255,A=0)
    TurqColor=(R=0,G=128,B=255,A=0)
    GrayColor=(R=200,G=200,B=200,A=0)
    LightBlueColor=(R=0,G=0,B=128,A=0)
    DarkBlueColor=(R=0,G=0,B=64,A=0)
    OrangeColor=(R=255,G=144,B=0,A=0)
    ClientAreaAlpha=0.2
}