/*******************************************************************************
 * DukeIntro generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class DukeIntro extends GameInfo
    config
    collapsecategories
    hidecategories(movement,Collision,Lighting,LightColor);

var float fIntroTime;
var() float fTimeOutTilLaunchUSystem;
var float WaitCounter;

event PlayerPawn Login(string Portal, string Options, out string Error, class<PlayerPawn> SpawnClass)
{
    local PlayerPawn NewPlayer;

    NewPlayer = super.Login(Portal, Options, Error, SpawnClass);
    NewPlayer.GetZoneLastRenderTime(true);
    NewPlayer.TickStyle = 4;
    return NewPlayer;
    return;
}

function AddDefaultInventory(Pawn P)
{
    return;
}

function AcceptInventory(Pawn Other)
{
    Other.DestroyInventory();
    return;
}

function PlayTeleportEffect(Actor Incoming, bool bOut, bool bSound)
{
    return;
}

function float PlaySpawnEffect(Pickup Incoming)
{
    return;
}

function bool SetPause(bool bPause, PlayerPawn P, optional string Pauser, optional bool bSkipFade)
{
    return false;
    return;
}

function Tick(float DeltaTime)
{
    local Pawn P;

    // End:0x1D
    if(WaitCounter < 3)
    {
        WaitCounter += DeltaTime;
        return;
    }
    // End:0x130
    if(int(Level.LevelAction) != int(4))
    {
        P = Level.PawnList;
        J0x4A:

        // End:0x12D [Loop If]
        if(P == none)
        {
            // End:0x115
            if(((P.ClassForName('PlayerPawn') && PlayerPawn(P).Player == none) && WindowConsole(PlayerPawn(P).Player.Console) == none) && PlayerPawn(P).ProgressMessage[0] == "")
            {
                bNoNativeTick = true;
                GetPropertyText('Tick');
                WindowConsole(PlayerPawn(P).Player.Console).LaunchUWindow();
                // [Explicit Break]
                goto J0x12D;
            }
            P = P.NextPawn;
            // [Loop Continue]
            goto J0x4A;
        }
        J0x12D:
        
    }
    else
    {
        bNoNativeTick = true;
        GetPropertyText('Tick');
    }
    return;
}

function bool CanSpectate(Pawn Viewer, Actor ViewTarget)
{
    return false;
    return;
}

defaultproperties
{
    fTimeOutTilLaunchUSystem=1
    bGameEnded=true
    bCanViewOthers=false
    HUDType='dnGame.DukeHUD'
    GameReplicationInfoClass='dnGame.SPGameReplicationInfo'
    bNoNativeTick=false
}