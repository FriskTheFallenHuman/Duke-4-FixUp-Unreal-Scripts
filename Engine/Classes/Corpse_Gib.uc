/*******************************************************************************
 * Corpse_Gib generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Corpse_Gib extends Corpse
    collapsecategories
    notplaceable
    dependson(MeshInstance);

var float SmallImpulseMass;
var float LargeImpulseMass;
var float SmallImpulseScale;
var float GibletScale;

function PostBeginPlay()
{
    super(InteractiveActor).PostBeginPlay();
    TraceFire(1E-05, false, 'EnableDamage');
    TraceFire(FVar(0.5, 0.25), false, 'CheckBonesInWorld');
    // End:0x5E
    if(int(Level.NetMode) != int(NM_Standalone))
    {
        TickStyle = 1;
        TraceFire(FVar(10, 2), false, 'HideDestroy');
    }
    return;
}

function HideDestroy()
{
    RemoveTouchClass();
    return;
}

simulated function EnableDamage()
{
    bNoDamage = false;
    return;
}

function CopyFrozenStatus(Corpse_Gib Gib)
{
    Gib.bNoNativeTick = bNoNativeTick;
    Gib.FrozenPercent = FrozenPercent;
    Gib.TargetFrozenPercent = TargetFrozenPercent;
    Gib.DefaultFriction = DefaultFriction;
    Gib.bOverlayBumpShader = bOverlayBumpShader;
    Gib.OverlayBumpShaderInfo = OverlayBumpShaderInfo;
    return;
}

function Destroyed()
{
    local dnFriendFX_Spawners blood;
    local Corpse_Gib gib1, gib2, gib3, gib4, gib5;

    super(CorpseBase).Destroyed();
    // End:0x11
    if(bSilentDestroy)
    {
        return;
    }
    // End:0x1F
    if(Health >= float(0))
    {
        return;
    }
    // End:0x2A
    if(IsMP())
    {
        return;
    }
    // End:0x64
    if(! IsFrozen())
    {
        blood = FindFriendSpawner(class'Blood_BodyExplode_Spawner');
        // End:0x64
        if(blood == none)
        {
            blood.SetDesiredRotation(Location);
        }
    }
    // End:0xA1
    if(Mass < 1)
    {
        // End:0x9E
        if(! IsFrozen() && blood == none)
        {
            blood.RemoveActorColor(0.1);
        }        
    }
    else
    {
        // End:0xEF
        if((Mass >= 1) && Mass <= SmallImpulseMass)
        {
            // End:0xEC
            if(! IsFrozen() && blood == none)
            {
                blood.RemoveActorColor(0.45);
            }            
        }
        else
        {
            // End:0x25D
            if(Mass <= LargeImpulseMass)
            {
                gib1 = EmptyTouchClasses(class'Corpse_Gib', self,, Location);
                gib1.GetOverlayEffectAlpha(class'General_Meat');
                gib1.bCanDie = true;
                gib1.Mass = SmallImpulseMass - 2;
                gib1.RemoveActorColor((2 * GibletScale) * DrawScale);
                gib1.ForceMountUpdate(true, true, true, true, true);
                gib1.SetRotation(18);
                gib1.KGetCollidingActors();
                CopyFrozenStatus(gib1);
                gib2 = EmptyTouchClasses(class'Corpse_Gib', self,, Location);
                gib2.GetOverlayEffectAlpha(class'commonA_Gib');
                gib2.bCanDie = true;
                gib2.Mass = SmallImpulseMass - 2;
                gib2.RemoveActorColor((0.4 * GibletScale) * DrawScale);
                gib2.ForceMountUpdate(true, true, true, true, true);
                gib2.SetRotation(18);
                gib2.KGetCollidingActors();
                CopyFrozenStatus(gib2);                
            }
            else
            {
                // End:0x27B
                if(blood == none)
                {
                    blood.RemoveActorColor(2);
                }
                gib1 = EmptyTouchClasses(class'Corpse_Gib', self,, Location);
                gib1.bCanDie = true;
                gib1.GetOverlayEffectAlpha(class'commonA_Gib');
                gib1.RemoveActorColor((0.4 * GibletScale) * DrawScale);
                gib1.Mass = SmallImpulseMass - 2;
                gib1.ForceMountUpdate(true, true, true, true, true);
                gib1.SetRotation(18);
                gib1.KGetCollidingActors();
                CopyFrozenStatus(gib1);
                gib2 = EmptyTouchClasses(class'Corpse_Gib', self,, Location);
                gib2.bCanDie = true;
                gib2.GetOverlayEffectAlpha(class'commonB_Gib');
                gib2.RemoveActorColor((0.4 * GibletScale) * DrawScale);
                gib2.Mass = SmallImpulseMass - 2;
                gib2.ForceMountUpdate(true, true, true, true, true);
                gib2.SetRotation(18);
                gib2.KGetCollidingActors();
                CopyFrozenStatus(gib2);
                gib3 = EmptyTouchClasses(class'Corpse_Gib', self,, Location);
                gib3.bCanDie = true;
                gib3.GetOverlayEffectAlpha(class'General_Meat');
                gib3.RemoveActorColor((2 * GibletScale) * DrawScale);
                gib3.Mass = SmallImpulseMass - 2;
                gib3.ForceMountUpdate(true, true, true, true, true);
                gib3.SetRotation(18);
                gib3.KGetCollidingActors();
                CopyFrozenStatus(gib3);
                gib4 = EmptyTouchClasses(class'Corpse_Gib', self,, Location);
                gib4.bCanDie = true;
                gib4.GetOverlayEffectAlpha(class'commonC_Gib');
                gib4.RemoveActorColor((0.4 * GibletScale) * DrawScale);
                gib4.Mass = SmallImpulseMass - 2;
                gib4.ForceMountUpdate(true, true, true, true, true);
                gib4.SetRotation(18);
                gib4.KGetCollidingActors();
                CopyFrozenStatus(gib4);
            }
        }
    }
    // End:0x568
    if(! IsFrozen())
    {
        // End:0x55B
        if(blood == none)
        {
            blood.ExecuteEffect(true);
        }
        DoAdditionalSpawn(Location, DrawScale);
    }
    return;
}

function ModifyHealthActivity(float DeltaHealth, Vector ModifiedFrom)
{
    // End:0x18
    if(bNoDamage || ! bCanDie)
    {
        return;
    }
    EnableIKSystem(Health - DeltaHealth);
    // End:0x39
    if(Health <= 0)
    {
        RemoveTouchClass();
    }
    return;
}

simulated function float GetDamageMomentumPostScale(class<DamageType> DamageType)
{
    local float Alpha;

    // End:0x1D
    if(Mass <= SmallImpulseMass)
    {
        Alpha = 0;        
    }
    else
    {
        // End:0x4F
        if(Mass <= LargeImpulseMass)
        {
            Alpha = (Mass - SmallImpulseScale) / (LargeImpulseMass - SmallImpulseMass);            
        }
        else
        {
            Alpha = 1;
        }
    }
    return super(CorpseBase).GetDamageMomentumPostScale(DamageType) * Lerp(Alpha, SmallImpulseScale, 1);
    return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    super(CorpseBase).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
    // End:0x3B
    if(IsA(DamageType, class'ColdDamage'))
    {
        return;
    }
    ModifyHealthActivity(Damage, DamageOrigin);
    return;
}

function CheckBonesInWorld()
{
    local int BoneCount, i;
    local PointRegion BoneRegion;
    local name BoneName;
    local Vector BoneLoc;

    // End:0x0C
    if(SetScaleModifier() != none)
    {
        return;
    }
    BoneCount = SetScaleModifier().MakeReferencePose();
    i = 0;
    J0x24:

    // End:0x91 [Loop If]
    if(i < BoneCount)
    {
        BoneName = SetScaleModifier().BoneGetTranslate(i);
        BoneLoc = SetScaleModifier().CreateAnimGroup(BoneName, true);
        BoneRegion = GetRenderObjectTexture(BoneLoc);
        // End:0x87
        if(BoneRegion.iLeaf == -1)
        {
            RemoveTouchClass();
            return;
        }
        ++ i;
        // [Loop Continue]
        goto J0x24;
    }
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super(CorpseBase).RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.RegisterMaterialClass(class'Blood_BodyExplode_Spawner');
    PrecacheIndex.RegisterPawnAnimation(class'General_Meat');
    PrecacheIndex.RegisterPawnAnimation(class'commonA_Gib');
    PrecacheIndex.RegisterPawnAnimation(class'commonA_Gib');
    PrecacheIndex.RegisterPawnAnimation(class'commonB_Gib');
    PrecacheIndex.RegisterPawnAnimation(class'General_Meat');
    PrecacheIndex.RegisterPawnAnimation(class'commonC_Gib');
    return;
}

defaultproperties
{
    SmallImpulseMass=15
    LargeImpulseMass=25
    SmallImpulseScale=0.06
    GibletScale=1
    Health=15
    bNoDamage=true
    ImpactSoundTimer=0.75
    KAngularDamping=8
    PhysicsSoundOverrides(0)=(SoundType=0,OtherMaterialTypes=none,OtherMassTypes=none,Sounds=('a_impact.body.BodyPart_01','a_impact.body.BodyPart_02','a_impact.body.BodyPart_03','a_impact.body.BodyPart_04'),SoundInfo=(InputRange=(Min=8,Max=400),OutputPitchRange=(Min=0.75,Max=1.125),OutputVolumeRange=(Min=0.25,Max=1)),bDisableSoundInWater=true)
    PhysicsSoundOverrides(1)=(SoundType=2,OtherMaterialTypes=none,OtherMassTypes=none,Sounds=('a_impact.body.BodySlide_01'),SoundInfo=(InputRange=(Min=6,Max=400),OutputPitchRange=(Min=1,Max=1.25),OutputVolumeRange=(Min=0.25,Max=1)),bDisableSoundInWater=true)
    PhysicsSoundOverrides(2)=(SoundType=1,OtherMaterialTypes=none,OtherMassTypes=none,Sounds=('a_impact.body.BodyBits_Roll_01'),SoundInfo=(InputRange=(Min=0.5,Max=26),OutputPitchRange=(Min=0.85,Max=1),OutputVolumeRange=(Min=0.25,Max=1)),bDisableSoundInWater=true)
    bGibActor=true
    CollisionRadius=3
    CollisionHeight=3
}