/*******************************************************************************
 * KAffector generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class KAffector extends KConstraint
    abstract
    native
    collapsecategories
    notplaceable
    hidecategories(Collision,HeatVision,Interactivity,Karma,KarmaCollision);

var() noexport bool bStartAffectorActive "If true, the affector will start active (with limits/motor enabled). If false, it will need to be triggered before it has an effect.";
var() noexport bool bWakeOnAffectorChange "If true, the affector will wake up the relevant actors when enabled/disabled to give them a chance to adjust.";

event PostBeginPlay()
{
    super(RenderActor).PostBeginPlay();
    // End:0x4C
    if((((KConstraintActor1 != none) && KConstraintActor1Tag != 'None') && KConstraintActor2 != none) && KConstraintActor2Tag != 'None')
    {
        bStartAffectorActive = false;
    }
    SetAffectorState(bStartAffectorActive);
    return;
}

event Trigger(Actor Other, Pawn EventInstigator)
{
    super(Actor).Trigger(Other, EventInstigator);
    SetAffectorState(int(Physics) != int(18));
    return;
}

function SetAffectorState(bool bDesiredAffectorState)
{
    // End:0x5C
    if(bDesiredAffectorState)
    {
        SetRotation(18);
        // End:0x59
        if((int(Physics) == int(18)) && bWakeOnAffectorChange)
        {
            // End:0x40
            if(KConstraintActor1 == none)
            {
                KConstraintActor1.KGetCollidingActors();
            }
            // End:0x59
            if(KConstraintActor2 == none)
            {
                KConstraintActor2.KGetCollidingActors();
            }
        }        
    }
    else
    {
        SetRotation(0);
    }
    return;
}

defaultproperties
{
    bStartAffectorActive=true
    bWakeOnAffectorChange=true
    bDirectional=true
}