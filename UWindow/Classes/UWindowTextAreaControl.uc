/*******************************************************************************
 * UWindowTextAreaControl generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UWindowTextAreaControl extends UWindowDialogControl;

var string TextArea[750];
var string Prompt;
var int BufSize;
var int Head;
var int Tail;
var int Lines;
var int VisibleRows;
var bool bCursor;
var bool bScrollable;
var bool bShowCaret;
var bool bScrollOnResize;
var UWindowVScrollbar VertSB;
var float LastDrawTime;

function Created()
{
    super.Created();
    LastDrawTime = GetLevel().TimeSeconds;
    return;
}

function SetScrollable(bool newScrollable)
{
    bScrollable = newScrollable;
    // End:0x5A
    if(newScrollable)
    {
        VertSB = UWindowVScrollbar(CreateWindow(class'UWindowVScrollbar', WinWidth - float(12), 0, 12, WinHeight));
        VertSB.bAlwaysOnTop = true;        
    }
    else
    {
        // End:0x7D
        if(VertSB == none)
        {
            VertSB.Close();
            VertSB = none;
        }
    }
    return;
}

function BeforePaint(Canvas C, float X, float Y)
{
    super.BeforePaint(C, X, Y);
    // End:0x9C
    if(VertSB == none)
    {
        VertSB.WinTop = 0;
        VertSB.WinHeight = WinHeight;
        VertSB.WinWidth = float(LookAndFeel.SBPosIndicator.W);
        VertSB.WinLeft = WinWidth - float(LookAndFeel.SBPosIndicator.W);
    }
    return;
}

function Paint(Canvas C, float X, float Y)
{
    local int i, j, Line, TempHead, TempTail;

    local float XL, YL, W, h;

    C.Font = Root.GetFont(Font, C);
    C.DrawColor.R = 255;
    C.DrawColor.G = 255;
    C.DrawColor.B = 255;
    TextSize(C, "TEST", XL, YL);
    VisibleRows = int(WinHeight / YL);
    TempHead = Head;
    TempTail = Tail;
    Line = TempHead;
    TextArea[Line] = Prompt;
    // End:0xFA
    if(Prompt == "")
    {
        -- Line;
        // End:0xFA
        if(Line < 0)
        {
            Line += BufSize;
        }
    }
    // End:0x1A8
    if(bScrollable)
    {
        // End:0x1A8
        if((VertSB.MaxPos - VertSB.pos) >= float(0))
        {
            Line -= int(VertSB.MaxPos - VertSB.pos);
            TempTail -= int(VertSB.MaxPos - VertSB.pos);
            // End:0x191
            if(Line < 0)
            {
                Line += BufSize;
            }
            // End:0x1A8
            if(TempTail < 0)
            {
                TempTail += BufSize;
            }
        }
    }
    // End:0x1BE
    if(! bCursor)
    {
        bShowCaret = false;        
    }
    else
    {
        // End:0x220
        if((GetLevel().TimeSeconds > (LastDrawTime + 0.3)) || GetLevel().TimeSeconds < LastDrawTime)
        {
            LastDrawTime = GetLevel().TimeSeconds;
            bShowCaret = ! bShowCaret;
        }
    }
    i = 0;
    J0x227:

    // End:0x309 [Loop If]
    if(i < (VisibleRows + 1))
    {
        ClipText(C, 2, WinHeight - (YL * float(i + 1)), TextArea[Line]);
        // End:0x2CF
        if((Line == Head) && bShowCaret)
        {
            TextSize(C, TextArea[Line], W, h);
            ClipText(C, W, WinHeight - (YL * float(i + 1)), "|");
        }
        // End:0x2E1
        if(TempTail == Line)
        {
            // [Explicit Break]
            goto J0x309;
        }
        -- Line;
        // End:0x2FF
        if(Line < 0)
        {
            Line += BufSize;
        }
        ++ i;
        // [Loop Continue]
        goto J0x227;
    }
    J0x309:

    return;
}

function AddText(string NewLine)
{
    local int i;

    TextArea[Head] = NewLine;
    Head = (Head + 1) % BufSize;
    // End:0x4A
    if(Head == Tail)
    {
        Tail = (Tail + 1) % BufSize;
    }
    Lines = Head - Tail;
    // End:0x73
    if(Lines < 0)
    {
        Lines += BufSize;
    }
    // End:0xBC
    if(bScrollable)
    {
        VertSB.SetRange(0, float(Lines), float(VisibleRows));
        VertSB.pos = VertSB.MaxPos;
    }
    return;
}

function Resized()
{
    // End:0x52
    if(bScrollable)
    {
        VertSB.SetRange(0, float(Lines), float(VisibleRows));
        // End:0x52
        if(bScrollOnResize)
        {
            VertSB.pos = VertSB.MaxPos;
        }
    }
    return;
}

function SetPrompt(string NewPrompt)
{
    Prompt = NewPrompt;
    return;
}

function Clear()
{
    TextArea[0] = "";
    Head = 0;
    Tail = 0;
    return;
}

defaultproperties
{
    BufSize=750
    bScrollOnResize=true
}