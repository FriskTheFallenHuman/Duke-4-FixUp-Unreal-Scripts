/*******************************************************************************
 * UWindowURLTextArea generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UWindowURLTextArea extends UWindowDynamicTextArea
    config;

var bool bReleased;

function BeforePaint(Canvas C, float X, float Y)
{
    super.BeforePaint(C, X, Y);
    cursor = Root.NormalCursor;
    return;
}

function Paint(Canvas C, float X, float Y)
{
    super.Paint(C, X, Y);
    bReleased = false;
    return;
}

function TextAreaClipText(Canvas C, float DrawX, float DrawY, coerce string S, optional bool bCheckHotKey)
{
    local float X, Y, W, h, ClickX, ClickY;

    local string Text, NextBlock;
    local byte bLink;
    local bool bOverLink;

    Text = S;
    X = DrawX;
    Y = DrawY;
    J0x21:

    // End:0x418 [Loop If]
    if(Text != "")
    {
        ProcessText(C, Text, NextBlock, W, h, bLink);
        // End:0xA6
        if(int(bLink) != 0)
        {
            C.DrawColor.R = 0;
            C.DrawColor.G = 0;
            C.DrawColor.B = 255;            
        }
        else
        {
            C.DrawColor.R = 255;
            C.DrawColor.G = 255;
            C.DrawColor.B = 255;
        }
        GetMouseXY(ClickX, ClickY);
        bOverLink = ((((int(bLink) != 0) && DrawX < ClickX) && (DrawX + W) > ClickX) && DrawY < ClickY) && (DrawY + h) > ClickY;
        // End:0x17B
        if(bOverLink)
        {
            cursor = Root.HandCursor;
        }
        // End:0x3B4
        if(bOverLink && bMouseDown || bReleased)
        {
            // End:0x35E
            if(bReleased)
            {
                Localize(("Clicked URL: >>" $ NextBlock) $ "<<");
                // End:0x201
                if(Left(NextBlock, 7) ~= "http://")
                {                    
                    GetPlayerOwner().ConsoleCommand("start " $ NextBlock);
                }
                // End:0x23B
                if(Left(NextBlock, 6) ~= "ftp://")
                {                    
                    GetPlayerOwner().ConsoleCommand("start " $ NextBlock);
                }
                // End:0x278
                if(Left(NextBlock, 9) ~= "telnet://")
                {                    
                    GetPlayerOwner().ConsoleCommand("start " $ NextBlock);
                }
                // End:0x2B5
                if(Left(NextBlock, 9) ~= "gopher://")
                {                    
                    GetPlayerOwner().ConsoleCommand("start " $ NextBlock);
                }
                // End:0x2F4
                if(Left(NextBlock, 4) ~= "www.")
                {                    
                    GetPlayerOwner().ConsoleCommand("start http://" $ NextBlock);
                }
                // End:0x335
                if(Left(NextBlock, 4) ~= "ftp.")
                {                    
                    GetPlayerOwner().ConsoleCommand("start ftp://" $ NextBlock);                    
                }
                else
                {
                    // End:0x35B
                    if(Left(NextBlock, 9) ~= "unreal://")
                    {
                        LaunchUnrealURL(NextBlock);
                    }
                }                
            }
            else
            {
                C.DrawColor.R = 255;
                C.DrawColor.G = 0;
                C.DrawColor.B = 0;
            }
            // End:0x3B4
            if(bReleased)
            {
                bReleased = false;
            }
        }
        // End:0x3EF
        if(int(bLink) != 0)
        {
            DrawStretchedTexture(C, DrawX, (DrawY + h) - float(1), W, 1, class'WhiteTexture');
        }
        ClipText(C, DrawX, DrawY, NextBlock);
        DrawX += W;
        // [Loop Continue]
        goto J0x21;
    }
    return;
}

function LaunchUnrealURL(string URL)
{
    GetPlayerOwner().ClientTravel(URL, 0, false);
    return;
}

function Click(float X, float Y)
{
    super(UWindowWindow).Click(X, Y);
    bReleased = true;
    return;
}

function ProcessText(Canvas C, out string Text, out string NextBlock, out float W, out float h, out byte bLink)
{
    local int i, j;
    local string temp;

    i = InStr(Text, "http://");
    j = InStr(Text, "www.");
    // End:0x60
    if((i == -1) || j == -1)
    {
        i = Max(i, j);        
    }
    else
    {
        i = Min(i, j);
    }
    j = InStr(Text, "unreal://");
    // End:0xC0
    if((i == -1) || j == -1)
    {
        i = Max(i, j);        
    }
    else
    {
        i = Min(i, j);
    }
    j = InStr(Text, "ftp://");
    // End:0x11D
    if((i == -1) || j == -1)
    {
        i = Max(i, j);        
    }
    else
    {
        i = Min(i, j);
    }
    j = InStr(Text, "ftp.");
    // End:0x178
    if((i == -1) || j == -1)
    {
        i = Max(i, j);        
    }
    else
    {
        i = Min(i, j);
    }
    j = InStr(Text, "telnet://");
    // End:0x1D8
    if((i == -1) || j == -1)
    {
        i = Max(i, j);        
    }
    else
    {
        i = Min(i, j);
    }
    j = InStr(Text, "gopher://");
    // End:0x238
    if((i == -1) || j == -1)
    {
        i = Max(i, j);        
    }
    else
    {
        i = Min(i, j);
    }
    bLink = 0;
    // End:0x277
    if(i == -1)
    {
        NextBlock = Text;
        Text = "";        
    }
    else
    {
        // End:0x2E9
        if(i == 0)
        {
            bLink = 1;
            i = InStr(Text, " ");
            // End:0x2C0
            if(i == -1)
            {
                NextBlock = Text;
                Text = "";                
            }
            else
            {
                NextBlock = Left(Text, i);
                Text = Mid(Text, i);
            }            
        }
        else
        {
            NextBlock = Left(Text, i);
            Text = Mid(Text, i);
        }
    }
    TextAreaTextSize(C, NextBlock, W, h);
    return;
}

defaultproperties
{
    bIgnoreLDoubleClick=true
}