/*******************************************************************************
 * AlienQueen generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AlienQueen extends AIActor_Boss
    config
    collapsecategories
    dependson(dnControl_AlienQueen_FinishingMove)
    dependson(AlienQueen_HelperCollision)
    dependson(AlienQueen_Claw_Squirt_Sensor)
    dependson(AlienQueen_EggLandingSpot)
    dependson(dnGrenade_AlienQueen_Egg)
    dependson(AlienQueen_HurtRadiusSensor);

var() noexport deprecated name StartBattleTag "Trigger this to start the battle.  If not set, battle is started at spawn.";
var() noexport deprecated name DefendModeTag "Trigger this to force into defend mode";
var() noexport deprecated name DefendModeCompleteEvent "This event will be triggered whenever defend mode is activated";
var() noexport deprecated name OpenModeTag "Trigger this to force into open mode";
var() noexport deprecated name OpenModeCompleteEvent "This event will be triggered whenever open mode is activated";
var() noexport deprecated name TKBlastTag "Trigger this to force a TKBlast";
var() noexport deprecated name TKBlastEvent "This event will be triggered whenever a TKBlast is activated";
var() noexport deprecated name StompTag "Trigger this to force Melee Attack";
var() noexport deprecated name StompEvent "This event will be triggered whenever a Melee attack happens";
var() noexport deprecated name SummonTag "Trigger this to force Egg Launching";
var() noexport deprecated name SummonEvent "This event will be triggered whenever an Egg Launch happens";
var() noexport deprecated name EggLaunchTag "Trigger this to force Egg Launching";
var() noexport deprecated name EggLaunchEvent "This event will be triggered whenever an Egg Launch happens";
var() noexport deprecated name StunnedTag "Trigger this to force queen into stunned mode";
var() noexport deprecated name StunnedEvent "This event will be triggered whenever the queen goes into stunned mode";
var() noexport deprecated name TBBlastKnockDownToggleTag "This toggles the TK Blast between knocking the player down. Really just for testing purposes";
var() noexport deprecated name StrengthTapCompleteEvent "This event will be triggered when the player successfully completes the strength tap.";
var() noexport float Stage1_DamageToStun "How much damage w/ pipebombs required to stun the Queen during stage 1 attacks.";
var() noexport float Stage1_Health "Initial health of the Queen.";
var() noexport float Stage2_DamageToStun "How much damage w/ pipebombs required to stun the Queen during stage 2 attacks.";
var() noexport float Stage2_Health "Health level when the Queen switches to stage 2 attacks.";
var() noexport float Stage3_DamageToStun "How much damage w/ pipebombs required to stun the Queen during stage 3 attacks.";
var() noexport float Stage3_Health "Health level when the Queen switches to stage 3 attacks.";
var() noexport float StrengthTapIdleTime "How much time to spend in the down/idle pose when she is able to be str tapped.";
var() noexport float StrengthTapRecoveryHealth "How much health to have if strength tap times out and Queen recovers.";
var() noexport bool bDebugDamage "Debugs where/how she is taking damage";
var float DamageTillStun;
var float PreviousDamageToStun;
var bool ShouldDefend;
var() noexport float Stage3_GlobalIntervalMin "In stage3, this is the min time between attacks - ie this is how much forced idle time we have between attacks";
var() noexport float Stage3_GlobalIntervalRnd "Rnd global interval in stage 3";
var float GlobalGate;
var(AlienQueen_TKBlast) float TKBlast_IntervalMin[3];
var(AlienQueen_TKBlast) float TKBlast_IntervalRnd;
var(AlienQueen_TKBlast) class<SoftParticleSystem> TKBlast_ChargeUpParticleSystem;
var(AlienQueen_TKBlast) class<dnFriendFX_Spawners> TKBlast_ExplosionParticleSystem;
var(AlienQueen_TKBlast) float TKBlast_DamageAmount;
var(AlienQueen_TKBlast) noexport bool TKBlast_KnockDown "Should we knock the player down if we hit?";
var(AlienQueen_TKBlast) noexport bool TKBlast_Debug "Spit out extra debug info";
var(AlienQueen_TKBlast) noexport float TKBlast_TimeVisibleMin "Minimum time the target must have been visiible for us to do a TKBlast";
var float TKBlast_Gate;
var bool TKBlast_Enabled;
var bool TKBlast_EnabledSingle;
var SoftParticleSystem TKChargeUpParticleSystem;
var dnFriendFX_Spawners TKExplosionSpawner;
var(AlienQueen_EggLaunch) float EggLaunchIntervalMin[3];
var(AlienQueen_EggLaunch) float EggLaunchIntervalRnd;
var(AlienQueen_EggLaunch) noexport float EggLaunchMaxSpawns "Max number of pregnators that can be spawned at once";
var array<AlienQueen_EggLandingSpot> EggLandingSpots;
var AlienQueen_EggLandingSpot LastLandingSpot;
var bool EggLaunchEnabled;
var float EggLaunchGate;
var(AlienQueen_Stomp) float StompIntervalMin[3];
var(AlienQueen_Stomp) float StompIntervalRnd;
var(AlienQueen_Stomp) int StompMinYawToTarget;
var(AlienQueen_Stomp) int StompMaxYawToTarget;
var(AlienQueen_Stomp) noexport float StompTimeVisibleMin "Minimum time the target must have been visiible for us to do a stomp";
var(AlienQueen_Stomp) noexport float StompMaxDistance "Max distance to do the left/right stomp attack from";
var(AlienQueen_Stomp) noexport float StompMiddleMaxDistance "Max distance to do the middle multi stomp attack from";
var int StompMiddleIndex;
var float StompGate;
var bool StompEnabled;
var Vector StompDamageOffset;
var(AlienQueen_Summon) bool SummonDebug;
var(AlienQueen_Summon) float SummonIntervalMin[3];
var(AlienQueen_Summon) float SummonIntervalRnd;
var(AlienQueen_Summon) noexport int SummonMaxConcurrentSpawns "Max numbers of SummonMaxConcurrentSpawnsClass";
var(AlienQueen_Summon) noexport class<AIActor> SummonMaxConcurrentSpawnsClass "Class to count for MaxConcurrentSpawns";
var float SummonGate;
var bool bShouldSummon;
var() float StunnedDuration;
var bool bStunned;
var float StunnedGate;
var AlienQueen_Claw_Squirt_Sensor Squirter;
var bool bDefending;
var bool bStunnable;
var Actor StompDamageActorRight;
var Actor StompDamageActorLeft;
var Actor ProjectileFireActor;
var LookInfoActor FinishMoveUseRegion;
var float TimeVisible;
var int CurrentStage;
var AlienQueen_HelperCollision HelperCollision;
var SoftParticleSystem TongueBlood;
var bool bExploded;
var array<SSpawnActorPrefab> HeadGibPrefabs;
var array<SParticleFriendEffect> HeadGibEffects;

simulated function PostBeginPlay()
{
    local AlienQueen_EggLandingSpot LandingSpot;

    super.PostBeginPlay();
    Squirter = AlienQueen_Claw_Squirt_Sensor(FindMountedActor(, class'AlienQueen_Claw_Squirt_Sensor'));
    StompDamageActorRight = FindMountedActor('StompDamageActorRight');
    StompDamageActorLeft = FindMountedActor('StompDamageActorLeft');
    ProjectileFireActor = FindMountedActor('ProjectileFireActor');
    FinishMoveUseRegion = LookInfoActor(FindMountedActor('FinishMoveUseRegion'));
    FinishMoveUseRegion.ForceMountUpdate(false, false, false, false, false);
    FinishMoveUseRegion.IsMountedTo(256, 96);
    FinishMoveUseRegion.bCollisionAssumeValid = true;
    FinishMoveUseRegion.bUseCylinderCollision = true;
    FinishMoveUseRegion.bPassUseToOwner = true;
    FinishMoveUseRegion.bTraceUsable = true;
    FinishMoveUseRegion.DirtyTraceMasks();
    TKChargeUpParticleSystem = SoftParticleSystem(FindMountedActor('TKChargeUpParticleSystem'));
    TKChargeUpParticleSystem.DestroyWhenEmpty = false;
    TKChargeUpParticleSystem.Enabled = false;
    GetPointRegion('ForceDefendMode', DefendModeTag);
    GetPointRegion('ForceOpenMode', OpenModeTag);
    GetPointRegion('ForceTKBlast', TKBlastTag);
    GetPointRegion('ForceStomp', StompTag);
    GetPointRegion('ForceEggLaunch', EggLaunchTag);
    GetPointRegion('ForceStunned', StunnedTag);
    GetPointRegion('ForceSummon', SummonTag);
    GetPointRegion('ToggleKnockDown', TBBlastKnockDownToggleTag);
    SetHealthCap(Stage1_Health);
    EnableIKSystem(Stage1_Health);
    DamageTillStun = Stage1_DamageToStun;
    PreviousDamageToStun = DamageTillStun;
    // End:0x1D6
    foreach RotateVectorAroundAxis(class'AlienQueen_EggLandingSpot', LandingSpot)
    {
        EggLandingSpots[EggLandingSpots.Add(1)] = LandingSpot;        
    }    
    TKExplosionSpawner = FindFriendSpawner(TKBlast_ExplosionParticleSystem);
    ProjecilteFireGate = Level.GameTimeSeconds + MinProjectileFireInterval;
    EggLaunchGate = (Level.GameTimeSeconds + EggLaunchIntervalMin[CurrentStage]) + (FRand() * EggLaunchIntervalRnd);
    HelperCollision = EmptyTouchClasses(class'AlienQueen_HelperCollision', self,, Location + TransformVectorByRot(Vect(400, 63, 227), Rotation), Rotation, false, true);
    return;
}

event PostSpawn()
{
    super(AIActor).PostSpawn();
    bNoDamage = true;
    // End:0x47
    if(NameForString(StartBattleTag, 'None'))
    {
        bAutoStartDecisionTree = false;
        StopProcAiming();
        stopheadaim();
        SetExecutive(0);
        GetPointRegion('StartBattle', StartBattleTag);
    }
    return;
}

event Tick(float DeltaSeconds)
{
    super(Actor).Tick(DeltaSeconds);
    DoProcAiming(DeltaSeconds);
    // End:0x2F
    if(CurrentStage < 2)
    {
        bIgnoreAimAssist = bNoDamage;
    }
    // End:0x47
    if(QueenHasClearShot())
    {
        TimeVisible += DeltaSeconds;        
    }
    else
    {
        TimeVisible = 0;
    }
    return;
}

event Destroyed()
{
    super(AIActor).Destroyed();
    return;
}

simulated event float GetHealthMeterPercent()
{
    return Health / Stage1_Health;
    return;
}

final simulated function TriggerFunc_StartBattle()
{
    StartProcAiming();
    startheadaim();
    SetExecutive(2);
    SuspendExecutive(false);
    bStunnable = true;
    CurrentOpMustFinish = false;
    return;
}

final simulated function TriggerFunc_ForceDefendMode()
{
    // End:0x17
    if(! bDefending)
    {
        SetupDefendMode();
        ForceAnimXOp();
    }
    return;
}

final simulated function TriggerFunc_ForceOpenMode()
{
    // End:0x15
    if(bDefending)
    {
        SetupOpenMode();
        ForceAnimXOp();
    }
    return;
}

final simulated function TriggerFunc_ForceTKBlast()
{
    QueenForceOp(117);
    return;
}

final simulated function TriggerFunc_ForceStomp()
{
    QueenForceOp(135);
    return;
}

final simulated function TriggerFunc_ForceEggLaunch()
{
    SetupEggLaunch();
    ForceAnimXOp();
    return;
}

final simulated function TriggerFunc_ForceStunned()
{
    QueenForceOp(86);
    return;
}

final simulated function TriggerFunc_ForceSummon()
{
    SetupSummon();
    ForceAnimXOp();
    return;
}

final simulated function TriggerFunc_ToggleKnockDown()
{
    TKBlast_KnockDown = ! TKBlast_KnockDown;
    return;
}

final function ForceAnimXOp()
{
    QueenForceOp(6);
    return;
}

final function QueenForceOp(Engine.BaseAI.EAIOp NewOp)
{
    // End:0x3D
    if(int(CanUseOp(NewOp)) == int(0))
    {
        CurrentOpMustFinish = false;
        ExecuteOp(NewOp);
        CurrentOpMustFinish = true;
        SuspendExecutive(true);
        SuspendExecutive(false);
    }
    return;
}

function bool QueenHasClearShot()
{
    local Vector TKBlastHitLocation;
    local STraceFlags Flags;
    local STraceHitResult Result;
    local Actor HitActor;
    local Vector TraceStart, TraceEnd, TraceDir;

    // End:0x17
    if(! PrimaryTarget.IsValidTarget())
    {
        return false;
    }
    TraceStart = GetProjectileFireLocation();
    TraceDir = Normal(PrimaryTarget.GetBodyPos() - TraceStart);
    TraceEnd = TraceStart + (TraceDir * 2000);
    Flags.bTraceActors = true;
    Flags.bMeshAccurate = true;
    Flags.bShotTrace = true;
    Flags.bTraceTexture = false;
    Flags.bIgnoreAITransparent = false;
    Flags.bKarmaOnly = false;
    HitActor = AllActors(TraceStart, TraceEnd, Flags, Result);
    // End:0xE6
    if((HitActor != none) || HitActor != PrimaryTargetActor)
    {
        return true;
    }
    return false;
    return;
}

final function NotifyHurtRadiusSensorTakeDamage(AlienQueen_HurtRadiusSensor Sensor, Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    // End:0x142
    if(bStunnable)
    {
        // End:0x13F
        if(DamageTillStun > 0)
        {
            DamageTillStun -= Damage;
            // End:0xB0
            if(bDebugDamage)
            {
                GetVisibilityPoint(Sensor.Location, NewColorBytes(255, 255, 0), 10);
                BroadcastLog((((("Took Damage from " $ string(Sensor)) @ "(tag=") $ string(Sensor.Tag)) $ "). DamageTillStun: ") $ string(DamageTillStun));
            }
            // End:0x10C
            if(DamageTillStun <= 0)
            {
                bStunned = true;
                StunnedGate = Level.GameTimeSeconds + StunnedDuration;
                CurrentOpMustFinish = false;
                SuspendExecutive(true);
                SuspendExecutive(false);
                CurrentOpMustFinish = false;
                CurrentOpShouldFinish = false;                
            }
            else
            {
                DamageInfo.Valid = true;
                DamageInfo.Damage = 1;
                DamageInfo.Instigator = Instigator;
                MaybePlayPainSound();
            }
        }        
    }
    else
    {
        // End:0x184
        if(bNoDamage)
        {
            bNoDamage = false;
            TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
            bNoDamage = true;
        }
    }
    return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    super(Pawn).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
    // End:0x98
    if((CurrentStage == 0) && Health <= Stage2_Health)
    {
        CurrentStage = 1;
        TKBlast_Enabled = true;
        DamageTillStun = Stage2_DamageToStun;
        PreviousDamageToStun = DamageTillStun;
        GlobalGate = 0;
        EggLaunchGate = Level.GameTimeSeconds;
        SetHealthCap(Stage2_Health);        
    }
    else
    {
        // End:0x15E
        if((CurrentStage == 1) && Health <= Stage3_Health)
        {
            CurrentStage = 2;
            ShouldDefend = false;
            bDefending = false;
            bIgnoreAimAssist = false;
            bShouldSummon = true;
            // End:0x108
            if(SummonDebug)
            {
                BroadcastLog(string(self) @ "is now able to summon.");
            }
            DamageTillStun = Stage3_DamageToStun;
            PreviousDamageToStun = DamageTillStun;
            SummonGate = Level.GameTimeSeconds;
            GlobalGate = 0;
            EggLaunchGate = Level.GameTimeSeconds;
            SetHealthCap(Stage3_Health);
        }
    }
    return;
}

animevent simulated function stunned(optional EventInfo EventParms)
{
    GlobalTrigger(StunnedEvent, none, self);
    bNoDamage = false;
    return;
}

animevent simulated function Stunnable(optional EventInfo EventParms)
{
    CurrentOpMustFinish = false;
    bStunnable = true;
    return;
}

function Engine.BaseAI.EAICode COND_IsStunned()
{
    // End:0x3B
    if(bStunned)
    {
        // End:0x38
        if(StunnedGate < Level.GameTimeSeconds)
        {
            bStunned = false;
            DamageTillStun = PreviousDamageToStun;
            return 1;
        }
        return 0;
    }
    return 1;
    return;
}

final function SetupDefendMode()
{
    SetAnimPresets(0, 'Anim_Defend', false, -1, none, Vect(0, 0, 0), 0);
    return;
}

final function SetupOpenMode()
{
    SetAnimPresets(0, 'Anim_Open', false, -1, none, Vect(0, 0, 0), 0);
    return;
}

animevent simulated function defendstart(optional EventInfo EventParms)
{
    GlobalTrigger(DefendModeCompleteEvent, none, self);
    bDefending = true;
    return;
}

animevent simulated function defendstop(optional EventInfo EventParms)
{
    GlobalTrigger(OpenModeCompleteEvent, none, self);
    bDefending = false;
    return;
}

event name GetIdleAnimName()
{
    // End:0x0F
    if(bDefending)
    {
        return 'Anim_DefendIdle';
    }
    return 'Anim_Idle';
    return;
}

function Engine.BaseAI.EAICode COND_ShouldDefend()
{
    local int Index;

    // End:0x78
    if(ShouldDefend)
    {
        // End:0x6F
        if((SetScaleModifier() == none) && AnimationController == none)
        {
            Index = AnimationController.GetNumberOfCachedAnimSequences('Anim_DefendIdle');
            // End:0x6F
            if(MeshInstance.Error(0, 'Bottom') != AnimationController.Animations[Index].AnimSequence)
            {
                return 1;
            }
        }
        SetupDefendMode();
        return 0;
    }
    defendstop();
    return 1;
    return;
}

function Engine.BaseAI.EAICode COND_ShouldOpen()
{
    SetupOpenMode();
    return 0;
    return;
}

animevent simulated function StompDamage(optional EventInfo AnimEventInfo)
{
    // End:0x20
    if(AnimEventInfo.EventString == "left")
    {
        StompMiddleIndex = 1;        
    }
    else
    {
        StompMiddleIndex = 0;
    }
    super(AIActor).StompDamage(AnimEventInfo);
    return;
}

function Vector GetStompOrigin()
{
    // End:0x3D
    if((StompIndex == 0) || (StompIndex == 2) && StompMiddleIndex == 0)
    {
        return StompDamageActorRight.Location + StompDamageOffset;
    }
    return StompDamageActorLeft.Location + StompDamageOffset;
    return;
}

function DoStompDamage()
{
    super(AIActor).DoStompDamage();
    return;
}

event int GetStompIndex()
{
    // End:0x32
    if(PrimaryTarget.IsValidTarget() && PrimaryTarget.GetDist() < StompMiddleMaxDistance)
    {
        return 2;
    }
    return Rand(2);
    return;
}

function Engine.BaseAI.EAICode COND_ShouldStompMiddle()
{
    // End:0x18
    if(! PrimaryTarget.IsValidTarget())
    {
        return 4;
    }
    // End:0x26
    if(CurrentStage == 0)
    {
        return 2;
    }
    // End:0x43
    if(PrimaryTarget.GetDist() < StompMiddleMaxDistance)
    {
        return 0;
    }
    return 1;
    return;
}

function Engine.BaseAI.EAICode COND_ShouldStomp()
{
    local Vector DirToTarget;
    local Rotator DesiredAimRot;

    // End:0x18
    if(! PrimaryTarget.IsValidTarget())
    {
        return 4;
    }
    // End:0x41
    if((CurrentStage == 0) || GlobalGate > Level.GameTimeSeconds)
    {
        return 2;
    }
    // End:0x53
    if(TimeVisible < StompTimeVisibleMin)
    {
        return 27;
    }
    // End:0x70
    if(PrimaryTarget.GetDist() > StompMaxDistance)
    {
        return 19;
    }
    // End:0x11B
    if(StompEnabled && StompGate < Level.GameTimeSeconds)
    {
        DirToTarget = PrimaryTarget.GetDirTo();
        DesiredAimRot = Normalize(Rotator(DirToTarget) - Rotation);
        // End:0x11B
        if((DesiredAimRot.Yaw > StompMinYawToTarget) && DesiredAimRot.Yaw < StompMaxYawToTarget)
        {
            StompGate = (Level.GameTimeSeconds + StompIntervalMin[CurrentStage]) + (FRand() * StompIntervalRnd);
            return 0;
        }
    }
    return 1;
    return;
}

event name GetShootProjectileAnimName()
{
    // End:0x0F
    if(bDefending)
    {
        return 'Anim_TKBlastDefend';
    }
    return 'Anim_TKBlast';
    return;
}

simulated event Vector GetProjectileFireLocation()
{
    return ProjectileFireActor.Location;
    return;
}

animevent simulated function TKBlast(optional EventInfo EventParms)
{
    local Vector TKBlastHitLocation;
    local STraceFlags Flags;
    local STraceHitResult Result;
    local Actor HitActor;
    local Vector TraceStart, TraceEnd, TraceDir;

    // End:0x17
    if(! PrimaryTarget.IsValidTarget())
    {
        return;
    }
    // End:0x34
    if(TKExplosionSpawner != none)
    {
        TKExplosionSpawner = FindFriendSpawner(TKBlast_ExplosionParticleSystem);
    }
    // End:0x64
    if(TKExplosionSpawner != none)
    {
        BroadcastLog("TKExplosionSpawner == NONE");
        return;
    }
    TraceStart = GetProjectileFireLocation();
    TraceDir = Normal(PrimaryTarget.GetBodyPos() - TraceStart);
    TraceEnd = TraceStart + (TraceDir * 2000);
    Flags.bTraceActors = true;
    Flags.bMeshAccurate = true;
    Flags.bShotTrace = true;
    Flags.bTraceTexture = false;
    Flags.bIgnoreAITransparent = false;
    Flags.bKarmaOnly = false;
    HitActor = AllActors(TraceStart, TraceEnd, Flags, Result);
    // End:0x158
    if(TKBlast_Debug)
    {
        BroadcastLog("DCR HitActor=" $ string(HitActor));
        GetSlotVolume(TraceStart, TraceEnd, NewColorBytes(255, 0, 0), 3);
    }
    TKBlastHitLocation = Result.Location;
    // End:0x1F0
    if(HitActor != PrimaryTargetActor)
    {
        TKBlastHitLocation = Result.Location;
        HitActor.TakeDamage(self, TKBlast_DamageAmount, Result.Location, TraceDir, class'ExplosionDamage',, Location);
        // End:0x1F0
        if(HitActor.bIsPlayerPawn && TKBlast_KnockDown)
        {
            PlayerPawn(HitActor).DoKnockdown(Location);
        }
    }
    TKExplosionSpawner.SetDesiredRotation(TKBlastHitLocation);
    TKExplosionSpawner.DisableDesiredRotation_Roll(Rotator(Vect(0, 0, 1)));
    TKExplosionSpawner.ExecuteEffect(true);
    TKChargeUpParticleSystem.Enabled = false;
    return;
}

function Engine.BaseAI.EAICode COND_ShouldTKBlast()
{
    // End:0x1B
    if(! TKBlast_Enabled && ! TKBlast_EnabledSingle)
    {
        return 1;
    }
    // End:0x70
    if(! TKBlast_EnabledSingle)
    {
        // End:0x42
        if(GlobalGate > Level.GameTimeSeconds)
        {
            return 2;
        }
        // End:0x5E
        if(TKBlast_Gate > Level.GameTimeSeconds)
        {
            return 2;
        }
        // End:0x70
        if(TimeVisible < TKBlast_TimeVisibleMin)
        {
            return 27;
        }
    }
    TKBlast_EnabledSingle = false;
    return 0;
    return;
}

final function SetupEggLaunch()
{
    // End:0x36
    if(bDefending)
    {
        SetAnimPresets(0, 'Anim_EggLaunchDefend', false, -1, none, Vect(0, 0, 0), 0);        
    }
    else
    {
        SetAnimPresets(0, 'Anim_EggLaunch', false, -1, none, Vect(0, 0, 0), 0);
    }
    return;
}

animevent simulated function LaunchEgg(optional EventInfo EventParms)
{
    local Vector SpawnLocation;

    SetScaleModifier();
    SpawnLocation = MeshInstance.CreateAnimGroup('tail_8', true, false);
    DoEggLaunch(SpawnLocation);
    return;
}

final function DoEggLaunch(Vector SpawnLocation)
{
    local dnGrenade_AlienQueen_Egg Proj;
    local Vector projVel, TargetPos;
    local float Height;

    Height = 200;
    Proj = EmptyTouchClasses(class'dnGrenade_AlienQueen_Egg', self,, SpawnLocation, Rotation);
    TargetPos = GetEggLaunchTargetPos();
    // End:0x8D
    if(Proj == none)
    {
        CalcProjectileVelocity(Proj, 18, PrimaryTargetActor, TargetPos, 0, 0, Height, false, 800, false, 3, 0, true, projVel, false);
        Proj.DoThrow(projVel);
    }
    GlobalTrigger(EggLaunchEvent, none, self);
    return;
}

final function Vector GetEggLaunchTargetPos()
{
    local AlienQueen_EggLandingSpot spot;

    // End:0x65
    if(string(EggLandingSpots) > 0)
    {
        J0x0C:

        spot = EggLandingSpots[Rand(string(EggLandingSpots))];
        Log(spot == none);
        // End:0x0C
        if(!((string(EggLandingSpots) <= 1) || spot == LastLandingSpot))
            goto J0x0C;
        LastLandingSpot = spot;
        return LastLandingSpot.Location;
    }
    // End:0x82
    if(PrimaryTarget == none)
    {
        return PrimaryTarget.GetPos();
    }
    BroadcastLog(string(self) $ ": warning No Valid Egg Launch Target?!");
    return Location;
    return;
}

function Engine.BaseAI.EAICode COND_ShouldEggLaunch()
{
    // End:0x1C
    if(GlobalGate > Level.GameTimeSeconds)
    {
        return 2;
    }
    // End:0x87
    if(EggLaunchEnabled && EggLaunchGate < Level.GameTimeSeconds)
    {
        // End:0x87
        if(float(GetPregnatorCount()) < EggLaunchMaxSpawns)
        {
            EggLaunchGate = (Level.GameTimeSeconds + EggLaunchIntervalMin[CurrentStage]) + (FRand() * EggLaunchIntervalRnd);
            SetupEggLaunch();
            return 0;
        }
    }
    return 1;
    return;
}

function int GetPregnatorCount()
{
    local int i, Count;
    local Pregnator preg;
    local Pawn CurrentPawn;

    CurrentPawn = Level.PawnList;
    J0x15:

    // End:0x51 [Loop If]
    if(CurrentPawn == none)
    {
        // End:0x39
        if(Pregnator(CurrentPawn) == none)
        {
            ++ Count;
        }
        CurrentPawn = CurrentPawn.NextPawn;
        // [Loop Continue]
        goto J0x15;
    }
    return Count;
    return;
}

final function SetupSummon()
{
    // End:0x36
    if(bDefending)
    {
        SetAnimPresets(0, 'Anim_SummonDefend', false, -1, none, Vect(0, 0, 0), 0);        
    }
    else
    {
        SetAnimPresets(0, 'Anim_Summon', false, -1, none, Vect(0, 0, 0), 0);
    }
    return;
}

function Engine.BaseAI.EAICode COND_ShouldSummon()
{
    // End:0x1C
    if(GlobalGate > Level.GameTimeSeconds)
    {
        return 2;
    }
    // End:0xF4
    if(bShouldSummon && (GetSpawnedActorCount()) < SummonMaxConcurrentSpawns)
    {
        // End:0xA1
        if(SummonGate == -1)
        {
            SummonGate = (Level.GameTimeSeconds + SummonIntervalMin[CurrentStage]) + (FRand() * SummonIntervalRnd);
            // End:0x9E
            if(SummonDebug)
            {
                BroadcastLog(string(self) @ "starting summon timer");
            }            
        }
        else
        {
            // End:0xF4
            if(SummonGate <= Level.GameTimeSeconds)
            {
                SummonGate = -1;
                SetupSummon();
                // End:0xF1
                if(SummonDebug)
                {
                    BroadcastLog(string(self) @ "peforming summon");
                }
                return 0;
            }
        }
    }
    return 1;
    return;
}

function int GetSpawnedActorCount()
{
    local int Count;
    local Pawn P;

    P = Level.PawnList;
    Count = 0;
    J0x1C:

    // End:0x61 [Loop If]
    if(P == none)
    {
        // End:0x49
        if(IsA(P.Class, SummonMaxConcurrentSpawnsClass))
        {
            ++ Count;
        }
        P = P.NextPawn;
        // [Loop Continue]
        goto J0x1C;
    }
    return Count;
    return;
}

animevent simulated function startsummon(optional EventInfo EventParms)
{
    GlobalTrigger(SummonEvent, none, self);
    return;
}

event NotifySetTargetActor()
{
    super(AIActor).NotifySetTargetActor();
    PrimaryTarget.ForceContactUpdate();
    return;
}

event NotifyOpStarted(Engine.BaseAI.EAIOp NewOp, Engine.BaseAI.EAIOp OldOp)
{
    super(AIActor).NotifyOpStarted(NewOp, OldOp);
    bStunnable = false;
    // End:0x73
    if(int(NewOp) == int(135))
    {
        ProcAimingMinYaw = float(StompMinYawToTarget);
        ProcAimingMaxYaw = float(StompMaxYawToTarget);
        Squirter.SensorEnabled = true;
        // End:0x63
        if(! ShouldDefend)
        {
            CurrentOpMustFinish = false;
        }
        GlobalTrigger(StompEvent, none, self);        
    }
    else
    {
        // End:0x92
        if(int(NewOp) == int(86))
        {
            StopProcAiming();
            CurrentOpMustFinish = false;            
        }
        else
        {
            // End:0xE7
            if(int(NewOp) == int(23))
            {
                KFindPhysicsAction(0);
                bStunned = false;
                TKBlast_EnabledSingle = false;
                bIgnoreAimAssist = true;
                StopProcAiming();
                // End:0xDF
                if(HelperCollision == none)
                {
                    HelperCollision.SlideOut();
                }
                KUndisableCollisionBetween(0);                
            }
            else
            {
                // End:0x114
                if(int(NewOp) == int(6))
                {
                    // End:0x109
                    if(ShouldDefend)
                    {
                        CurrentOpMustFinish = true;                        
                    }
                    else
                    {
                        CurrentOpMustFinish = false;
                    }                    
                }
                else
                {
                    // End:0x179
                    if(int(NewOp) == int(117))
                    {
                        TKBlast_EnabledSingle = false;
                        TKBlast_Gate = (Level.GameTimeSeconds + TKBlast_IntervalMin[CurrentStage]) + (FRand() * TKBlast_IntervalRnd);
                        TKChargeUpParticleSystem.Enabled = true;
                        GlobalTrigger(TKBlastEvent, none, self);                        
                    }
                    else
                    {
                        // End:0x198
                        if(int(NewOp) == int(85))
                        {
                            // End:0x198
                            if(bDefending)
                            {
                                bStunnable = true;
                            }
                        }
                    }
                }
            }
        }
    }
    return;
}

event NotifyOpEnded(Engine.BaseAI.EAIOp Op, Engine.BaseAI.EAIOpStatus Status)
{
    super(AIActor).NotifyOpEnded(Op, Status);
    // End:0x37
    if(int(Op) == int(86))
    {
        StartProcAiming();
        bNoDamage = true;
        TKBlast_EnabledSingle = true;        
    }
    else
    {
        // End:0x76
        if(int(Op) == int(135))
        {
            ProcAimingMinYaw = default.ProcAimingMinYaw;
            ProcAimingMaxYaw = default.ProcAimingMaxYaw;
            Squirter.SensorEnabled = false;
            StartProcAiming();            
        }
        else
        {
            // End:0xBE
            if(int(Op) == int(23))
            {
                KFindPhysicsAction(7);
                ProjecilteFireGate = Level.GameTimeSeconds + MinProjectileFireInterval;
                bDoOverlayEffect = false;
                bIgnoreAimAssist = false;
                StartProcAiming();                
            }
            else
            {
                // End:0xDE
                if(int(Op) == int(117))
                {
                    TKChargeUpParticleSystem.Enabled = false;
                }
            }
        }
    }
    // End:0x140
    if(((! ShouldDefend && int(Op) != int(85)) && int(Op) != int(86)) && int(Op) != int(96))
    {
        GlobalGate = (Level.GameTimeSeconds + Stage3_GlobalIntervalMin) + (FRand() * Stage3_GlobalIntervalRnd);
    }
    return;
}

function bool ShouldUseDieOp(class<DamageType> DamageType)
{
    // End:0x0E
    if(FinishMeControlType == none)
    {
        return true;
    }
    return false;
    return;
}

function EndControlX_UserFailed()
{
    return;
}

function EndControlX_UserSuccess()
{
    return;
}

event Die(optional Pawn Killer, optional int Damage, optional Vector DamageOrigin, optional Vector DamageDirection, optional class<DamageType> DamageType, optional name HitBoneName)
{
    GlobalTrigger(Event, Killer, self);
    SuspendExecutive(true);
    SuspendWeaponTargetEvaluation(true);
    SuspendLookTargetEvaluation(true);
    TickStyle = 0;
    return;
}

animevent simulated function BloodSprayAttach(optional EventInfo AnimEventInfo)
{
    TongueBlood = BloodSprayAttachHelper('tongue_4',, Rot(531, -16384, 32768), class'Blood_Spray_Large_Main');
    // End:0x46
    if(TongueBlood == none)
    {
        TongueBlood.FindAndPlaySound('Blood_Rain');
    }
    return;
}

animevent simulated function HeadExplode()
{
    local int i;
    local PlayerPawn P;
    local KarmaActor KA;
    local SoftParticleSystem NeckBlood;

    // End:0x0B
    if(bExploded)
    {
        return;
    }
    bExploded = true;
    // End:0x31
    if(TongueBlood == none)
    {
        TongueBlood.Enabled = false;
    }
    i = 0;
    J0x38:

    // End:0x9D [Loop If]
    if(i < string(HeadGibPrefabs))
    {
        KA = KarmaActor(SetVolumeAngularVelocity(HeadGibPrefabs[i], ThisFrameDamage));
        // End:0x93
        if(KA == none)
        {
            KA.KFindPhysicsAction(0);
            KA.KSetJointsFrozenPercent(PhysicsEntityGroup);
        }
        ++ i;
        // [Loop Continue]
        goto J0x38;
    }
    NeckBlood = BloodSprayAttachHelper('neck',, Rot(531, -16384, 32768), class'Blood_Spray_Large_Main');
    // End:0xE3
    if(NeckBlood == none)
    {
        NeckBlood.FindAndPlaySound('Blood_Rain');
    }
    i = 0;
    J0xEA:

    // End:0x115 [Loop If]
    if(i < string(HeadGibEffects))
    {
        ExecuteParticleFriendEffect(HeadGibEffects[i]);
        ++ i;
        // [Loop Continue]
        goto J0xEA;
    }
    P = Level.TickHint();
    // End:0x164
    if(P == none)
    {
        P.ShakeView(PlayerShrunkFootstepViewShake, false);
        P.StartNukeDamageEffect(0.4, 5);
    }
    return;
}

simulated event bool OnEvalBonesHelper()
{
    // End:0x37
    if(bExploded && SetScaleModifier() == none)
    {
        SetScaleModifier().AnimUpdateGrid('neck', Vect(0.001, 0.001, 0.001), true);
    }
    return true;
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super(Pawn).RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.RegisterMaterialClass(class'AlienQueen_HelperCollision');
    PrecacheIndex.RegisterMaterialClass(class'dnGrenade_AlienQueen_Egg');
    PrecacheIndex.RegisterMaterialClass(class'dnControl_AlienQueen_FinishingMove');
    PrecacheIndex.RegisterMaterialClass(class'dnControl_PlayerKnockdown');
    PrecacheIndex.RegisterMaterialClass(class'dnScreenSplatter_Blood_Boss');
    PrecacheIndex.RegisterMaterialClass(class'Blood_Spray_Main');
    PrecacheIndex.RegisterMaterialClass(class'Blood_Spray_Large_Main');
    PrecacheIndex.ResetServer(class'ExplosionDamage');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'STR_BiteChomp');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_Death');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_EggPoopin');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_FallDown');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_FinalDeath_01');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_FinalDeath_02');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_Pain');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_Punch');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_Roar');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_ShellKnock');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_TK_Blast');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'Sound_Yell');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'STR_HeadExplode');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'STR_ImpScrape');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'STR_Scrape');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'STR_ScrapeImp');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'STR_SlideAway');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'STR_Spit');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'STR_TongueChomp');
    PrecacheIndex.InitAnimationControllerEx(VoicePack, 'STR_TossWhoosh');
    PrecacheIndex.InitAnimationControllerEx(class'Blood_Spray_Large_Main'.default.VoicePack, 'Blood_Rain');
    PrecacheIndex.SetChannelGridState('Anim_Idle', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_Open', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_DefendIdle', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_Defend', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_TKBlastDefend', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_TKBlast', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_EggLaunchDefend', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_EggLaunch', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_SummonDefend', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_Summon', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_PainDefend', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_PainStunned', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_Pain', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_Stunned', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_Finish_Stun', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_Finish_StunIdle', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('Anim_Finish_StunRecover', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('AlienQueen_FinishingMove_Activate', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('AlienQueen_FinishingMove_Grid', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('AlienQueen_FinishingMove_Success', class'acAlienQueen', Mesh);
    PrecacheIndex.SetChannelGridState('AlienQueen_FinishingMove_Failure', class'acAlienQueen', Mesh);
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'Falling_Flail');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'Gen_Grunt');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'Jump_Whoosh');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'KnockDown_BodySlam');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'KnockDown_VOC');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'Rage_VOC');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'Stomp_Impact');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'ST_Getup_Pat_01');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'ST_Getup_Pat_02');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'ST_Getup_Scuff');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'ST_Getup_StandShift');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'STR_BodySlide_Single');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'STR_TongueGrab');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_Duke', 'Veh_SteerGrab');
    return;
}

event EnumerateUsableAnimationControllers(PrecacheIndex PrecacheIndex, out array<Engine.BaseAI.EAIAnimController> UsableControllers)
{
    UsableControllers[string(UsableControllers)] = 1;
    return;
}

state ControlX
{
    event BeginState()
    {
        super.BeginState();
        ShrunkUseStyle = 1;
        TickStyle = 3;
        FinishMoveUseRegion.ForceMountUpdate(true);
        FinishMoveUseRegion.UsePhrase = class'dnControl_AlienQueen_FinishingMove'.default.UsePhrase;
        // End:0x5F
        if(HelperCollision == none)
        {
            HelperCollision.SlideIn();
        }
        bDoOverlayEffect = true;
        FadeOverlayEffect(0, 0);
        FadeOverlayEffect(1, 1);
        return;
    }

    event EndState()
    {
        super.EndState();
        ShrunkUseStyle = default.ShrunkUseStyle;
        DeathAnimChance = 1;
        TickStyle = default.TickStyle;
        FinishMoveUseRegion.ForceMountUpdate(false);
        ProjecilteFireGate = Level.GameTimeSeconds + MinProjectileFireInterval;
        KUndisableCollisionBetween(default.StaticInteractionClassification);
        return;
    }

    event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
    {
        return;
    }

    function EndControlX_UserFailed()
    {
        EndControlX_Lived();
        DamageTillStun = PreviousDamageToStun;
        SetHealthCap(StrengthTapRecoveryHealth);
        RaiseHealthToCap(Location);
        return;
    }

    function EndControlX_UserSuccess()
    {
        EndControlX_Lived();
        // End:0x59
        if(FinishMeControlType != class'dnControl_AlienQueen_FinishingMove')
        {
            bPlayDeathSound = false;
            FinishMeControlType = none;
            SetHealthCap(StrengthTapRecoveryHealth);
            RaiseHealthToCap(Location);
            DamageInfo.Damage = Health;
            DiedActivity();
            EnableIKSystem(0);
        }
        return;
    }

    function EndControlX_Died()
    {
        bPlayDeathSound = false;
        FinishMeControlType = none;
        super.EndControlX_Died();
        return;
    }

    function TimeOutControlX()
    {
        DamageTillStun = PreviousDamageToStun;
        SetHealthCap(StrengthTapRecoveryHealth);
        RaiseHealthToCap(Location);
        FadeOverlayEffect(0, 1);
        super.TimeOutControlX();
        return;
    }
    stop;
}

defaultproperties
{
    Stage1_DamageToStun=200
    Stage1_Health=1900
    Stage2_DamageToStun=300
    Stage2_Health=1400
    Stage3_DamageToStun=400
    Stage3_Health=800
    StrengthTapIdleTime=10
    StrengthTapRecoveryHealth=800
    ShouldDefend=true
    TKBlast_IntervalMin[0]=10
    TKBlast_IntervalMin[1]=10
    TKBlast_IntervalMin[2]=10
    TKBlast_ExplosionParticleSystem='p_Creatures.OctaBrainExplode.OctaBrainExplode_Spawner'
    TKBlast_DamageAmount=30
    TKBlast_KnockDown=true
    TKBlast_TimeVisibleMin=0.5
    EggLaunchIntervalMin[0]=7
    EggLaunchIntervalMin[1]=7
    EggLaunchIntervalMin[2]=7
    EggLaunchMaxSpawns=4
    EggLaunchEnabled=true
    StompIntervalMin[0]=5
    StompIntervalMin[1]=5
    StompIntervalMin[2]=5
    StompMinYawToTarget=-1615
    StompMaxYawToTarget=3483
    StompTimeVisibleMin=0.5
    StompMaxDistance=1300
    StompMiddleMaxDistance=800
    StompEnabled=true
    StompDamageOffset=(X=0,Y=0,Z=10)
    SummonIntervalMin[0]=10
    SummonIntervalMin[1]=10
    SummonIntervalMin[2]=10
    SummonMaxConcurrentSpawns=4
    SummonMaxConcurrentSpawnsClass='Octabrain'
    SummonGate=-1
    StunnedDuration=6
    HeadGibPrefabs(0)=(SpawnClass='Engine.Corpse_Gib_Bloody',RenderObject='sm_class_effects.Octabrain_Gibs.octabrain_brain_gib_l',DrawScale=3,DrawScaleVariance=0,DrawScale3D=(X=0,Y=0,Z=0),SpawnChance=0,SpawnCopies=0,SpawnCopiesVariance=0,bIgnorePawnAirCushion=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bNoCollision=false,bFindSpot=false,bIgnoreParentRotation=false,bTakeParentCollisionSize=false,bTakeParentMounting=false,bTakeParentActorColors=false,bTakeParentSkins=false,Offset=(X=0,Y=0,Z=0),OffsetVariance=(X=0,Y=0,Z=0),Rotation=(Pitch=0,Yaw=0,Roll=0),RotationVariance=(Pitch=0,Yaw=0,Roll=0),BoneName=Head,MotionInfo=MotionPrefab'AlienQueen.MP_AlienQueen_HeadGibs')
    HeadGibPrefabs(1)=(SpawnClass='Engine.Corpse_Gib_Bloody',RenderObject='sm_class_effects.Octabrain_Gibs.octabrain_brain_gib_l_rear',DrawScale=3,DrawScaleVariance=0,DrawScale3D=(X=0,Y=0,Z=0),SpawnChance=0,SpawnCopies=0,SpawnCopiesVariance=0,bIgnorePawnAirCushion=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bNoCollision=false,bFindSpot=false,bIgnoreParentRotation=false,bTakeParentCollisionSize=false,bTakeParentMounting=false,bTakeParentActorColors=false,bTakeParentSkins=false,Offset=(X=0,Y=0,Z=0),OffsetVariance=(X=0,Y=0,Z=0),Rotation=(Pitch=0,Yaw=0,Roll=0),RotationVariance=(Pitch=0,Yaw=0,Roll=0),BoneName=Head,MotionInfo=MotionPrefab'AlienQueen.MP_AlienQueen_HeadGibs')
    HeadGibPrefabs(2)=(SpawnClass='Engine.Corpse_Gib_Bloody',RenderObject='sm_class_effects.Octabrain_Gibs.octabrain_brain_gib_r',DrawScale=3,DrawScaleVariance=0,DrawScale3D=(X=0,Y=0,Z=0),SpawnChance=0,SpawnCopies=0,SpawnCopiesVariance=0,bIgnorePawnAirCushion=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bNoCollision=false,bFindSpot=false,bIgnoreParentRotation=false,bTakeParentCollisionSize=false,bTakeParentMounting=false,bTakeParentActorColors=false,bTakeParentSkins=false,Offset=(X=0,Y=0,Z=0),OffsetVariance=(X=0,Y=0,Z=0),Rotation=(Pitch=0,Yaw=0,Roll=0),RotationVariance=(Pitch=0,Yaw=0,Roll=0),BoneName=Head,MotionInfo=MotionPrefab'AlienQueen.MP_AlienQueen_HeadGibs')
    HeadGibPrefabs(3)=(SpawnClass='Engine.Corpse_Gib_Bloody',RenderObject='sm_class_effects.Octabrain_Gibs.octabrain_brain_gib_r_rear',DrawScale=3,DrawScaleVariance=0,DrawScale3D=(X=0,Y=0,Z=0),SpawnChance=0,SpawnCopies=0,SpawnCopiesVariance=0,bIgnorePawnAirCushion=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bNoCollision=false,bFindSpot=false,bIgnoreParentRotation=false,bTakeParentCollisionSize=false,bTakeParentMounting=false,bTakeParentActorColors=false,bTakeParentSkins=false,Offset=(X=0,Y=0,Z=0),OffsetVariance=(X=0,Y=0,Z=0),Rotation=(Pitch=0,Yaw=0,Roll=0),RotationVariance=(Pitch=0,Yaw=0,Roll=0),BoneName=Head,MotionInfo=MotionPrefab'AlienQueen.MP_AlienQueen_HeadGibs')
    HeadGibEffects(0)=(bAbsoluteLocation=false,bAbsoluteRotation=false,Scale=5,BoneName=Head,Location=(X=0,Y=0,Z=0),Rotation=(Pitch=0,Yaw=0,Roll=0),Effect='p_Creatures.OctaBrainExplode.OctaBrainExplode_Spawner')
    bProcAimingEnabled=true
    DamageScaleInfo(0)=(QualifierClass=none,DamageScale=0,QualifierDamageTypes=none,QualifierNotDamageTypes=('Engine.ExplosionDamage','dnGame.LargeCaliberBulletDamage'))
    Nodes(0)=(Ident=Root,Status=0,ReportedInvalid=false,SucCond=1,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(1)=(Ident=Default,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=85,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(2)=(Ident=stunned,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=86,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(3)=(Ident=idle,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=85,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(4)=(Ident=Pain,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=96,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(5)=(Ident=StunPain,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=96,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(6)=(Ident=Open,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=6,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(7)=(Ident=Defend,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=6,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(8)=(Ident=Summon,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=6,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(9)=(Ident=EggLaunch,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=6,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(10)=(Ident=TKBlast,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=117,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(11)=(Ident=Stomp,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=135,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    FSMStates(0)=(FSM=Root,Ident=Default,FSMSucc=false,FSMFail=false,Transitions=((Ident=stunned,Cond=0,Func=COND_IsStunned,Win=1,Code=0,StateTableIndex=0),(Ident=Defend,Cond=0,Func=COND_ShouldDefend,Win=1,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(1)=(FSM=Root,Ident=stunned,FSMSucc=false,FSMFail=false,Transitions=((Ident=StunPain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=stunned,Cond=0,Func=COND_IsStunned,Win=1,Code=0,StateTableIndex=0),(Ident=TKBlast,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(2)=(FSM=Root,Ident=Defend,FSMSucc=false,FSMFail=false,Transitions=((Ident=Summon,Cond=0,Func=COND_ShouldSummon,Win=1,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(3)=(FSM=Root,Ident=idle,FSMSucc=false,FSMFail=false,Transitions=((Ident=Pain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Stomp,Cond=0,Func=COND_ShouldStompMiddle,Win=0,Code=0,StateTableIndex=0),(Ident=EggLaunch,Cond=0,Func=COND_ShouldEggLaunch,Win=0,Code=0,StateTableIndex=0),(Ident=Summon,Cond=0,Func=COND_ShouldSummon,Win=0,Code=0,StateTableIndex=0),(Ident=Stomp,Cond=0,Func=COND_ShouldStomp,Win=0,Code=0,StateTableIndex=0),(Ident=TKBlast,Cond=0,Func=COND_ShouldTKBlast,Win=0,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(4)=(FSM=Root,Ident=TKBlast,FSMSucc=false,FSMFail=false,Transitions=((Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(5)=(FSM=Root,Ident=EggLaunch,FSMSucc=false,FSMFail=false,Transitions=((Ident=Pain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(6)=(FSM=Root,Ident=Pain,FSMSucc=false,FSMFail=false,Transitions=((Ident=stunned,Cond=0,Func=COND_IsStunned,Win=1,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(7)=(FSM=Root,Ident=StunPain,FSMSucc=false,FSMFail=false,Transitions=((Ident=stunned,Cond=0,Func=COND_IsStunned,Win=1,Code=0,StateTableIndex=0),(Ident=TKBlast,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(8)=(FSM=Root,Ident=Stomp,FSMSucc=false,FSMFail=false,Transitions=((Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(9)=(FSM=Root,Ident=Summon,FSMSucc=false,FSMFail=false,Transitions=((Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    ForceDirectShot=true
    Relationships(0)=(m_aClass='Engine.AIFactionHoloduke',m_eAttitude=1,m_fDamageThreshold=1)
    Relationships(1)=(m_aClass='Engine.AIFactionDuke',m_eAttitude=2,m_fDamageThreshold=1)
    Relationships(2)=(m_aClass='Engine.AIFactionHuman',m_eAttitude=2,m_fDamageThreshold=1)
    Relationships(3)=(m_aClass='Engine.AIFactionAlien',m_eAttitude=5,m_fDamageThreshold=1)
    IdleInfo(0)=(MinIdleTime=6,RndIdleTime=1,bFaceTarget=false,AnimName=Anim_Stunned)
    AnimControllers[0]=(m_eFallback=0,m_cClass='acAlienQueen',m_oController=none)
    AnimControllers[1]=(m_eFallback=1,m_cClass='acAlienQueen',m_oController=none)
    AnimControllers[2]=(m_eFallback=1,m_cClass='acAlienQueen',m_oController=none)
    AnimControllers[3]=(m_eFallback=1,m_cClass='acAlienQueen',m_oController=none)
    AnimControllers[4]=(m_eFallback=1,m_cClass='acAlienQueen',m_oController=none)
    AnimControllers[5]=(m_eFallback=1,m_cClass='acAlienQueen',m_oController=none)
    AnimControllers[6]=(m_eFallback=1,m_cClass='acAlienQueen',m_oController=none)
    AnimControllers[7]=(m_eFallback=1,m_cClass='acAlienQueen',m_oController=none)
    AnimControllers[8]=(m_eFallback=1,m_cClass='acAlienQueen',m_oController=none)
    DeathAnimChance=1
    FinishMeControlType='dnControl_AlienQueen_FinishingMove'
    FaceDamage=false
    FaceDeath=false
    MinPainOpInterval=0.5
    RndPainOpInterval=0
    MaxConsecutivePainOp=10
    MaxConsecutivePainInterval=0
    BoneAim(0)=(BoneName=Spine1,Yaw=0,Pitch=0,Weight=0.3333334)
    BoneAim(1)=(BoneName=spine2,Yaw=0,Pitch=0,Weight=0.3333333)
    BoneAim(2)=(BoneName=spine3,Yaw=0,Pitch=0,Weight=0.3333333)
    StompInfo(0)=(StompRadius=1000,AnimName=Anim_StompRight,BoneName=rightmiddle_1,StompDamageAmount=50,StompDamageRadius=250,StompDamageVel=200,StompDamageLift=350,bDebug=false,SafeHeight=100,bCanStompShrunk=true,ShakeInfo=(bNoLerp=false,bToggleSign=true,Style=2,Function=1,FalloffActor=none,FalloffDistance=0,ShakeDuration=0.6,ShakeFrequency=0.08,ShakeMagnitude=2500,ShakeFullMagnitude=0,ShakeFullMagnitudeTime=0,ShakeName=QueenStompShake),ShakeRadius=1100,ParticleEffectClass='p_Creatures.Cycloid_Stomp.CycloidStomp_Spawner',AdditionalEffectBones=none,StompLocation=(X=0,Y=0,Z=0),bDontFaceTarget=true,bLightRumbleOnDamage=true)
    StompInfo(1)=(StompRadius=1000,AnimName=Anim_StompLeft,BoneName=leftmiddle_1,StompDamageAmount=50,StompDamageRadius=250,StompDamageVel=200,StompDamageLift=350,bDebug=false,SafeHeight=100,bCanStompShrunk=true,ShakeInfo=(bNoLerp=false,bToggleSign=true,Style=2,Function=1,FalloffActor=none,FalloffDistance=0,ShakeDuration=0.6,ShakeFrequency=0.08,ShakeMagnitude=2500,ShakeFullMagnitude=0,ShakeFullMagnitudeTime=0,ShakeName=QueenStompShake),ShakeRadius=1100,ParticleEffectClass='p_Creatures.Cycloid_Stomp.CycloidStomp_Spawner',AdditionalEffectBones=none,StompLocation=(X=0,Y=0,Z=0),bDontFaceTarget=true,bLightRumbleOnDamage=true)
    StompInfo(2)=(StompRadius=1000,AnimName=Anim_StompClose,BoneName=leftmiddle_1,StompDamageAmount=50,StompDamageRadius=75,StompDamageVel=200,StompDamageLift=350,bDebug=false,SafeHeight=100,bCanStompShrunk=true,ShakeInfo=(bNoLerp=false,bToggleSign=true,Style=2,Function=1,FalloffActor=none,FalloffDistance=0,ShakeDuration=0.6,ShakeFrequency=0.08,ShakeMagnitude=2500,ShakeFullMagnitude=0,ShakeFullMagnitudeTime=0,ShakeName=QueenStompShake),ShakeRadius=1100,ParticleEffectClass='p_Creatures.Cycloid_Stomp.CycloidStomp_Spawner',AdditionalEffectBones=none,StompLocation=(X=0,Y=0,Z=0),bDontFaceTarget=true,bLightRumbleOnDamage=true)
    PlayerShrunkFootstepViewShake=(bNoLerp=false,bToggleSign=true,Style=2,Function=1,FalloffActor=none,FalloffDistance=4000,ShakeDuration=1.2,ShakeFrequency=0.08,ShakeMagnitude=1550,ShakeFullMagnitude=0,ShakeFullMagnitudeTime=0,ShakeName=AlienQueenStepShake)
    ProjectileClass='dnRocket_EnergyLeech_Spike'
    bShootProjectileRequireLOS=false
    bShootProjectileFaceTarget=false
    bSimplePawnPhysicsCollision=false
    bShrinkable=false
    EyeBone=jaw
    BodyBone=spine2
    LockOnBone=neck
    MountOnSpawn(0)=(bSkipVerifySelf=false,SpawnClass='dnGame.DumbActor',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=StompDamageActorRight,ForceEvent=None,MountMeshItem=rightmiddle_1,MountOrigin=(X=0,Y=0,Z=10),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=2,DismountPhysics=0),RenderObject=none,DrawScale=0)
    MountOnSpawn(1)=(bSkipVerifySelf=false,SpawnClass='dnGame.DumbActor',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=StompDamageActorLeft,ForceEvent=None,MountMeshItem=leftmiddle_1,MountOrigin=(X=0,Y=0,Z=10),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=2,DismountPhysics=0),RenderObject=none,DrawScale=0)
    MountOnSpawn(2)=(bSkipVerifySelf=false,SpawnClass='dnGame.DumbActor',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=ProjectileFireActor,ForceEvent=None,MountMeshItem=jaw,MountOrigin=(X=0,Y=-200,Z=-150),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=2,DismountPhysics=0),RenderObject=none,DrawScale=0)
    MountOnSpawn(3)=(bSkipVerifySelf=false,SpawnClass='Engine.LookInfoActor',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=true,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=true,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=FinishMoveUseRegion,ForceEvent=None,MountMeshItem=jaw,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=2,DismountPhysics=0),RenderObject=none,DrawScale=0)
    MountOnSpawn(4)=(bSkipVerifySelf=false,SpawnClass='dnParticles.dnOctabrainFX_BrainChargeA',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=TKChargeUpParticleSystem,ForceEvent=None,MountMeshItem=jaw,MountOrigin=(X=0,Y=-200,Z=-20),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=2,DismountPhysics=0),RenderObject=none,DrawScale=4)
    MountOnSpawn(5)=(bSkipVerifySelf=false,SpawnClass='AlienQueen_Claw_Squirt_Sensor',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=ClawSquirter,ForceEvent=None,MountMeshItem=rightmiddle_1,MountOrigin=(X=0,Y=0,Z=10),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=2,DismountPhysics=0),RenderObject=none,DrawScale=0)
    Health=1900
    HealthCap=1900
    StaticInteractionClassification=3
    DynamicInteractionClassification=7
    PhysicsEntityGroup=AlienQueenEntityGroup
    Physics=9
    bTraceUsable=false
    bAcceptMeshAccurateMoveActorTrace=true
    bIgnoreMaxRadius=true
    bHasEvalBonesHelper=true
    bLowerByCollision=false
    CollisionRadius=600
    CollisionHeight=500
    Mesh='c_characters.alien_queen'
    VoicePack='SoundConfig.Enemies.VoicePack_Queen'
}