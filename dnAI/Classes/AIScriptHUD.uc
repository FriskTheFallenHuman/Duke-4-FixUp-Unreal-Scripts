/*******************************************************************************
 * AIScriptHUD generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AIScriptHUD extends TriggerHUD
    collapsecategories;

var BGInfo ActiveScriptsBGInfo;
var BGInfo FailedScriptsBGInfo;

event PostBeginPlay()
{
    super(DukeHUD).PostBeginPlay();
    return;
}

simulated function DrawAIHUD(Canvas C)
{
    local int MethodIndex, NumMethods, CurrentMethodIndex, i;
    local float sx, sy, xw, yh, StartY, StartX,
	    lengthX, lengthXb;

    super.DrawAIHUD(C);
    // End:0x19
    if(m_aTarget != none)
    {
        return;
    }
    C.GetScreenXYNoClip("ScriptPlayer HUD", xw, yh);
    C.CurY += 100;
    StartColumn(int(C.CurX), int(C.CurY), int(yh));
    // End:0x32E
    if(int(m_aTarget.GetExecutive()) == int(1))
    {
        StartBG(C, ActiveScriptsBGInfo);
        C.DrawColor = OrangeColor;
        DrawString(C, string(m_aTarget) @ "currently Playing Script. ");
        C.DrawColor = WhiteColor;
        DrawString(C, "Tag: " $ string(m_aTarget.Tag));
        DrawString(C, "Script Tag: " $ string(m_aTarget.ScriptTag));
        // End:0x1BE
        if(m_aTarget.Factory == none)
        {
            DrawString(C, (("Factory: " $ string(m_aTarget.Factory)) @ "Tag: ") $ string(m_aTarget.Factory.Tag));
        }
        NumMethods = m_aTarget.ScriptPlayer.GetNumMethods();
        CurrentMethodIndex = Max(0, m_aTarget.ScriptPlayer.GetMethodIndex() - 1);
        DrawString(C, "");
        DrawString(C, "");
        DrawString(C, "");
        C.DrawColor = GrayColor;
        MethodIndex = 0;
        J0x247:

        // End:0x31B [Loop If]
        if(MethodIndex < NumMethods)
        {
            // End:0x2C7
            if(MethodIndex == CurrentMethodIndex)
            {
                C.DrawColor = WhiteColor;
                DrawString(C, ">" @ Left(m_aTarget.ScriptPlayer.GetMethodString(MethodIndex), 75));
                C.DrawColor = GrayColor;
                // [Explicit Continue]
                goto J0x311;
            }
            C.DrawColor = GrayColor;
            DrawString(C, " " @ Left(m_aTarget.ScriptPlayer.GetMethodString(MethodIndex), 75));
            J0x311:

            ++ MethodIndex;
            // [Loop Continue]
            goto J0x247;
        }
        EndBG(C, ActiveScriptsBGInfo);        
    }
    else
    {
        StartBG(C, ActiveScriptsBGInfo);
        C.DrawColor = OrangeColor;
        DrawString(C, (string(m_aTarget) $ "  is in the wild! Tag: ") $ string(m_aTarget.Tag));
        C.DrawColor = WhiteColor;
        DrawString(C, "ScriptTag: " $ string(m_aTarget.ScriptTag));
        // End:0x439
        if(m_aTarget.Factory == none)
        {
            DrawString(C, (("Factory: " $ string(m_aTarget.Factory)) @ "Tag: ") $ string(m_aTarget.Factory.Tag));
        }
        EndBG(C, ActiveScriptsBGInfo);
    }
    C.CurY += 100;
    StartColumn(int(C.CurX), int(C.CurY), int(yh));
    // End:0x653
    if(string(m_aTarget.ScriptFailHistory) > 0)
    {
        StartBG(C, FailedScriptsBGInfo);
        i = 0;
        J0x4B8:

        // End:0x643 [Loop If]
        if(i < string(m_aTarget.ScriptFailHistory))
        {
            C.DrawColor = RedColor;
            DrawString(C, " FAILED: " $ Left(m_aTarget.ScriptFailHistory[i].ScriptMethodStr, 75));
            C.DrawColor = WhiteColor;
            DrawString(C, " State: " $ string(m_aTarget.ScriptFailHistory[i].AIState));
            DrawString(C, " OP:    " $ string(DynamicLoadObject(class'EAIOp', int(m_aTarget.ScriptFailHistory[i].AIOP))));
            DrawString(C, (((" Time : " $ string(m_aTarget.ScriptFailHistory[i].Timestamp)) @ "(") $ string(Level.GameTimeSeconds - m_aTarget.ScriptFailHistory[i].Timestamp)) $ " seconds ago)");
            DrawString(C, " ");
            DrawString(C, " ");
            ++ i;
            // [Loop Continue]
            goto J0x4B8;
        }
        EndBG(C, FailedScriptsBGInfo);
    }
    return;
}

function Respawn_AI()
{
    local AIActor SpawnedActor;

    // End:0x3F
    if(m_aTarget != none)
    {
        BroadcastLog("AI Debugger: No Active Target to Respawn!");
        return;
    }
    // End:0x93
    if(m_aTarget.Factory != none)
    {
        BroadcastLog("AI Debugger: This AI was not spawned from a factory!");
        return;
    }
    m_aTarget.Factory.m_nMaxSpawnOverLifeTime = 0;
    m_aTarget.Factory.TriggerSpawn(none, none, SpawnedActor);
    // End:0x170
    if(SpawnedActor == none)
    {
        // End:0x158
        if((m_aTarget.Level.TickHint().bBehindView == true) && m_aTarget.Level.TickHint().ViewTarget != m_aTarget)
        {
            m_aTarget.Level.TickHint().ViewTarget = SpawnedActor;
        }
        m_aTarget.RemoveTouchClass();
        m_aTarget = SpawnedActor;
    }
    return;
}

function Edit_Factory()
{
    // End:0x34
    if(m_aTarget != none)
    {
        BroadcastLog("AI Debugger: No Active Target!");
        return;
    }
    // End:0x88
    if(m_aTarget.Factory != none)
    {
        BroadcastLog("AI Debugger: This AI was not spawned from a factory!");
        return;
    }    
    m_aTarget.Level.TickHint().ConsoleCommand("editactor name=" $ string(m_aTarget.Factory.Name));
    return;
}

function Edit_ScriptTrigger()
{
    // End:0x34
    if(m_aTarget != none)
    {
        BroadcastLog("AI Debugger: No Active Target!");
        return;
    }
    // End:0xB1
    if(m_aTarget.LastScriptTrigger != none)
    {
        BroadcastLog("AI Debugger: This AI has not used a ScriptTrigger! (or the script trigger has been destroyed)");
        return;
    }    
    m_aTarget.Level.TickHint().ConsoleCommand("editactor name=" $ string(m_aTarget.LastScriptTrigger.Name));
    return;
}

defaultproperties
{
    AutoPopulateTriggerList=false
    DebugTreeItems(0)=(Text="",ConsoleCommand="",TriggerEvent=None,Func=Respawn_AI,Pop=false,Push=false,bHideChildren=false,var1=0,var2=0,MaxVisibleChildren=0,ChildrenOffset=0)
    DebugTreeItems(1)=(Text="",ConsoleCommand="",TriggerEvent=None,Func=Edit_Factory,Pop=false,Push=false,bHideChildren=false,var1=0,var2=0,MaxVisibleChildren=0,ChildrenOffset=0)
    DebugTreeItems(2)=(Text="",ConsoleCommand="",TriggerEvent=None,Func=Edit_ScriptTrigger,Pop=false,Push=false,bHideChildren=false,var1=0,var2=0,MaxVisibleChildren=0,ChildrenOffset=0)
}