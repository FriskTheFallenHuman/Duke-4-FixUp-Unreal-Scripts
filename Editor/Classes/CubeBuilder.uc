/*******************************************************************************
 * CubeBuilder generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CubeBuilder extends BrushBuilder;

var() float Height_Z;
var() float Width_Y;
var() float Breadth_X;
var() float WallThickness;
var() name GroupName;
var() bool Hollow;
var() bool Tessellated;

function BuildCube(int Direction, float dx, float dy, float dz, bool _tessellated)
{
    local int n, i, j, K;

    n = GetVertexCount();
    i = -1;
    J0x17:

    // End:0xB1 [Loop If]
    if(i < 2)
    {
        j = -1;
        J0x2E:

        // End:0xA5 [Loop If]
        if(j < 2)
        {
            K = -1;
            J0x45:

            // End:0x99 [Loop If]
            if(K < 2)
            {
                Vertex3f((float(i) * dx) / float(2), (float(j) * dy) / float(2), (float(K) * dz) / float(2));
                K += 2;
                // [Loop Continue]
                goto J0x45;
            }
            j += 2;
            // [Loop Continue]
            goto J0x2E;
        }
        i += 2;
        // [Loop Continue]
        goto J0x17;
    }
    // End:0x27C
    if(_tessellated)
    {
        Poly3i(Direction, n + 0, n + 1, n + 3);
        Poly3i(Direction, n + 0, n + 3, n + 2);
        Poly3i(Direction, n + 2, n + 3, n + 7);
        Poly3i(Direction, n + 2, n + 7, n + 6);
        Poly3i(Direction, n + 6, n + 7, n + 5);
        Poly3i(Direction, n + 6, n + 5, n + 4);
        Poly3i(Direction, n + 4, n + 5, n + 1);
        Poly3i(Direction, n + 4, n + 1, n + 0);
        Poly3i(Direction, n + 3, n + 1, n + 5);
        Poly3i(Direction, n + 3, n + 5, n + 7);
        Poly3i(Direction, n + 0, n + 2, n + 6);
        Poly3i(Direction, n + 0, n + 6, n + 4);        
    }
    else
    {
        Poly4i(Direction, n + 0, n + 1, n + 3, n + 2);
        Poly4i(Direction, n + 2, n + 3, n + 7, n + 6);
        Poly4i(Direction, n + 6, n + 7, n + 5, n + 4);
        Poly4i(Direction, n + 4, n + 5, n + 1, n + 0);
        Poly4i(Direction, n + 3, n + 1, n + 5, n + 7);
        Poly4i(Direction, n + 0, n + 2, n + 6, n + 4);
    }
    return;
}

event bool Build()
{
    // End:0x2F
    if(((Height_Z <= float(0)) || Width_Y <= float(0)) || Breadth_X <= float(0))
    {
        return BadParameters();
    }
    // End:0x72
    if(Hollow && ((Height_Z <= WallThickness) || Width_Y <= WallThickness) || Breadth_X <= WallThickness)
    {
        return BadParameters();
    }
    // End:0xD4
    if(Hollow && Tessellated)
    {
        return BadParameters("The 'Tessellated' option can't be specified with the 'Hollow' option.");
    }
    BeginBrush(false, GroupName);
    BuildCube(1, Breadth_X, Width_Y, Height_Z, Tessellated);
    // End:0x13A
    if(Hollow)
    {
        BuildCube(-1, Breadth_X - WallThickness, Width_Y - WallThickness, Height_Z - WallThickness, Tessellated);
    }
    return EndBrush();
    return;
}

defaultproperties
{
    Height_Z=256
    Width_Y=256
    Breadth_X=256
    WallThickness=16
    GroupName=Cube
    BitmapFilename="BBCube"
    ToolTip="Cube"
}