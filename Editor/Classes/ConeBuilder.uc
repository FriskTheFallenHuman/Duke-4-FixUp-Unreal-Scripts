/*******************************************************************************
 * ConeBuilder generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ConeBuilder extends BrushBuilder;

var() float Height;
var() float CapHeight;
var() float OuterRadius;
var() float InnerRadius;
var() int Sides;
var() name GroupName;
var() bool AlignToSide;
var() bool Hollow;

function BuildCone(int Direction, bool AlignToSide, int Sides, float Height, float Radius, name Item)
{
    local int n, i, j, q, Ofs;

    n = GetVertexCount();
    // End:0x32
    if(AlignToSide)
    {
        Radius /= Cos(3.141593 / float(Sides));
        Ofs = 1;
    }
    i = 0;
    J0x39:

    // End:0xB7 [Loop If]
    if(i < Sides)
    {
        Vertex3f(Radius * Sin((((2 * float(i)) + float(Ofs)) * 3.141593) / float(Sides)), Radius * Cos((((2 * float(i)) + float(Ofs)) * 3.141593) / float(Sides)), 0);
        ++ i;
        // [Loop Continue]
        goto J0x39;
    }
    Vertex3f(0, 0, Height);
    i = 0;
    J0xD3:

    // End:0x12A [Loop If]
    if(i < Sides)
    {
        Poly3i(Direction, n + i, n + Sides, n + ((i + 1) % Sides), Item);
        ++ i;
        // [Loop Continue]
        goto J0xD3;
    }
    return;
}

function bool Build()
{
    local int i;

    // End:0x13
    if(Sides < 3)
    {
        return BadParameters();
    }
    // End:0x34
    if((Height <= float(0)) || OuterRadius <= float(0))
    {
        return BadParameters();
    }
    // End:0x63
    if(Hollow && (InnerRadius <= float(0)) || InnerRadius >= OuterRadius)
    {
        return BadParameters();
    }
    // End:0x84
    if(Hollow && CapHeight > Height)
    {
        return BadParameters();
    }
    // End:0xB6
    if(Hollow && (CapHeight == Height) && InnerRadius == OuterRadius)
    {
        return BadParameters();
    }
    BeginBrush(false, GroupName);
    BuildCone(1, AlignToSide, Sides, Height, OuterRadius, 'Top');
    // End:0x18B
    if(Hollow)
    {
        BuildCone(-1, AlignToSide, Sides, CapHeight, InnerRadius, 'Cap');
        // End:0x188
        if(OuterRadius != InnerRadius)
        {
            i = 0;
            J0x127:

            // End:0x188 [Loop If]
            if(i < Sides)
            {
                Poly4i(1, i, (i + 1) % Sides, (Sides + 1) + ((i + 1) % Sides), (Sides + 1) + i, 'Bottom');
                ++ i;
                // [Loop Continue]
                goto J0x127;
            }
        }        
    }
    else
    {
        PolyBegin(1, 'Bottom');
        i = 0;
        J0x19E:

        // End:0x1C2 [Loop If]
        if(i < Sides)
        {
            Polyi(i);
            ++ i;
            // [Loop Continue]
            goto J0x19E;
        }
        PolyEnd();
    }
    return EndBrush();
    return;
}

defaultproperties
{
    Height=256
    CapHeight=256
    OuterRadius=512
    InnerRadius=384
    Sides=8
    GroupName=Cone
    AlignToSide=true
    BitmapFilename="BBCone"
    ToolTip="Cone"
}