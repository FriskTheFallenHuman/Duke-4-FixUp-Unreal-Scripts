/*******************************************************************************
 * UdpServerQuery generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UdpServerQuery extends UdpLink
    transient
    config
    collapsecategories
    hidecategories(movement,Collision,Lighting,LightColor);

var() name QueryName;
var int CurrentQueryNum;
var globalconfig string GameName;

function PreBeginPlay()
{
    local int boundport;

    GetAnimationStart(QueryName);
    boundport = ReadBinary(Level.Game.GetServerPort(), true);
    // End:0x62
    if(boundport == 0)
    {
        Localize("UdpServerQuery: Port failed to bind.");
        return;
    }
    Localize(("UdpServerQuery: Port " $ string(boundport)) $ " successfully bound.");
    return;
}

function PostBeginPlay()
{
    local UdpBeacon Beacon;

    // End:0x26
    foreach RotateVectorAroundAxis(class'UdpBeacon', Beacon)
    {
        Beacon.UdpServerQueryPort = Port;        
    }    
    super(Actor).PostBeginPlay();
    return;
}

event ReceivedText(IpAddr Addr, string Text)
{
    local string Query;
    local bool QueryRemaining;
    local int QueryNum, PacketNum;

    ++ CurrentQueryNum;
    // End:0x1A
    if(CurrentQueryNum > 100)
    {
        CurrentQueryNum = 1;
    }
    QueryNum = CurrentQueryNum;
    Query = Text;
    // End:0x48
    if(Query == "")
    {
        QueryRemaining = false;        
    }
    else
    {
        QueryRemaining = true;
    }
    J0x50:

    // End:0x9C [Loop If]
    if(QueryRemaining)
    {
        Query = ParseQuery(Addr, Query, QueryNum, PacketNum);
        // End:0x91
        if(Query == "")
        {
            QueryRemaining = false;            
        }
        else
        {
            QueryRemaining = true;
        }
        // [Loop Continue]
        goto J0x50;
    }
    return;
}

function bool ParseNextQuery(string Query, out string QueryType, out string QueryValue, out string QueryRest, out string FinalPacket)
{
    local string TempQuery;
    local int ClosingSlash;

    // End:0x0F
    if(Query == "")
    {
        return false;
    }
    // End:0x17A
    if(Left(Query, 1) == "\\")
    {
        ClosingSlash = InStr(Right(Query, Len(Query) - 1), "\\");
        // End:0x4D
        if(ClosingSlash == 0)
        {
            return false;
        }
        TempQuery = Query;
        QueryType = Right(Query, Len(Query) - 1);
        QueryType = Left(QueryType, ClosingSlash);
        QueryRest = Right(Query, Len(Query) - (Len(QueryType) + 2));
        // End:0xD7
        if((QueryRest == "") || Len(QueryRest) == 1)
        {
            FinalPacket = "final";
            return true;            
        }
        else
        {
            // End:0xEB
            if(Left(QueryRest, 1) == "\\")
            {
                return true;
            }
        }
        ClosingSlash = InStr(QueryRest, "\\");
        // End:0x11D
        if(ClosingSlash >= 0)
        {
            QueryValue = Left(QueryRest, ClosingSlash);            
        }
        else
        {
            QueryValue = QueryRest;
        }
        QueryRest = Right(Query, Len(Query) - ((Len(QueryType) + Len(QueryValue)) + 3));
        // End:0x175
        if(QueryRest == "")
        {
            FinalPacket = "final";
            return true;            
        }
        else
        {
            return true;
        }        
    }
    else
    {
        return false;
    }
    return;
}

function string ParseQuery(IpAddr Addr, coerce string Query, int QueryNum, out int PacketNum)
{
    local string QueryType, QueryValue, QueryRest, ValidationString;
    local bool Result;
    local string FinalPacket;

    Result = ParseNextQuery(Query, QueryType, QueryValue, QueryRest, FinalPacket);
    // End:0x34
    if(! Result)
    {
        return "";
    }
    // End:0x72
    if(QueryType == "basic")
    {
        Result = SendQueryPacket(Addr, GetBasic(), QueryNum, ++ PacketNum, FinalPacket);        
    }
    else
    {
        // End:0xAF
        if(QueryType == "info")
        {
            Result = SendQueryPacket(Addr, GetInfo(), QueryNum, ++ PacketNum, FinalPacket);            
        }
        else
        {
            // End:0xED
            if(QueryType == "rules")
            {
                Result = SendQueryPacket(Addr, GetRules(), QueryNum, ++ PacketNum, FinalPacket);                
            }
            else
            {
                // End:0x16A
                if(QueryType == "players")
                {
                    // End:0x144
                    if(Level.Game.NumPlayers > 0)
                    {
                        Result = SendPlayers(Addr, QueryNum, PacketNum, FinalPacket);                        
                    }
                    else
                    {
                        Result = SendQueryPacket(Addr, "", QueryNum, PacketNum, FinalPacket);
                    }                    
                }
                else
                {
                    // End:0x25E
                    if(QueryType == "status")
                    {
                        Result = SendQueryPacket(Addr, GetBasic(), QueryNum, ++ PacketNum, "");
                        Result = SendQueryPacket(Addr, GetInfo(), QueryNum, ++ PacketNum, "");
                        // End:0x214
                        if(Level.Game.NumPlayers == 0)
                        {
                            Result = SendQueryPacket(Addr, GetRules(), QueryNum, ++ PacketNum, FinalPacket);                            
                        }
                        else
                        {
                            Result = SendQueryPacket(Addr, GetRules(), QueryNum, ++ PacketNum, "");
                            Result = SendPlayers(Addr, QueryNum, PacketNum, FinalPacket);
                        }                        
                    }
                    else
                    {
                        // End:0x2A5
                        if(QueryType == "echo")
                        {
                            Result = SendQueryPacket(Addr, "\\echo\\" $ QueryValue, QueryNum, ++ PacketNum, FinalPacket);                            
                        }
                        else
                        {
                            // End:0x305
                            if(QueryType == "secure")
                            {
                                ValidationString = "\\validate\\" $ SendBinary(QueryValue, GameName);
                                Result = SendQueryPacket(Addr, ValidationString, QueryNum, ++ PacketNum, FinalPacket);                                
                            }
                            else
                            {
                                // End:0x351
                                if(QueryType == "level_property")
                                {
                                    Result = SendQueryPacket(Addr, GetLevelProperty(QueryValue), QueryNum, ++ PacketNum, FinalPacket);                                    
                                }
                                else
                                {
                                    // End:0x39C
                                    if(QueryType == "game_property")
                                    {
                                        Result = SendQueryPacket(Addr, GetGameProperty(QueryValue), QueryNum, ++ PacketNum, FinalPacket);                                        
                                    }
                                    else
                                    {
                                        // End:0x3E9
                                        if(QueryType == "player_property")
                                        {
                                            Result = SendQueryPacket(Addr, GetPlayerProperty(QueryValue), QueryNum, ++ PacketNum, FinalPacket);                                            
                                        }
                                        else
                                        {
                                            Localize("UdpServerQuery: Unknown query: " $ QueryType);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    // End:0x44F
    if(! Result)
    {
        Localize("UdpServerQuery: Error responding to query.");
    }
    return QueryRest;
    return;
}

function bool SendQueryPacket(IpAddr Addr, coerce string SendString, int QueryNum, int PacketNum, string FinalPacket)
{
    local bool Result;

    // End:0x29
    if(FinalPacket == "final")
    {
        SendString = SendString $ "\\final\\";
    }
    SendString = (((SendString $ "\\queryid\\") $ string(QueryNum)) $ ".") $ string(PacketNum);
    Result = ZoneActors(Addr, SendString);
    return Result;
    return;
}

function string GetBasic()
{
    local string ResultSet;

    ResultSet = "\\gamename\\" $ GameName;
    ResultSet = (ResultSet $ "\\gamever\\") $ Level.EngineVersion;
    ResultSet = (ResultSet $ "\\minnetver\\") $ Level.MinNetVersion;
    ResultSet = (ResultSet $ "\\location\\") $ string(Level.Game.GameReplicationInfo.GameRegion);
    return ResultSet;
    return;
}

function string GetInfo()
{
    local string ResultSet;

    ResultSet = "\\hostname\\" $ Level.Game.GameReplicationInfo.ServerName;
    ResultSet = (ResultSet $ "\\hostport\\") $ string(Level.Game.GetServerPort());
    ResultSet = (ResultSet $ "\\maptitle\\") $ Level.Title;
    ResultSet = (ResultSet $ "\\mapname\\") $ Left(string(Level), InStr(string(Level), "."));
    ResultSet = (ResultSet $ "\\gametype\\") $ Level.Game.GameName;
    ResultSet = (ResultSet $ "\\numplayers\\") $ string(Level.Game.NumPlayers);
    ResultSet = (ResultSet $ "\\maxplayers\\") $ string(Level.Game.MaxPlayers);
    ResultSet = (ResultSet $ "\\numbots\\") $ string(Level.Game.NumBots);
    ResultSet = ResultSet $ "\\gamemode\\openplaying";
    ResultSet = (ResultSet $ "\\gamever\\") $ Level.EngineVersion;
    ResultSet = (ResultSet $ "\\minnetver\\") $ Level.MinNetVersion;
    ResultSet = ResultSet $ Level.Game.GetInfo();
    return ResultSet;
    return;
}

function string GetRules()
{
    local string ResultSet;

    ResultSet = Level.Game.GetRules();
    // End:0x8C
    if(Level.Game.GameReplicationInfo.AdminName != "")
    {
        ResultSet = (ResultSet $ "\\AdminName\\") $ Level.Game.GameReplicationInfo.AdminName;
    }
    // End:0xF9
    if(Level.Game.GameReplicationInfo.AdminEmail != "")
    {
        ResultSet = (ResultSet $ "\\AdminEMail\\") $ Level.Game.GameReplicationInfo.AdminEmail;
    }
    return ResultSet;
    return;
}

function string GetPlayer(PlayerPawn P, int PlayerNum)
{
    local string ResultSet, SkinName, FaceName;

    ResultSet = (("\\player_" $ string(PlayerNum)) $ "\\") $ P.PlayerReplicationInfo.PlayerName;
    ResultSet = (((ResultSet $ "\\frags_") $ string(PlayerNum)) $ "\\") $ string(P.PlayerReplicationInfo.Score);
    ResultSet = (((ResultSet $ "\\ping_") $ string(PlayerNum)) $ "\\") $ P.ConsoleCommand("GETPING");
    ResultSet = (((ResultSet $ "\\team_") $ string(PlayerNum)) $ "\\") $ string(P.PlayerReplicationInfo.Team);
    ResultSet = (((ResultSet $ "\\mesh_") $ string(PlayerNum)) $ "\\") $ P.MenuName;
    return ResultSet;
    return;
}

function bool SendPlayers(IpAddr Addr, int QueryNum, out int PacketNum, string FinalPacket)
{
    local Pawn P;
    local int i;
    local bool Result, SendResult;

    i = 0;
    Result = false;
    P = Level.PawnList;
    J0x24:

    // End:0x118 [Loop If]
    if(P == none)
    {
        // End:0x100
        if(P.ClassForName('PlayerPawn'))
        {
            // End:0xAC
            if((P.NextPawn != none) && FinalPacket == "final")
            {
                SendResult = SendQueryPacket(Addr, GetPlayer(PlayerPawn(P), i), QueryNum, ++ PacketNum, "final");                
            }
            else
            {
                SendResult = SendQueryPacket(Addr, GetPlayer(PlayerPawn(P), i), QueryNum, ++ PacketNum, "");
            }
            ++ i;
            Result = Result || SendResult;
        }
        P = P.NextPawn;
        // [Loop Continue]
        goto J0x24;
    }
    // End:0x172
    if(i != Level.Game.NumPlayers)
    {
        Warn("Level.PawnList out of sync with Game.NumPlayers");
    }
    return Result;
    return;
}

function string GetLevelProperty(string Prop)
{
    local string ResultSet;

    ResultSet = (("\\" $ Prop) $ "\\") $ Level.SetPropertyText(Prop);
    return ResultSet;
    return;
}

function string GetGameProperty(string Prop)
{
    local string ResultSet;

    ResultSet = (("\\" $ Prop) $ "\\") $ Level.Game.SetPropertyText(Prop);
    return ResultSet;
    return;
}

function string GetPlayerProperty(string Prop)
{
    local string ResultSet;
    local int i;
    local PlayerPawn P;

    // End:0x5B
    foreach RotateVectorAroundAxis(class'PlayerPawn', P)
    {
        ++ i;
        ResultSet = (((((ResultSet $ "\\") $ Prop) $ "_") $ string(i)) $ "\\") $ P.SetPropertyText(Prop);        
    }    
    return ResultSet;
    return;
}

defaultproperties
{
    QueryName=MasterUplink
    GameName="dnf"
}