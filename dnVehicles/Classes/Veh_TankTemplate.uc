/*******************************************************************************
 * Veh_TankTemplate generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Veh_TankTemplate extends Vehicle_MeqonWheeled
    collapsecategories;

const NUM_VWHEEL_PER_TREAD = 4;

struct STankTreadMaterialProperties
{
    var() noexport MaterialEx TreadMaterial "Material to use in the TexPanner for this tread.";
    var() noexport int TreadSectionIndex "Section on the mesh for this tread.";
    var() noexport float PanRate "Rate at which this tread's texture would pan for maximum forward.  (Scaled by input given to tread which will be -1.0 to 1.0).";
    var() noexport Rotator PanDirection "Direction to pan the texture.";
};

struct SWheelInfo
{
    var() Vector WheelOffset;
    var() bool bUseWheelClass;
};

struct STankTreadInfo
{
    var() noexport SWheelInfo WheelInfo[4] "Offset from origin of vehicle to place virtual wheel. 0 - front, 1 - mid, 2 - back.";
    var() noexport SVehiclePhysicsWheelProperties WheelProps "Properties to apply to all the wheels.";
    var() noexport SVehiclePhysicsAxleProperties WheelAxleProps "Axle properties to apply to all the wheels.";
    var() noexport SVehiclePhysicsAxleProperties PrimaryAxleProps "Axle properties to apply to the primary axle for this tread.";
    var() noexport SVehiclePhysicsMotorProperties MotorProps "Properties to apply to the motor.";
    var() noexport SVehiclePhysicsAxleProperties MotorAxleProps "Axle properties to apply to all the wheels.";
    var() noexport SVehiclePhysicsGearboxProperties GearboxProps "Properties to apply to the gearbox.";
    var() noexport STankTreadMaterialProperties MaterialProps "Properties about the material for this tread.";
    var array<VehicleComponent> Components;
    var TexPanner TreadPanner;
};

var() STankTreadInfo RightTread;
var() STankTreadInfo LeftTread;
var() noexport float PivotInputScale "Used to scale down inputs when turning in place.  Anything over 1.0 is ignored.";
var() noexport float DriveTurnRatio "The ratio of the turning wheels' acceleration to the outer wheels' acceleration.";
var() noexport float TurnSpeedScale "Scales the speed while turning";
var() const class<VDifferential> DifferentialClass;
var() const class<VMotor> MotorClass;
var() const class<VGearbox> GearboxClass;
var() const class<VAxle> AxleClass;
var() const class<VWheel> WheelClass;
var float DriverAccel;
var float DriverHeading;
var float RightInput;
var float LeftInput;
var float DesiredRightInput;
var float DesiredLeftInput;
var bool bIsMoving;
var(VehicleSound) noexport name EngineStartSoundName "VoicePack entry to play when we start our engine.";
var(VehicleSound) noexport name EngineStopSoundName "VoicePack entry to play when we stop our engine.";
var(VehicleSound) array<SVehicleGearSounds> GearSounds;
var(VehicleSound) float EngineSoundVolume;
var Engine.Object.ESoundSlot LastEngineSlot;
var float EngineSoundStartTime;
var VGearbox Gearbox;
var bool bWasAccel;
var int LastGearIndex;
var float SpinRateThreshold;

function PreBeginPlay()
{
    super.PreBeginPlay();
    InitializeTread(RightTread, RightTread.Components, RightTread.TreadPanner);
    InitializeTread(LeftTread, LeftTread.Components, LeftTread.TreadPanner);
    return;
}

function InitializeTread(STankTreadInfo TreadInfo, out array<VehicleComponent> Components, out TexPanner TreadPanner)
{
    local class<VMotor> LocalMotorClass;
    local class<VGearbox> LocalGearboxClass;
    local class<VAxle> LocalAxleClass;
    local class<VDifferential> LocalDifferentialClass;
    local class<VWheel> LocalWheelClass;
    local int i, j;
    local VDifferential PrimaryDifferential, SecondaryDifferentialA, SecondaryDifferentialB;
    local VAxle PrimaryAxle, SecondaryAxleA, SecondaryAxleB;
    local VWheel Wheel[4];
    local VMotor motor;

    LocalMotorClass = MotorClass;
    LocalGearboxClass = GearboxClass;
    LocalAxleClass = AxleClass;
    LocalDifferentialClass = DifferentialClass;
    LocalWheelClass = WheelClass;
    // End:0x4E
    if(LocalMotorClass != none)
    {
        LocalMotorClass = class'VMotor';
    }
    // End:0x65
    if(LocalGearboxClass != none)
    {
        LocalGearboxClass = class'VGearbox';
    }
    // End:0x7C
    if(LocalAxleClass != none)
    {
        LocalAxleClass = class'VAxle';
    }
    // End:0x93
    if(LocalDifferentialClass != none)
    {
        LocalDifferentialClass = class'VDifferential';
    }
    // End:0xAA
    if(LocalWheelClass != none)
    {
        LocalWheelClass = class'VWheel';
    }
    i = 0;
    J0xB1:

    // End:0x213 [Loop If]
    if(i < 4)
    {
        Wheel[i] = new (Level.XLevel) LocalWheelClass;
        Wheel[i].SetWheelOffsets(self, TreadInfo.WheelInfo[i].WheelOffset);
        Wheel[i].WheelProps = TreadInfo.WheelProps;
        Wheel[i].AxleProps = TreadInfo.WheelAxleProps;
        Wheel[i].bCaresAboutAcceleration = false;
        Components[Components.Add(1)] = Wheel[i];
        // End:0x209
        if((TreadInfo.WheelInfo[i].bUseWheelClass && TreadInfo.WheelProps.WheelClass == none) && IsA(TreadInfo.WheelProps.WheelClass, class'VehicleSpecialPart_TireEx'))
        {
            MountOnSpawn[MountOnSpawn.Add(1)].SpawnClass = class<VehicleSpecialPart_TireEx>(TreadInfo.WheelProps.WheelClass);
            Wheel[i].bHasTireActor = true;
        }
        ++ i;
        // [Loop Continue]
        goto J0xB1;
    }
    motor = new (Level.XLevel) LocalMotorClass;
    motor.AxleProps = TreadInfo.MotorAxleProps;
    motor.MotorProps = TreadInfo.MotorProps;
    motor.bCaresAboutAcceleration = false;
    Components[Components.Add(1)] = motor;
    Gearbox = new (Level.XLevel) LocalGearboxClass;
    Gearbox.GearboxProps = TreadInfo.GearboxProps;
    Gearbox.bCaresAboutAcceleration = false;
    Components[Components.Add(1)] = Gearbox;
    PrimaryAxle = new (Level.XLevel) LocalAxleClass;
    PrimaryAxle.AxleProps = TreadInfo.PrimaryAxleProps;
    Gearbox.PrimaryAxle = motor;
    Gearbox.SecondaryAxle = PrimaryAxle;
    SecondaryAxleA = new (Level.XLevel) LocalAxleClass;
    SecondaryAxleA.AxleProps = TreadInfo.PrimaryAxleProps;
    SecondaryAxleB = new (Level.XLevel) LocalAxleClass;
    SecondaryAxleB.AxleProps = TreadInfo.PrimaryAxleProps;
    PrimaryDifferential = new (Level.XLevel) LocalDifferentialClass;
    PrimaryDifferential.Ratio = 0.5;
    PrimaryDifferential.Lock = 1;
    PrimaryDifferential.InputAxle = PrimaryAxle;
    PrimaryDifferential.PrimaryOutputAxle = SecondaryAxleA;
    PrimaryDifferential.SecondaryOutputAxle = SecondaryAxleB;
    SecondaryDifferentialA = new (Level.XLevel) LocalDifferentialClass;
    SecondaryDifferentialA.Ratio = 0.5;
    SecondaryDifferentialA.Lock = 1;
    SecondaryDifferentialA.InputAxle = SecondaryAxleA;
    SecondaryDifferentialA.PrimaryOutputAxle = Wheel[0];
    SecondaryDifferentialA.SecondaryOutputAxle = Wheel[1];
    SecondaryDifferentialB = new (Level.XLevel) LocalDifferentialClass;
    SecondaryDifferentialB.Ratio = 0.5;
    SecondaryDifferentialB.Lock = 1;
    SecondaryDifferentialB.InputAxle = SecondaryAxleB;
    SecondaryDifferentialB.PrimaryOutputAxle = Wheel[2];
    SecondaryDifferentialB.SecondaryOutputAxle = Wheel[3];
    i = 0;
    J0x557:

    // End:0x57E [Loop If]
    if(i < 4)
    {
        MaybeInitializeVehicleComponent(Wheel[i]);
        ++ i;
        // [Loop Continue]
        goto J0x557;
    }
    MaybeInitializeVehicleComponent(PrimaryAxle);
    MaybeInitializeVehicleComponent(SecondaryAxleA);
    MaybeInitializeVehicleComponent(SecondaryAxleB);
    MaybeInitializeVehicleComponent(PrimaryDifferential);
    MaybeInitializeVehicleComponent(SecondaryDifferentialA);
    MaybeInitializeVehicleComponent(SecondaryDifferentialB);
    MaybeInitializeVehicleComponent(Gearbox);
    MaybeInitializeVehicleComponent(motor);
    // End:0x672
    if(TreadInfo.MaterialProps.TreadSectionIndex >= 0)
    {
        TreadPanner = new (Level.XLevel) class'TexPanner';
        TreadPanner.Material = TreadInfo.MaterialProps.TreadMaterial;
        TreadPanner.PanDirection = TreadInfo.MaterialProps.PanDirection;
        TreadPanner.PanRate = 0;
        VisibleActors(TreadInfo.MaterialProps.TreadSectionIndex, TreadPanner);
    }
    return;
}

final simulated function PlayEngineSound(name EngineSoundName, optional bool bStopLast, optional Engine.Object.EStopSoundRule StopSoundRule, optional float FadeOutTime)
{
    local int Index;

    // End:0x1A
    if(FadeOutTime == 0)
    {
        FadeOutTime = 0.2;
    }
    // End:0x52
    if(StopSound(LastEngineSlot))
    {
        // End:0x3E
        if(bStopLast)
        {
            GetAnimGroup(LastEngineSlot, StopSoundRule);            
        }
        else
        {
            ClearAnimAll(LastEngineSlot, FadeOutTime, 0, 1);
        }
    }
    // End:0x161
    if(NameForString(EngineSoundName, 'None') && FindSoundIndex(EngineSoundName, Index))
    {
        // End:0x90
        if(int(LastEngineSlot) == int(22))
        {
            LastEngineSlot = 23;            
        }
        else
        {
            LastEngineSlot = 22;
        }
        // End:0xDE
        if(string(VoicePack.default.CharacterSounds[Index].SoundInfo.Slots) > 1)
        {
            VoicePack.default.CharacterSounds[Index].SoundInfo.Slots.Empty();
        }
        VoicePack.default.CharacterSounds[Index].SoundInfo.Slots[0] = LastEngineSlot;
        VoicePack.default.CharacterSounds[Index].SoundInfo.Volume = EngineSoundVolume;
        PlaySoundInfo(1, VoicePack.default.CharacterSounds[Index].SoundInfo);
        EngineSoundStartTime = Level.GameTimeSeconds;
    }
    return;
}

simulated function TurnIgnitionOn()
{
    super(VehicleBase).TurnIgnitionOn();
    PlayEngineSound(EngineStartSoundName);
    return;
}

simulated function TurnIgnitionOff()
{
    super(VehicleBase).TurnIgnitionOff();
    PlayEngineSound(EngineStopSoundName);
    return;
}

final simulated function UpdateInputs(float DeltaTime)
{
    local int i;
    local Pawn Driver;
    local float LastLeftInput, LastRightInput;

    // End:0x28
    if(DriverHeading == 0)
    {
        DesiredLeftInput = DriverAccel;
        DesiredRightInput = DriverAccel;        
    }
    else
    {
        // End:0x60
        if(DriverAccel == 0)
        {
            DesiredLeftInput = - DriverHeading * PivotInputScale;
            DesiredRightInput = DriverHeading * PivotInputScale;            
        }
        else
        {
            // End:0x10E
            if(DriverAccel > 0)
            {
                // End:0xC4
                if(DriverHeading > 0)
                {
                    DesiredLeftInput = DriverAccel * Lerp(DriverHeading, 1, DriveTurnRatio * TurnSpeedScale);
                    DesiredRightInput = DriverAccel * Lerp(DriverHeading, 1, TurnSpeedScale);                    
                }
                else
                {
                    DesiredLeftInput = DriverAccel * Lerp(- DriverHeading, 1, TurnSpeedScale);
                    DesiredRightInput = DriverAccel * Lerp(- DriverHeading, 1, DriveTurnRatio * TurnSpeedScale);
                }                
            }
            else
            {
                // End:0x163
                if(DriverHeading > 0)
                {
                    DesiredLeftInput = DriverAccel * Lerp(DriverHeading, 1, DriveTurnRatio * TurnSpeedScale);
                    DesiredRightInput = DriverAccel * Lerp(DriverHeading, 1, TurnSpeedScale);                    
                }
                else
                {
                    DesiredLeftInput = DriverAccel * Lerp(- DriverHeading, 1, TurnSpeedScale);
                    DesiredRightInput = DriverAccel * Lerp(- DriverHeading, 1, DriveTurnRatio * TurnSpeedScale);
                }
            }
        }
    }
    LastRightInput = RightInput;
    LastLeftInput = LeftInput;
    // End:0x202
    if(RightInput != DesiredRightInput)
    {
        RightInput = FClamp(RightInput + (((DesiredRightInput - RightInput) * 10) * DeltaTime), -1, 1);
    }
    // End:0x244
    if(LeftInput != DesiredLeftInput)
    {
        LeftInput = FClamp(LeftInput + (((DesiredLeftInput - LeftInput) * 10) * DeltaTime), -1, 1);
    }
    // End:0x28C
    if(((LastRightInput > 0) && RightInput < 0) || (LastRightInput < 0) && RightInput > 0)
    {
        RightTreadChangedDirection();
    }
    // End:0x2D4
    if(((LastLeftInput > 0) && LeftInput < 0) || (LastLeftInput < 0) && LeftInput > 0)
    {
        LeftTreadChangedDirection();
    }
    Driver = VehicleGetDriver();
    // End:0x342
    if(Abs(RightInput) < 1E-05)
    {
        i = string(RightTread.Components) - 1;
        J0x305:

        // End:0x33F [Loop If]
        if(i >= 0)
        {
            RightTread.Components[i].AcceleratorNeutral(self, Driver != none);
            -- i;
            // [Loop Continue]
            goto J0x305;
        }        
    }
    else
    {
        i = string(RightTread.Components) - 1;
        J0x356:

        // End:0x38C [Loop If]
        if(i >= 0)
        {
            RightTread.Components[i].AcceleratorAdjust(self, RightInput);
            -- i;
            // [Loop Continue]
            goto J0x356;
        }
    }
    // End:0x3EE
    if(Abs(LeftInput) < 1E-05)
    {
        i = string(LeftTread.Components) - 1;
        J0x3B1:

        // End:0x3EB [Loop If]
        if(i >= 0)
        {
            LeftTread.Components[i].AcceleratorNeutral(self, Driver != none);
            -- i;
            // [Loop Continue]
            goto J0x3B1;
        }        
    }
    else
    {
        i = string(LeftTread.Components) - 1;
        J0x402:

        // End:0x438 [Loop If]
        if(i >= 0)
        {
            LeftTread.Components[i].AcceleratorAdjust(self, LeftInput);
            -- i;
            // [Loop Continue]
            goto J0x402;
        }
    }
    // End:0x461
    if((LeftInput == 0) && RightInput == 0)
    {
        EnableHandBrake();        
    }
    else
    {
        DisableHandBrake();
    }
    // End:0x4A3
    if(RightTread.TreadPanner == none)
    {
        RightTread.TreadPanner.PanRate = RightTread.MaterialProps.PanRate * RightInput;
    }
    // End:0x4DF
    if(LeftTread.TreadPanner == none)
    {
        LeftTread.TreadPanner.PanRate = LeftTread.MaterialProps.PanRate * LeftInput;
    }
    return;
}

simulated function Tick_Internal(float DeltaTime)
{
    local Vector KAngVelocity;
    local float CurrentSpinRate;
    local bool bWasMoving, bIsAccel;
    local int GearIndex;
    local SVehicleGearSounds GearSound;

    bWasMoving = bIsMoving;
    super(VehicleBase).Tick_Internal(DeltaTime);
    UpdateInputs(DeltaTime);
    GetConstraint(KAngVelocity);
    CurrentSpinRate = Abs(KAngVelocity.Z);
    bIsMoving = (CurrentSpinRate > SpinRateThreshold) || int(oVehicleDirection) != int(1);
    // End:0x121
    if((GearIndex >= 0) && GearIndex < string(GearSounds))
    {
        GearSound.bStopOnFootOff = GearSounds[GearIndex].bStopOnFootOff;
        GearSound.StopOnFootOffRule = GearSounds[GearIndex].StopOnFootOffRule;
        GearSound.UpshiftLoopName = GearSounds[GearIndex].UpshiftLoopName;
        GearSound.DownshiftLoopName = GearSounds[GearIndex].DownshiftLoopName;
        GearSound.FootOffFastName = GearSounds[GearIndex].FootOffFastName;
        GearSound.FootOffSlowName = GearSounds[GearIndex].FootOffSlowName;
    }
    // End:0x1C6
    if(bIsMoving != bWasMoving)
    {
        // End:0x154
        if(bIsMoving)
        {
            HandleTankStartedMoving();
            PlayEngineSound(GearSound.UpshiftLoopName);            
        }
        else
        {
            HandleTankStoppedMoving();
            // End:0x1A1
            if(StopSound(LastEngineSlot) && OverrideMixerGroupVolume(LastEngineSlot) >= 0)
            {
                PlayEngineSound(GearSound.FootOffFastName, GearSound.bStopOnFootOff, GearSound.StopOnFootOffRule);                
            }
            else
            {
                PlayEngineSound(GearSound.FootOffSlowName, GearSound.bStopOnFootOff, GearSound.StopOnFootOffRule);
            }
        }
    }
    GearIndex = Gearbox.CurrentGear;
    bWasAccel = bIsAccel;
    LastGearIndex = GearIndex;
    return;
}

simulated function HandleTankStartedMoving()
{
    DecoActivity(0, 'TankStartedMoving');
    return;
}

simulated function HandleTankStoppedMoving()
{
    DecoActivity(0, 'TankStoppedMoving');
    return;
}

function RightTreadChangedDirection()
{
    return;
}

function LeftTreadChangedDirection()
{
    return;
}

simulated function Accelerator_Adjust(float DeltaTime, float RelativeAcceleration, Pawn Driver)
{
    super.Accelerator_Adjust(DeltaTime, RelativeAcceleration, Driver);
    DriverAccel = RelativeAcceleration;
    return;
}

simulated function Accelerator_Neutral(float DeltaTime, optional bool bNoDriver)
{
    super.Accelerator_Neutral(DeltaTime, bNoDriver);
    DriverAccel = 0;
    return;
}

simulated function Heading_Adjust(float DeltaTime, float TurnPercent)
{
    super.Heading_Adjust(DeltaTime, TurnPercent);
    DriverHeading = TurnPercent;
    return;
}

simulated function Heading_Neutral(float DeltaTime)
{
    super.Heading_Neutral(DeltaTime);
    DriverHeading = 0;
    return;
}

simulated event bool CanAccelerateForwards()
{
    return true;
    return;
}

simulated event bool CanAccelerateReverse()
{
    return true;
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    local int i;

    super(VehicleBase).RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.RegisterMaterialClass(RightTread.WheelProps.WheelClass);
    PrecacheIndex.RegisterAnimationControllerEntry(RightTread.MaterialProps.TreadMaterial);
    PrecacheIndex.RegisterMaterialClass(LeftTread.WheelProps.WheelClass);
    PrecacheIndex.RegisterAnimationControllerEntry(LeftTread.MaterialProps.TreadMaterial);
    PrecacheIndex.InitAnimationControllerEx(VoicePack, EngineStartSoundName);
    PrecacheIndex.InitAnimationControllerEx(VoicePack, EngineStopSoundName);
    i = string(GearSounds) - 1;
    J0xB8:

    // End:0x155 [Loop If]
    if(i >= 0)
    {
        PrecacheIndex.InitAnimationControllerEx(VoicePack, GearSounds[i].UpshiftLoopName);
        PrecacheIndex.InitAnimationControllerEx(VoicePack, GearSounds[i].DownshiftLoopName);
        PrecacheIndex.InitAnimationControllerEx(VoicePack, GearSounds[i].FootOffSlowName);
        PrecacheIndex.InitAnimationControllerEx(VoicePack, GearSounds[i].FootOffFastName);
        -- i;
        // [Loop Continue]
        goto J0xB8;
    }
    return;
}

defaultproperties
{
    PivotInputScale=0.7
    DriveTurnRatio=0.25
    TurnSpeedScale=1
    EngineStartSoundName=EngineStart
    EngineStopSoundName=EngineStop
    EngineSoundVolume=1
    LastEngineSlot=23
    SpinRateThreshold=0.25
    ControlStiffness=16384
    ForwardVelocityThreshold=100
    HealthPrefab=0
    Mass=1000
}