/*******************************************************************************
 * Vehicle_MeqonWheeled_Custom generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Vehicle_MeqonWheeled_Custom extends Vehicle_MeqonWheeled
    collapsecategories;

struct SCustomWheelDef
{
    var() bool bFlipWheel;
    var() Vector LocationOffset;
    var() Rotator RotationOffset;
    var() noexport float DrawScaleOverride "Set to something non-zero to override the default scale of the wheel class specified by WheelProps.";
};

var() noexport array<SCustomWheelDef> WheelDefs "A list of custom wheel definitions.";
var() noexport SVehiclePhysicsAxleProperties AxleProps "Axle properties.";
var() noexport SVehiclePhysicsWheelProperties WheelProps "Wheel properties.";
var() noexport name RollingSoundName "VoicePack entry to use for rolling sound.";
var() noexport float MaxRollingVelocity "Maximum input for velocity in rolling sound volume/pitch computations.";
var() noexport Range RollingVolumeRange "Min/Max output volume for rolling sound.";
var() noexport Range RollingPitchRange "Min/Max output pitch for rolling sound.";
var() noexport float RollingPitchFadeRate "Rate to transition rolling sound pitch.";
var bool bInAir;
var bool bJustLanded;

simulated event PreBeginPlay()
{
    local int i, j;
    local VWheel Wheel;

    i = 0;
    J0x07:

    // End:0x137 [Loop If]
    if(i < string(WheelDefs))
    {
        Wheel = new (Level.XLevel) class'VWheel';
        Wheel.SetWheelOffsets(self, WheelDefs[i].LocationOffset, WheelDefs[i].RotationOffset);
        Wheel.bFlipWheel = WheelDefs[i].bFlipWheel;
        Wheel.AxleProps = AxleProps;
        Wheel.WheelProps = WheelProps;
        // End:0x122
        if(WheelProps.WheelClass == none)
        {
            Wheel.bHasTireActor = true;
            j = MountOnSpawn.Add(1);
            MountOnSpawn[j].SpawnClass = WheelProps.WheelClass;
            MountOnSpawn[j].MountPrefab.DrawScaleOverride = WheelDefs[i].DrawScaleOverride;
        }
        MaybeInitializeVehicleComponent(Wheel);
        ++ i;
        // [Loop Continue]
        goto J0x07;
    }
    super.PreBeginPlay();
    FindAndPlaySound(RollingSoundName);
    UpdateRollingVolumeAndPitch();
    return;
}

simulated function Tick_Internal(float DeltaTime)
{
    super(VehicleBase).Tick_Internal(DeltaTime);
    // End:0x47
    if(int(Physics) == int(18))
    {
        // End:0x38
        if(! HasGroundContact())
        {
            // End:0x35
            if(! bInAir)
            {
                NotifyJumped();
            }            
        }
        else
        {
            // End:0x47
            if(bInAir)
            {
                NotifyLanded();
            }
        }
    }
    UpdateRollingVolumeAndPitch();
    return;
}

function NotifyJumped()
{
    bInAir = true;
    return;
}

function NotifyLanded()
{
    bInAir = false;
    return;
}

final simulated function UpdateRollingVolumeAndPitch()
{
    local float Scale;
    local byte TargetSoundVolume, TargetSoundPitch;

    // End:0x0E
    if(AmbientSound != none)
    {
        return;
    }
    // End:0x2A
    if(bInAir)
    {
        SoundVolume = 0;
        SoundPitch = 64;        
    }
    else
    {
        Scale = FMin(1, VSize(Velocity) / MaxRollingVelocity);
        SoundVolume = byte(255 * Lerp(Scale, RollingVolumeRange.Min, RollingVolumeRange.Max));
        TargetSoundPitch = byte(64 * Lerp(Scale, RollingPitchRange.Min, RollingPitchRange.Max));
        // End:0xAE
        if(bJustLanded)
        {
            SoundPitch = TargetSoundPitch;            
        }
        else
        {
            // End:0xF3
            if(! Level.bPaused)
            {
                SoundPitch += byte(int((float(int(TargetSoundPitch) - int(SoundPitch)) * RollingPitchFadeRate) * Level.TimeDeltaSeconds));
            }
        }
    }
    bJustLanded = false;
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super(VehicleBase).RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.RegisterMaterialClass(WheelProps.WheelClass);
    PrecacheIndex.InitAnimationControllerEx(VoicePack, RollingSoundName);
    return;
}

defaultproperties
{
    AxleProps=(MomentOfInertia=4)
    WheelProps=(SteerRatio=0,BrakeRatio=0,HandbrakeRatio=0,FrictionStatic=6,FrictionDynamic=6,FrictionRolling=0.002,StiffnessLateral=250,StiffnessLongitudinal=250,Restitution=0,SuspensionSpringLength=1,SuspensionSpringDamping=1250,SuspensionSpringStiffness=50000,Radius=0,Mass=0,WheelClass=none)
    MaxRollingVelocity=450
    RollingVolumeRange=(Min=0,Max=1)
    RollingPitchRange=(Min=1,Max=1.5)
    RollingPitchFadeRate=4
    NeutralBrakeTorque=0
    NoDriverBrakeTorque=0
    LowSpeedBrakeTorque=0
    WheelMaterialType=none
    HealthPrefab=0
}