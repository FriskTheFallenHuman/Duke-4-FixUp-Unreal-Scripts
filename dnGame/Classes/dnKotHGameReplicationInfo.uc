/*******************************************************************************
 * dnKotHGameReplicationInfo generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnKotHGameReplicationInfo extends dnDeathmatchGameReplicationInfo
    config
    collapsecategories
    dependson(dnKingOfTheHill_Marker)
    dependson(dnKingOfTheHill_Projector)
    hidecategories(movement,Collision,Lighting,LightColor);

var int TimeLimit;
var int FragLimit;
var int RoundTimeLimit;
var int GoalTeamScore;
var dnTeamInfo Teams[4];
var int MinPlayers;
var bool bOffenseDefenseGame;
var int OffensiveTeam;
var dnKingOfTheHill_Projector Projector;

replication
{
    // Pos:0x000
    reliable if(int(Role) == int(ROLE_Authority))
        FragLimit, GoalTeamScore, 
        MinPlayers, OffensiveTeam, 
        RoundTimeLimit, Teams, 
        TimeLimit, bOffenseDefenseGame;
}

simulated function dnKingOfTheHill_Projector GetProjector()
{
    // End:0x76
    if(Projector != none)
    {
        Projector = EmptyTouchClasses(class'dnKingOfTheHill_Projector');
        Projector.Group[0] = EmptyTouchClasses(class'dnKingOfTheHill_ProjectorTeam0');
        Projector.Group[1] = EmptyTouchClasses(class'dnKingOfTheHill_ProjectorTeam1');
        Projector.Group[2] = Projector;
        Projector.TurnOffGroup();
    }
    // End:0xBA
    if(Cylinder != none)
    {
        Cylinder = EmptyTouchClasses(class'dnKingOfTheHill_Cylinder');
        Cylinder.GetOverlayEffectAlpha(class'DukeMultiplayerAssets'.default.CylinderMesh);
        Cylinder.GetZoneLastRenderTime(true);
    }
    return Projector;
    return;
}

simulated function PostBeginPlay()
{
    super(GameReplicationInfo).PostBeginPlay();
    GetProjector();
    return;
}

simulated function PostNetInitial()
{
    local dnKingOfTheHill_Marker marker;

    super(GameReplicationInfo).PostNetInitial();
    // End:0x16
    if(int(Role) >= int(ROLE_Authority))
    {
        return;
    }
    // End:0x4E
    foreach RotateVectorAroundAxis(class'dnKingOfTheHill_Marker', marker)
    {
        // End:0x4D
        if(marker.bActive)
        {
            marker.SetActive(true);
            // End:0x4E
            break;
        }        
    }    
    return;
}
