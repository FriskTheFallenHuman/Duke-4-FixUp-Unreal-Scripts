/*******************************************************************************
 * BeamTrail generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class BeamTrail extends BeamSystem
    collapsecategories
    hidecategories(Filter,HeatVision,Interactivity,Karma,KarmaObject,KarmaOverride,Lighting,Networking,ParticleSystemBase,ParticleTextureInfo,SoftParticleSystem,Sound,SpawnOnDestroyed);

var() noexport float MinSegmentDelay "Minimum amount of time between segment creations.";
var() noexport float MinSegmentDistSq "Minimum length (squared) of a segment before a new one can be made.";
var float NextSegmentTime;
var Vector LastSegmentEnd;

simulated function bool VerifySelf()
{
    return (MountParent == none) && super(Actor).VerifySelf();
    return;
}

simulated function PostBeginPlay()
{
    local Projectile OwnerProjectile;
    local Vector startLocation;
    local float ProjectileVelocitySq;

    super.PostBeginPlay();
    Disable('Tick');
    // End:0x136
    if((((int(Level.NetMode) == int(NM_Client)) && Owner == none) && Owner.Instigator == none) && Owner.Instigator.Weapon == none)
    {
        OwnerProjectile = Projectile(Owner);
        // End:0x133
        if(OwnerProjectile == none)
        {
            Owner.Instigator.Weapon.GetBarrelLocation(int(OwnerProjectile.MuzzleFireIndex), startLocation);
            ProjectileVelocitySq = VSizeSquared(OwnerProjectile.Velocity);
            // End:0x121
            if(ProjectileVelocitySq != float(0))
            {
                startLocation = (((Location - startLocation) Dot OwnerProjectile.Velocity) / ProjectileVelocitySq) * OwnerProjectile.Velocity;
            }
            startLocation = Location - startLocation;
        }        
    }
    else
    {
        startLocation = Location;
    }
    startLocation = Location;
    // End:0x182
    if(Enabled)
    {
        NextSegmentTime = Level.GameTimeSeconds;
        LastSegmentEnd = startLocation;
        AddSegmentActorAndLoc(self, startLocation, true);
    }
    return;
}

simulated function ResetTrail()
{
    FirstSegment = -1;
    LastSegment = -1;
    FirstFreeSegment = -1;
    ActiveSegmentCount = 0;
    AddSegmentActorAndLoc(self, Location, true);
    return;
}

simulated function ReInitialize(Vector Loc)
{
    local Vector startLocation;

    // End:0x0D
    if(! IsMP())
    {
        return;
    }
    FirstSegment = -1;
    LastSegment = -1;
    FirstFreeSegment = -1;
    ActiveSegmentCount = 0;
    Segments.Empty();
    BeamSegments.Empty();
    SetDesiredRotation(Loc);
    startLocation = Loc;
    Enabled = true;
    return;
}

simulated function DisableBeamTrail()
{
    // End:0x0D
    if(! IsMP())
    {
        return;
    }
    Enabled = false;
    return;
}

simulated event Tick(float DeltaSeconds)
{
    local int i;

    // End:0x1E
    if((MountParent != none) && ActiveSegmentCount == 0)
    {
        RemoveTouchClass();
        return;
    }
    // End:0xD0
    if(((Enabled == true) && Level.GameTimeSeconds >= NextSegmentTime) && VSizeSquared(Location - LastSegmentEnd) >= MinSegmentDistSq)
    {
        i = AddSegmentActorAndLoc(self, Location, true);
        // End:0xA9
        if(Segments[i].PrevSegment != -1)
        {
            Segments[Segments[i].PrevSegment].Actor2 = none;
        }
        LastSegmentEnd = Location;
        NextSegmentTime = Level.GameTimeSeconds + MinSegmentDelay;
    }
    super.Tick(DeltaSeconds);
    return;
}

simulated event DrawscaleChanged(float DefaultDrawscaleRatio, Vector DefaultDrawscale3DRatio)
{
    super(Actor).DrawscaleChanged(DefaultDrawscaleRatio, DefaultDrawscale3DRatio);
    BeamStartWidth = default.BeamStartWidth * DefaultDrawscaleRatio;
    BeamEndWidth = default.BeamEndWidth * DefaultDrawscaleRatio;
    return;
}

defaultproperties
{
    MinSegmentDelay=0.05
    MinSegmentDistSq=1
    TraceEnabled=false
    BeamStartWidth=1
    BeamEndWidth=1
    DefaultLifetime=1
    AlphaAnimMid=0
    AlphaAnimEnd=0
    AlphaMidPercent=0.75
    BeamTexture='dt_effects.Beams.lightbeam1aRC'
    BeamType=1
    bForceNonFinalBlendBlooms=true
    bTickOnlyRecent=false
    bTickOnlyZoneRecent=false
    bTickOnlyWhenOwnerShould=true
    Style=3
    AlphaSortGroup=8
    ActorColorList(0)=(ActorColor=(R=255,G=205,B=205,A=205),ActorColor_LightEx=none,ActorColor_LightExScale=(X=0,Y=0,Z=0),id=Generic0)
    RemoteRole=1
}