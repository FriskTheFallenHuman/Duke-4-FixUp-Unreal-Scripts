/*******************************************************************************
 * MP_DualPistol generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MP_DualPistol extends PistolBase;

var() travel class<DualPistolDummy> SecondPistolClass;
var travel DualPistolDummy SecondPistol;
var() travel SPistolInfo PistolInfo[2];
var travel bool bSecondPistolHadMoreAmmo;

replication
{
    // Pos:0x000
    reliable if(int(Role) == int(ROLE_Authority))
        SecondPistol;
}

static event GiveToAI(Pawn Other)
{
    local class<Weapon> PistolClass;

    // End:0x0E
    if(Other != none)
    {
        return;
    }
    PistolClass = Other.GetPistolClass();
    // End:0x32
    if(PistolClass != none)
    {
        return;
    }
    Other.Level.Game.GiveInventoryTo(Other, PistolClass, true);
    Other.Level.Game.GiveInventoryTo(Other, PistolClass, true);
    return;
}

event ApplyAIScale(Pawn Other)
{
    super(Weapon).ApplyAIScale(Other);
    // End:0x44
    if(SecondPistol == none)
    {
        SecondPistol.RemoveActorColor(SecondPistol.DrawScale * Other.DrawScale);
    }
    return;
}

animevent simulated function SpawnClip()
{
    return;
}

simulated function bool CanActivate()
{
    return false;
    return;
}

simulated function bool CanActivateNow()
{
    return false;
    return;
}

event DrawscaleChanged(float DefaultDrawscaleRatio, Vector DefaultDrawscale3DRatio)
{
    super(Actor).DrawscaleChanged(DefaultDrawscaleRatio, DefaultDrawscale3DRatio);
    // End:0x33
    if(SecondPistol == none)
    {
        SecondPistol.SetActorColorEx(DrawScale, DrawScale3D);
    }
    return;
}

simulated function DestroyWeaponSupportActors()
{
    super(Weapon).DestroyWeaponSupportActors();
    // End:0x1F
    if(SecondPistol == none)
    {
        SecondPistol.RemoveTouchClass();
    }
    return;
}

simulated event UnhideWeapon()
{
    super(Weapon).UnhideWeapon();
    // End:0x20
    if(SecondPistol == none)
    {
        SecondPistol.GetZoneLastRenderTime(false);
    }
    return;
}

simulated function HideWeapon()
{
    super(Weapon).HideWeapon();
    // End:0x20
    if(SecondPistol == none)
    {
        SecondPistol.GetZoneLastRenderTime(true);
    }
    return;
}

simulated function AttachSupportActors()
{
    super(Weapon).AttachSupportActors();
    // End:0x24
    if(SecondPistol == none)
    {
        SecondPistol.MoveActor(Instigator);
    }
    // End:0x6B
    if(string(MuzzleFlashActors) != 2)
    {
        Warn("dual pistol setup with incorrect number of muzzles");
    }
    MuzzleFlashActors[0].MoveActor(SecondPistol);
    return;
}

simulated function DetachSupportActors()
{
    super(Weapon).DetachSupportActors();
    // End:0x1F
    if(SecondPistol == none)
    {
        SecondPistol.GetGravity();
    }
    return;
}

animevent simulated function Fire_Effects(optional EventInfo AnimEventInfo)
{
    super(Weapon).Fire_Effects(AnimEventInfo);
    UpdateBullets(PistolInfo[MuzzleFireIndex]);
    return;
}

simulated function GetCurrentBarrelLocation(out Vector OutBarrelLocation, optional out Rotator OutBarrelRotation)
{
    local name MuzzleBoneName;

    // End:0x86
    if((MuzzleFireIndex == 1) && SecondPistol.SetScaleModifier() == none)
    {
        MuzzleBoneName = WeaponConfig.default.MuzzleInfo[MuzzleFireIndex].MuzzleBoneName;
        OutBarrelLocation = SecondPistol.SetScaleModifier().CreateAnimGroup(MuzzleBoneName, true);
        OutBarrelRotation = SecondPistol.SetScaleModifier().SwapChannel(MuzzleBoneName, true);        
    }
    else
    {
        super(Weapon).GetCurrentBarrelLocation(OutBarrelLocation, OutBarrelRotation);
    }
    return;
}

simulated function GetCurrentShellEjectionLocation(out Vector OutEjectionLocation, out Rotator OutEjectionRotation)
{
    local name ShellEjectionBoneName;

    // End:0xB2
    if((MuzzleFireIndex == 0) && SecondPistol.SetScaleModifier() == none)
    {
        ShellEjectionBoneName = WeaponConfig.default.MuzzleInfo[MuzzleFireIndex].ShellEjectionBoneName;
        Log(NameForString(ShellEjectionBoneName, 'None'), "No shell ejection bone set");
        OutEjectionLocation = SecondPistol.SetScaleModifier().CreateAnimGroup(ShellEjectionBoneName, true);
        OutEjectionRotation = SecondPistol.SetScaleModifier().SwapChannel(ShellEjectionBoneName, true);        
    }
    else
    {
        DoRespawn(OutEjectionLocation, OutEjectionRotation);
    }
    return;
}

simulated function SetWeaponAnimState(name NewWeaponAnimState, optional bool bForceReset)
{
    super(Weapon).SetWeaponAnimState(NewWeaponAnimState);
    // End:0x44
    if((SecondPistol == none) && NameForString(NewWeaponAnimState, 'None'))
    {
        SecondPistol.SetAnimControllerState(NewWeaponAnimState, bForceReset);
    }
    return;
}

simulated function StartActivate()
{
    local int BulletsInClips[2];

    super(ActivatableInventory).StartActivate();
    // End:0x5D
    if(PistolInfo[0].MaxBulletsInClip != PistolInfo[1].MaxBulletsInClip)
    {
        Warn("pistol logic won't work with differing clip sizing");
    }
    BulletsInClips[1] = AmmoLoaded / 2;
    // End:0x90
    if(bSecondPistolHadMoreAmmo && (AmmoLoaded & 1) == 1)
    {
        ++ BulletsInClips[1];
    }
    BulletsInClips[0] = AmmoLoaded - BulletsInClips[1];
    PistolInfo[0].BulletsFired = PistolInfo[0].MaxBulletsInClip - BulletsInClips[0];
    PistolInfo[1].BulletsFired = PistolInfo[1].MaxBulletsInClip - BulletsInClips[1];
    return;
}

simulated function int CalculateReservedAmmo()
{
    bSecondPistolHadMoreAmmo = PistolInfo[1].MaxBulletsInClip > PistolInfo[0].MaxBulletsInClip;
    return PistolInfo[0].MaxBulletsInClip + PistolInfo[1].MaxBulletsInClip;
    return;
}

function SetupDualPistol(class<Inventory> InvClass, MP_Pistol SinglePistol)
{
    local class<DualPistolDummy> DualPistolDummyClass;
    local int i;

    GetOverlayEffectAlpha(SinglePistol.Mesh);
    RemoveActorColor(SinglePistol.DrawScale);
    i = SinglePistol.VisibleCollidingActors() - 1;
    J0x3A:

    // End:0x69 [Loop If]
    if(i >= 0)
    {
        VisibleActors(i, SinglePistol.RadiusActors(i));
        -- i;
        // [Loop Continue]
        goto J0x3A;
    }
    DualPistolDummyClass = SecondPistolClass;
    // End:0x8B
    if(DualPistolDummyClass != none)
    {
        SecondPistolClass = class'DualPistolDummy';
    }
    SecondPistol = EmptyTouchClasses(SecondPistolClass, Owner);
    // End:0xC9
    if(InvClass.default.Mesh != none)
    {
        SecondPistol.GetOverlayEffectAlpha(Mesh);        
    }
    else
    {
        SecondPistol.GetOverlayEffectAlpha(InvClass.default.Mesh);
    }
    // End:0x14D
    if(string(InvClass.default.Skins) > 0)
    {
        i = 0;
        J0x102:

        // End:0x14D [Loop If]
        if(i < string(InvClass.default.Skins))
        {
            SecondPistol.VisibleActors(i, InvClass.default.Skins[i]);
            ++ i;
            // [Loop Continue]
            goto J0x102;
        }
    }
    SecondPistol.bTravel = true;
    SecondPistol.RemoveActorColor(SinglePistol.DrawScale);
    PistolInfo[0].PistolActor = self;
    PistolInfo[1].PistolActor = SecondPistol;
    return;
}

function DualPistolSpawnPickup(KarmaActor PistolActor, int AmmoCharge, optional float OverrideDrawScale)
{
    // End:0x3F
    if(PistolActor.RadiusActors(0) != PistolActor.MountedActorListActors(0))
    {
        SpawnPickupFor(class'Pistol_Gold', AmmoCharge, PistolActor, OverrideDrawScale);        
    }
    else
    {
        SpawnPickupFor(class'Pistol', AmmoCharge, PistolActor, OverrideDrawScale);
    }
    return;
}

function Pickup SpawnPickupForWeapon(optional float OverrideDrawScale, optional bool bNoPawnInteractions)
{
    DualPistolSpawnPickup(self, AmmoLoaded / 2, OverrideDrawScale);
    DualPistolSpawnPickup(SecondPistol, AmmoLoaded - (AmmoLoaded / 2), OverrideDrawScale);
    return none;
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super.RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.RegisterMaterialClass(class'DualPistolDummy');
    return;
}

defaultproperties
{
    SecondPistolClass='DualPistolDummy'
    PistolInfo[0]=(PistolActor=none,BulletsFired=0,MaxBulletsInClip=15,MaxBulletsInChamber=8)
    PistolInfo[1]=(PistolActor=none,BulletsFired=0,MaxBulletsInClip=15,MaxBulletsInChamber=8)
    BaseDamagePerShot=6
    WeaponConfig='MP_DualPistolWeaponConfig'
    AmmoLoaded=30
    dnInventoryCategory=1
    dnCategoryPriority=1
    CommandAlias="UseWeapon dnGame.MP_DualPistol"
    InventoryReferenceClass='MP_PistolBase'
    HUDPickupEventIcon=0
    AnimationControllerClass='dnAnimationControllerEx_DualPistol_Primary'
    Mesh='c_dnWeapon.Pistol'
    Skins(0)='mt_skins6.1911Pistol.PigCop1911_BS'
    VoicePack='SoundConfig.Inventory.VoicePack_Pistol'
}