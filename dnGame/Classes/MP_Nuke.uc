/*******************************************************************************
 * MP_Nuke generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MP_Nuke extends MP_Weapon;

const NUKE_WS_PreIdle = 16;

var class<NukeWeaponSubConfig> NukeSubConfig;
var int CountdownIndex;
var float NukeArmTime;
var bool bFinishedPreIdle;

replication
{
    // Pos:0x000
    reliable if(int(Role) == int(ROLE_Authority))
        rClientCountdown;
}

simulated event ScriptGetActorColor()
{
    // End:0x29
    if(NukeArmTime < 0)
    {
        Sleep('Generic0', NukeSubConfig.default.NukeUnarmedColor);        
    }
    else
    {
        Sleep('Generic0', FClamp((Level.GameTimeSeconds - NukeArmTime) / NukeSubConfig.default.NukeArmColorTransitionTime, 0, 1) == NukeSubConfig.default.NukeUnarmedColor);        
    }
    super(Actor).ScriptGetActorColor();
    return;
}

simulated function name GetWeaponAnimReq(byte WeaponStateReq, optional out byte byForceReset)
{
    // End:0x13
    if(int(WeaponStateReq) == 16)
    {
        return 'PreIdle';
    }
    return super(Weapon).GetWeaponAnimReq(WeaponStateReq, byForceReset);
    return;
}

simulated function WpnPreIdle()
{
    SetWeaponState(16);
    return;
}

simulated function bool CanFire()
{
    return super.CanFire() && IsCountdownComplete();
    return;
}

simulated function FireSuccess(bool bContinueFire)
{
    DisableCountdownPanel();
    super(Weapon).FireSuccess(bContinueFire);
    return;
}

simulated function rClientCountdown(int NewCountdownIndex)
{
    NukeSubConfig.default.CountdownInfo[NewCountdownIndex].Smacker.SetFrame(0);
    VisibleActors(NukeSubConfig.default.CountdownMaterialIndex, NukeSubConfig.default.CountdownInfo[NewCountdownIndex].Material);
    CountdownIndex = NewCountdownIndex;
    return;
}

function CountDown()
{
    local int Index;

    ++ CountdownIndex;
    rClientCountdown(CountdownIndex);
    // End:0xAD
    if(FindSoundIndex(NukeSubConfig.default.CountdownInfo[CountdownIndex].SoundName, Index))
    {
        VoicePack.default.CharacterSounds[Index].SoundInfo.SoundLocationOverride.OverrideType = 2;
        VoicePack.default.CharacterSounds[Index].SoundInfo.SoundLocationOverride.Location3D = Location;
        PlaySoundInfo(3, VoicePack.default.CharacterSounds[Index].SoundInfo);
    }
    // End:0xBE
    if(IsCountdownComplete())
    {
        Spawn('CountDown');
    }
    return;
}

simulated function DisableCountdownPanel()
{
    VisibleActors(NukeSubConfig.default.CountdownMaterialIndex, NukeSubConfig.default.PanelOffMaterial);
    return;
}

function SetInitialCountdownState()
{
    CountdownIndex = -1;
    CountDown();
    Destroy(NukeSubConfig.default.CountDownTimer, true, 'CountDown');
    return;
}

simulated function bool IsCountdownComplete()
{
    return CountdownIndex >= (string(NukeSubConfig.default.CountdownInfo) - 1);
    return;
}

animevent simulated function SwitchRocket()
{
    NukeArmTime = -1;
    return;
}

animevent simulated function TapRocket()
{
    NukeArmTime = Level.GameTimeSeconds;
    return;
}

simulated function ResetProjectileMeshes()
{
    // End:0x2D
    if(InsertingClip == none)
    {
        InsertingClip.SetPhysics(WeaponClipMount, self);
        InsertingClip.GetZoneLastRenderTime(true);
    }
    // End:0x5F
    if(EjectingClip == none)
    {
        EjectingClip.SetPhysics(WeaponClipMount, self);
        EjectingClip.GetZoneLastRenderTime(bHidden);
    }
    return;
}

animevent simulated function Remove_Rocket(optional EventInfo AnimEventInfo)
{
    // End:0x65
    if((EjectingClip == none) && Instigator.bIsPlayerPawn)
    {
        EjectingClip.GetZoneLastRenderTime(false);
        EjectingClip.DestroyOnDismount = false;
        EjectingClip.GetGravity();
        EjectingClip.SetPhysics(UserInsertClipMount, Instigator);
    }
    return;
}

animevent simulated function Mount_Nuke_Player(optional EventInfo AnimEventInfo)
{
    // End:0x4E
    if((EjectingClip == none) && Instigator.bIsPlayerPawn)
    {
        EjectingClip.GetZoneLastRenderTime(true);
        EjectingClip.DestroyOnDismount = false;
        EjectingClip.GetGravity();
    }
    // End:0xB3
    if((InsertingClip == none) && Instigator.bIsPlayerPawn)
    {
        InsertingClip.GetZoneLastRenderTime(false);
        InsertingClip.DestroyOnDismount = false;
        InsertingClip.GetGravity();
        InsertingClip.SetPhysics(UserInsertClipMount, Instigator);
    }
    return;
}

animevent simulated function Mount_Nuke_Weapon(optional EventInfo AnimEventInfo)
{
    // End:0x3E
    if(InsertingClip == none)
    {
        InsertingClip.DestroyOnDismount = false;
        InsertingClip.GetGravity();
        InsertingClip.SetPhysics(WeaponClipMount, self);
    }
    return;
}

simulated event int GetLoadedAmmo()
{
    return 1;
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    local int i;

    super(InteractiveActor).RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.SetChannelGridState('PreIdle', AnimationControllerClass, Mesh);
    PrecacheIndex.SetAnimPairState(EvaluateCompare(WeaponConfig.default.WeaponAnimName, 'PreIdle'));
    // End:0xF4
    if(NukeSubConfig == none)
    {
        PrecacheIndex.RegisterAnimationControllerEntry(NukeSubConfig.default.PanelOffMaterial);
        i = string(NukeSubConfig.default.CountdownInfo) - 1;
        J0x8C:

        // End:0xF4 [Loop If]
        if(i >= 0)
        {
            PrecacheIndex.InitAnimationControllerEx(VoicePack, NukeSubConfig.default.CountdownInfo[i].SoundName);
            PrecacheIndex.RegisterAnimationControllerEntry(NukeSubConfig.default.CountdownInfo[i].Material);
            -- i;
            // [Loop Continue]
            goto J0x8C;
        }
    }
    return;
}

state PreIdle
{
    simulated event BeginState()
    {
        WpnPreIdle();
        return;
    }

    simulated function EndState()
    {
        bFinishedPreIdle = true;
        return;
    }

    animevent simulated function WeaponCallback_AnimEnd()
    {
        TryState('idle');
        return;
    }
    stop;
}

state idle
{
    simulated event BeginState()
    {
        super.BeginState();
        // End:0x1D
        if(bFinishedPreIdle)
        {
            SetInitialCountdownState();
            bFinishedPreIdle = false;
        }
        return;
    }
    stop;
}

state Activating
{
    simulated function BeginState()
    {
        DisableCountdownPanel();
        ResetProjectileMeshes();
        super.BeginState();
        return;
    }
    stop;
}

state Deactivating
{
    simulated event BeginState()
    {
        Spawn('CountDown');
        ResetProjectileMeshes();
        super.BeginState();
        return;
    }
    stop;
}

defaultproperties
{
    NukeSubConfig='NukeWeaponSubConfig'
    WeaponConfig='MP_NukeWeaponConfig'
    HUDAmmoClipIcon=6
    FullClipRenderObject='sm_class_dukeitems.rpg_Nuke.rpg_Nuke'
    EmptyClipRenderObject='sm_class_dukeitems.rpg_rocket.rpg_rocket'
    UserInsertClipMount=(bDontActuallyMount=false,bHideable=true,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=true,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=true,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=mount_handleft,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=2,DismountPhysics=0)
    WeaponClipMount=(bDontActuallyMount=false,bHideable=true,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=true,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=true,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=misile_shaft,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=2,DismountPhysics=0)
    dnInventoryCategory=4
    dnCategoryPriority=2
    CommandAlias="UseWeapon dnGame.MP_Nuke"
    InventoryReferenceClass='MP_Nuke'
    PickupClass='MP_NukePickup'
    bIsPrimaryWeapon=true
    HUDPickupEventIcon=5
    AutoRegisterIKClasses(0)='IKSystemInfo_Shotgun'
    AnimationControllerClass='dnAnimationControllerEx_Nuke'
    bNeedsScriptActorColor=true
    Mesh='c_dnWeapon.RPG'
    SoundVolume=200
    SoundRadius=1600
    SoundInnerRadius=800
    VoicePack='SoundConfig.Inventory.VoicePack_Nuke'
}