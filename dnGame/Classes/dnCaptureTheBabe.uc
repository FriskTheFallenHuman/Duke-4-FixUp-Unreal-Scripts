/*******************************************************************************
 * dnCaptureTheBabe generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnCaptureTheBabe extends dnDeathmatchGame_TeamDM
    config(Multiplayer)
    collapsecategories
    hidecategories(movement,Collision,Lighting,LightColor);

var() config int CaptureLimit;
var bool OnlyUseCTBSpawns;
var() config int GamePointsForCapture;
var() config int GamePointsForKillingCarrier;
var DukeMultiPlayer LastCaptureBy;
var Color TeamColor[2];

function PostBeginPlay()
{
    super.PostBeginPlay();
    return;
}

event InitGame(string Options, out string Error)
{
    CaptureLimit = GetIntOption(Options, "CaptureLimit", CaptureLimit);
    FragLimit = float(CaptureLimit);
    GamePointsForCapture = GetIntOption(Options, "GamePointsForCapture", GamePointsForCapture);
    GamePointsForKillingCarrier = GetIntOption(Options, "GamePointsForKillingCarrier", GamePointsForKillingCarrier);
    GoalTeamScore = CaptureLimit;
    super.InitGame(Options, Error);
    return;
}

function ScorePoint(DukeMultiPlayer P)
{
    local dnDeathmatchGameReplicationInfo GRI;

    GRI = dnDeathmatchGameReplicationInfo(GameReplicationInfo);
    // End:0x52
    if(GRI == none)
    {
        // End:0x52
        if((GRI.CountDown > 0) || GRI.ShowWinnerSeconds > 0)
        {
            return;
        }
    }
    ++ Teams[int(P.PlayerReplicationInfo.Team)].Score;
    P.PlayerReplicationInfo.Score += GamePointsForCapture;
    LastCaptureBy = P;
    super.ScorePoint(P);
    // End:0x120
    if(((CaptureLimit > 0) && P.bIsPlayer) && Teams[int(P.PlayerReplicationInfo.Team)].Score >= CaptureLimit)
    {
        RequestEndGame("teamscorelimit");
    }
    return;
}

function ScoreKill(Pawn Killer, Pawn Other)
{
    // End:0x6E
    if(((Other.CarriedActor == none) && Other.CarriedActor.Class != class'dnCaptureTheBabe_Babe') && Killer == Other)
    {
        Killer.PlayerReplicationInfo.Score += GamePointsForKillingCarrier;
    }
    return;
}

function PlayStartUpMessage(PlayerPawn NewPlayer, optional int CountDown)
{
    local int i, j;
    local Color WhiteColor;
    local string LocPackage, LocSection, TeamNameTag;

    LocSection = "dnCaptureTheBabe";
    LocPackage = "dngame";
    NewPlayer.ClearProgressMessages();
    NewPlayer.SetProgressMessage(LocSection, "GameName", LocPackage, ++ i, true);
    // End:0x15A
    if(int(NewPlayer.PlayerReplicationInfo.Team) < 2)
    {
        NewPlayer.SetProgressColor(TeamColor[int(NewPlayer.PlayerReplicationInfo.Team)], i);
        TeamNameTag = "TeamNamesMessages0";
        // End:0x10C
        if(int(NewPlayer.PlayerReplicationInfo.Team) == 1)
        {
            TeamNameTag = "TeamNamesMessages1";
        }
        NewPlayer.SetProgressMessageSplitByStr(LocSection, "StartupTeamMessage", TeamNameTag, "StartupTeamTrailer", LocPackage, ++ i);
    }
    // End:0x1A5
    if(CaptureLimit > 0)
    {
        NewPlayer.SetProgressMessageSplitByNum(LocSection, "GameGoalPrefix", CaptureLimit, "GameGoal", LocPackage, ++ i);
    }
    // End:0x206
    if(RoundTimeLimit > 0)
    {
        NewPlayer.SetProgressMessageSplitByNum(LocSection, "TimeLimitMessageStart", RoundTimeLimit / 60, "TimeLimitMessageEnd", LocPackage, ++ i);
    }
    NewPlayer.SetProgressMessage(LocSection, "RulesMessage0", LocPackage, ++ i);
    // End:0x28E
    if(bFriendlyFire)
    {
        NewPlayer.SetProgressMessage("dnDeathmatchGame_TeamDM", "FriendlyFireOnMessage", LocPackage, ++ i);        
    }
    else
    {
        NewPlayer.SetProgressMessage("dnDeathmatchGame_TeamDM", "FriendlyFireOffMessage", LocPackage, ++ i);
    }
    NewPlayer.SetProgressTime(float(StartupMessageDuration));
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super.RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.SetAnimPairState('ButtSlap');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_MP_Announcer', 'Announce_BabeCapture_Blue');
    PrecacheIndex.InitAnimationControllerEx(class'VoicePack_MP_Announcer', 'Announce_BabeCapture_Red');
    return;
}

defaultproperties
{
    CaptureLimit=5
    OnlyUseCTBSpawns=true
    GamePointsForCapture=1
    TeamColor[0]=(R=70,G=70,B=240,A=0)
    TeamColor[1]=(R=153,G=0,B=0,A=0)
    GoalTeamScore=5
    FragLimit=20
    GameGoal="<?int?dnGame.dnCaptureTheBabe.GameGoal?>"
    MinDefaultInventory(0)='MP_MightyFoot'
    MinDefaultInventory(1)='MP_Pistol'
    MinDefaultInventory(2)='Upgrade_ZoomMode'
    MinDefaultInventory(3)='dnCaptureTheBabe_BabeRevolver'
    GameType=2
    HUDType='dnCTBHUD'
    MapPrefix=""
    BeaconName=""
    GameName="<?int?dnGame.dnCaptureTheBabe.GameName?>"
    ShortGameName="<?int?dnGame.dnCaptureTheBabe.ShortGameName?>"
    OverridePlayerClass='dnCaptureTheBabe_Player'
}