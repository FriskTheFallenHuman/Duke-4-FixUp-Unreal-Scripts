/*******************************************************************************
 * HUDLineGraph generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class HUDLineGraph extends Object;

struct SLineGraphAxisInfo
{
    var float Value;
    var string Label;
    var int ColorIndex;
    var int PixelValue;
};

struct SLineGraphLineInfo
{
    var int ColorIndex;
    var float Value;
    var float LastPoint;
    var float ThisPoint;
};

struct SDataInfo
{
    var float Min;
    var float Max;
    var float Avg;
    var float RunningSum;
    var int NumValues;
    var float ClearInterval;
    var string str;
    var float TimeLastClear;
};

var LevelInfo Level;
var() float MinValue;
var() float MaxValue;
var() float GraphLength;
var() float GraphHeight;
var() TextureCanvas DrawCanvas;
var() Texture MyCopySource;
var() array<byte> DrawColors;
var int BGColorIndex;
var int LineColorIndex;
var int AxisColorIndex;
var int CurrentPixel;
var float LastY;
var float Alpha;
var array<SLineGraphAxisInfo> AxisInfo;
var array<SDataInfo> DataInfo;
var array<SLineGraphLineInfo> LineInfo;
var Color HeadingColor;
var Color WhiteColor;

function CopyAndInit(HUDLineGraph Graph)
{
    local int i;

    Graph.MinValue = MinValue;
    Graph.MaxValue = MaxValue;
    Graph.GraphLength = GraphLength;
    Graph.GraphHeight = GraphHeight;
    Graph.BGColorIndex = BGColorIndex;
    Graph.LineColorIndex = LineColorIndex;
    Graph.AxisColorIndex = AxisColorIndex;
    Graph.Alpha = Alpha;
    Graph.AxisInfo = AxisInfo;
    i = 0;
    J0xC4:

    // End:0xFE [Loop If]
    if(i < string(AxisInfo))
    {
        DataInfo[i].TimeLastClear = Level.GameTimeSeconds;
        ++ i;
        // [Loop Continue]
        goto J0xC4;
    }
    return;
}

function InitDrawSurface(Level XLevel)
{
    local int i;

    DrawCanvas = class'TextureCanvas'.static.StaticCreateTextureCanvas(MyCopySource, XLevel);
    DrawCanvas.SaveTimeDemo(false);
    DrawCanvas.Print(true);
    i = 0;
    J0x43:

    // End:0xB8 [Loop If]
    if(i < string(AxisInfo))
    {
        AxisInfo[i].PixelValue = int(float(DrawCanvas.VSize) - (((AxisInfo[i].Value - MinValue) / (MaxValue - MinValue)) * float(DrawCanvas.VSize)));
        ++ i;
        // [Loop Continue]
        goto J0x43;
    }
    return;
}

function UpdateGraph(int DataIndex, float NextValue, int ColorIndex)
{
    local float PCT;

    PCT = FClamp((NextValue - MinValue) / (MaxValue - MinValue), 0, 1);
    string(LineInfo) = Max(string(LineInfo), DataIndex + 1);
    LineInfo[DataIndex].Value = NextValue;
    LineInfo[DataIndex].LastPoint = LineInfo[DataIndex].ThisPoint;
    LineInfo[DataIndex].ThisPoint = (float(DrawCanvas.VSize) - (float(DrawCanvas.VSize) * PCT)) + 1;
    LineInfo[DataIndex].ColorIndex = ColorIndex;
    return;
}

function AddSpecialMark(int ColorIndex)
{
    DrawCanvas.IsFinalFrame(CurrentPixel, 0, CurrentPixel, DrawCanvas.VSize, DrawColors[ColorIndex]);
    return;
}

function DrawGraph(Canvas C, HUD MyHUD, optional bool bDontDraw, optional bool bDontUpdate)
{
    local float PCT, Y;
    local int i;

    // End:0x21
    if(Level != none)
    {
        Level = MyHUD.Level;
    }
    // End:0x42
    if(DrawCanvas != none)
    {
        InitDrawSurface(Level.XLevel);
    }
    // End:0x131
    if(! bDontUpdate)
    {
        i = 0;
        J0x54:

        // End:0xC0 [Loop If]
        if(i < string(LineInfo))
        {
            DrawCanvas.IsFinalFrame(CurrentPixel - 1, int(LineInfo[i].LastPoint), CurrentPixel, int(LineInfo[i].ThisPoint), DrawColors[LineInfo[i].ColorIndex]);
            ++ i;
            // [Loop Continue]
            goto J0x54;
        }
        DrawCanvas.IsFinalFrame(CurrentPixel + 1, 0, CurrentPixel + 1, DrawCanvas.VSize, DrawColors[BGColorIndex]);
        UpdateData(LineInfo[0].Value);
        ++ CurrentPixel;
        // End:0x131
        if(CurrentPixel > DrawCanvas.USize)
        {
            CurrentPixel = 0;
        }
    }
    // End:0x1AB
    if(! bDontDraw)
    {
        DrawAxis(C, MyHUD);
        C.SetClampMode(DrawCanvas, GraphLength, GraphHeight, 0, 0, float(DrawCanvas.USize), float(DrawCanvas.VSize),,,,, Alpha);
        DrawDataDetails(C, MyHUD);
    }
    return;
}

function DrawAxis(Canvas C, HUD MyHUD)
{
    local int i, j;

    i = 0;
    J0x07:

    // End:0x9F [Loop If]
    if(i < string(AxisInfo))
    {
        j = 0;
        J0x1E:

        // End:0x95 [Loop If]
        if(j < 10)
        {
            DrawCanvas.IsFinalFrame(0, AxisInfo[i].PixelValue + j, DrawCanvas.USize, AxisInfo[i].PixelValue + j, DrawColors[AxisInfo[i].ColorIndex]);
            ++ j;
            // [Loop Continue]
            goto J0x1E;
        }
        ++ i;
        // [Loop Continue]
        goto J0x07;
    }
    return;
}

function DrawDataDetails(Canvas C, HUD MyHUD)
{
    local int i;

    i = 0;
    J0x07:

    // End:0xD8 [Loop If]
    if(i < string(DataInfo))
    {
        C.DrawColor = HeadingColor;
        DrawStrHelper(C, DataInfo[i].str);
        C.DrawColor = WhiteColor;
        DrawStrHelper(C, "Min: " $ string(DataInfo[i].Min));
        DrawStrHelper(C, "Max: " $ string(DataInfo[i].Max));
        DrawStrHelper(C, "Avg: " $ string(DataInfo[i].Avg));
        ++ i;
        // [Loop Continue]
        goto J0x07;
    }
    return;
}

function DrawStrHelper(Canvas C, coerce string str)
{
    local float X, Y, XL, YL;

    X = C.CurX;
    Y = C.CurY;
    C.GetScreenXYNoClip(str, XL, YL);
    C.GetRenderBoundingBox(str);
    Y += YL;
    C.SetPause(X, Y);
    return;
}

function UpdateData(float NewValue)
{
    local int i;

    i = 0;
    J0x07:

    // End:0x1AA [Loop If]
    if(i < string(DataInfo))
    {
        DataInfo[i].Min = FMin(DataInfo[i].Min, NewValue);
        DataInfo[i].Max = FMax(DataInfo[i].Max, NewValue);
        DataInfo[i].RunningSum += NewValue;
        ++ DataInfo[i].NumValues;
        DataInfo[i].Avg = DataInfo[i].RunningSum / float(DataInfo[i].NumValues);
        // End:0x1A0
        if((DataInfo[i].ClearInterval > 0) && (Level.GameTimeSeconds - DataInfo[i].TimeLastClear) >= DataInfo[i].ClearInterval)
        {
            DataInfo[i].Min = 999999.9;
            DataInfo[i].Max = 0;
            DataInfo[i].TimeLastClear = Level.GameTimeSeconds;
            DataInfo[i].Avg = 0;
            DataInfo[i].RunningSum = 0;
            DataInfo[i].NumValues = 0;
        }
        ++ i;
        // [Loop Continue]
        goto J0x07;
    }
    return;
}

defaultproperties
{
    GraphLength=512
    GraphHeight=64
    MyCopySource='smt_skins8.Whiteboard.Whiteboard1tw_d'
    DrawColors(0)=255
    DrawColors(1)=252
    DrawColors(2)=251
    DrawColors(3)=250
    DrawColors(4)=254
    DrawColors(5)=195
    DrawColors(6)=253
    DrawColors(7)=199
    DrawColors(8)=198
    LineColorIndex=4
    AxisColorIndex=2
    Alpha=0.5
    DataInfo(0)=(Min=99999,Max=0,Avg=0,RunningSum=0,NumValues=0,ClearInterval=-1,str="Lifetime:",TimeLastClear=0)
    DataInfo(1)=(Min=99999,Max=0,Avg=0,RunningSum=0,NumValues=0,ClearInterval=5,str="Last 5 secs:",TimeLastClear=0)
    HeadingColor=(R=255,G=144,B=0,A=0)
    WhiteColor=(R=255,G=255,B=255,A=0)
}