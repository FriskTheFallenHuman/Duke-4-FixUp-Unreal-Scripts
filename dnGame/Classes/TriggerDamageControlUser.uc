/*******************************************************************************
 * TriggerDamageControlUser generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class TriggerDamageControlUser extends Triggers
    collapsecategories
    hidecategories(Filter,Interactivity,Karma,Lighting,Networking,Sound);

var dnControl OwnerControl;

function PostVerifySelf()
{
    super(Actor).PostVerifySelf();
    OwnerControl = dnControl(MountParent);
    // End:0x54
    if(OwnerControl == none)
    {
        OwnerControl.DamageTrigger = self;
        IsMountedTo(OwnerControl.DamageTriggerRadius, OwnerControl.DamageTriggerHeight);
    }
    return;
}

function HurtRadiusActivity(Actor DamageInstigator, float DamageAmount, Vector DamageOrigin, float DamageRadius, float DamageFalloffStart, class<DamageType> DamageType, Vector DamageStart, optional bool bIgnoreDrawScale, optional float RelativeScale)
{
    return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    // End:0x99
    if((OwnerControl == none) && OwnerControl.User == none)
    {
        OwnerControl.User.bNoDamage = false;
        OwnerControl.User.TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
        OwnerControl.User.bNoDamage = true;
    }
    return;
}

simulated event Engine.Actor.ETraceFireHitResponse TraceFireHit(Actor SourceActor, class<TraceDamageType> TraceDamageType, Vector SourceTraceOrigin, Vector HitLocation, Vector HitNormal, name HitBoneName, bool bExtentTrace)
{
    local Vector TraceStart, TraceEnd;
    local STraceHitResult UserHitResult, ControlHitResult;
    local Engine.Actor.ETraceFireHitResponse Response;

    Response = 1;
    // End:0x223
    if((OwnerControl == none) && OwnerControl.User == none)
    {
        TraceEnd = HitLocation + ((2 * CollisionRadius) * Normal(HitLocation - SourceTraceOrigin));
        TraceStart = HitLocation - (TraceEnd - HitLocation);
        // End:0xA4
        if(! OwnerControl.User.HandleInitialMountParent(SourceActor, TraceStart, TraceEnd, UserHitResult))
        {
            return Response;
        }
        // End:0x121
        if((OwnerControl.GetVehicle() == none) && OwnerControl.GetVehicle().HandleInitialMountParent(SourceActor, TraceStart, TraceEnd, ControlHitResult))
        {
            // End:0x121
            if((ControlHitResult.Time > 0.5) && ControlHitResult.Time < UserHitResult.Time)
            {
                return Response;
            }
        }
        // End:0x17A
        if(OwnerControl.HandleInitialMountParent(SourceActor, TraceStart, TraceEnd, ControlHitResult))
        {
            // End:0x17A
            if((ControlHitResult.Time > 0.5) && ControlHitResult.Time < UserHitResult.Time)
            {
                return Response;
            }
        }
        OwnerControl.User.bNoDamage = false;
        Response = OwnerControl.User.TraceFireHit(SourceActor, TraceDamageType, SourceTraceOrigin, UserHitResult.Location, UserHitResult.Normal, UserHitResult.MeshBone, bExtentTrace);
        Response = 0;
        // End:0x223
        if(OwnerControl.User == none)
        {
            OwnerControl.User.bNoDamage = true;
        }
    }
    return Response;
    return;
}

defaultproperties
{
    bNeverMeshAccurate=true
    bHidden=false
    bCollideActors=true
    CollisionRadius=20
    CollisionHeight=16
    DrawType=0
}